<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伏宸安全实验室-Future-Sec Information Security Lab</title>
  <subtitle>伏宸安全实验室Future-Sec Information Security Lab</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.future-sec.com/"/>
  <updated>2017-08-30T09:01:14.453Z</updated>
  <id>http://www.future-sec.com/</id>
  
  <author>
    <name>Future-Sec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析一</title>
    <link href="http://www.future-sec.com/broadcom-wifi-1.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-1.html</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2017-08-30T09:01:14.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android Wi-Fi驱动一直是众多安全研究员关注的重点，Android Wi-Fi驱动中曾经被发现大量root提权漏洞。 但这些漏洞都是存在于WEXT(Wireless-Extensions)接口中的，WEXT是一种即将被淘汰的Wi-Fi配置接口。取而代之的是基于nl80211协议的cfg80211接口。本篇文章主要介绍了基于nl80211协议的cfg80211怎么触发Wi-Fi芯片中的漏洞。以及相关漏洞的定位和分析。</p>
<h2 id="为什么研究Wi-Fi？"><a href="#为什么研究Wi-Fi？" class="headerlink" title="为什么研究Wi-Fi？"></a>为什么研究Wi-Fi？</h2><p>Wi-Fi的使用已经与生活密不可分，Wi-Fi安全问题也应该受到更大的重视。在最近的一次移动安全峰会上，有一个议题是关于Wi-Fi芯片漏洞远程代码执行的。借此，重点研究了一下Wi-Fi芯片漏洞。</p>
<h2 id="读懂Poc需要哪些前提知识"><a href="#读懂Poc需要哪些前提知识" class="headerlink" title="读懂Poc需要哪些前提知识"></a>读懂Poc需要哪些前提知识</h2><h3 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h3><pre><code>poc 是jni语言编写的，那什么是jni呢?
</code></pre><p>JNI全称为java native interface,Java本地开发接口,JNI是一个协议,这个协议可以用来沟通Java代码和本地的c/c++代码 让两者可以相互的调用<br>在poc的文件结构中我们可以看到一个jni文件都包含下面三个文件：<br>•    Android.mk文件是在使用NDK编译C代码时必须的文件。Android.mk文件中描述了哪些C文件将被编译且指明了如何编译。<br>•    Application.mk目的是描述在你的应用程序中所需要的模块(即静态库或动态库)。<br>•    Pwn.c是触发漏洞的测试代码。</p>
<h3 id="Netlink-Protocol-Library-Suite-（libnl）"><a href="#Netlink-Protocol-Library-Suite-（libnl）" class="headerlink" title="Netlink Protocol Library Suite （libnl）"></a>Netlink Protocol Library Suite （libnl）</h3><p>主要用来套接字的处理、发送和接收数据、消息的构造和解析。</p>
<h3 id="Netlink"><a href="#Netlink" class="headerlink" title="Netlink"></a>Netlink</h3><p>Netlink协议是基于套接字的进程间通信（IPC）机制，它可用于用户空间进程和内核之间或者用户空间进程之间的通信。Netlink 协议基于 BSD 套接字并使用 AF_NETLINK 地址簇。每一个 Netlink协议都有自己的协议号（比如：NETLINK_ROUTE，NETLINK_NETFILTER，等等）。<br>它的寻址方案是基于 32 位的端口号（之前被称为 PID），这个端口号用来唯一的标识每一个对等通信节点。<br>-nl_send_auto_complete()消息和数据的发送函数<br>poc中主要使用nl_send_auto_complete函数来发送数据，这个是libnl封装好的。最终还是调用nl_send_auto() 函数来发送数据。参考一个翻译的官方文档：<a href="http://blog.guorongfei.com/2015/01/27/libnl-translation-part4/" rel="external nofollow noopener noreferrer" target="_blank">http://blog.guorongfei.com/2015/01/27/libnl-translation-part4/</a><br>-nla_put()数据封装函数<br>nla_put() 函数以 nla_reserve()函数为基础，只不过它还接收一个指向包含属性载荷的缓冲区的指针。这个函数会自动把数据从缓冲区拷贝到消息中去。会利用嵌套属性进行数据包封装，属性的嵌套是通过在代码前后分别调用nla_nest_start() 和 nla_nest_end() 来完成的。<br>nla_nest_start() 函数会在消息中添加一个没有实际载荷的属性头部，在此之后添加的数据都会成为容器属性的载荷部分直到调用 nla_nest_end()为止，它的调用“关闭”了容器属性并校正它的载荷长度以包含所有的数据长度。</p>
<h3 id="cfg80211-nl80211"><a href="#cfg80211-nl80211" class="headerlink" title="cfg80211/nl80211"></a>cfg80211/nl80211</h3><p>nl80211是供用户空间进程使用，操作利用cfg80211 API 开发无线网卡驱动。cfg80211是开发驱动的接口。</p>
<h3 id="TDLS-协议"><a href="#TDLS-协议" class="headerlink" title="TDLS 协议"></a>TDLS 协议</h3><p>TDLS旨在提供一种不依赖AP的Wi-Fi网络上的对等通信方式。 TDLS是基于IEEE 802.11z标准。TDLS自动链接配置主要通过几个过程来完成<br>•    TDLS Discovery过程<br>TDLS Discovery过程不是必要选项。一个TDLS STA设备可以选择直接发起TDLS建立过程。 TDLS Discovery 过程由一部STA设备通过AP或Go(群组拥有者) 向另外一部STA设备发送一个TDLS Discovery请求帧开始。如果目标设备也兼容TDLS，它将直接向该发送设备回复TDLS Discovery 响应帧，并提供有关设备本身的能力信息。包括所有支持速率及信道。TDLS Discovery 过程除了提供目标STA确实支援TDLS的相关能力信息外，TDLS Discovery过程的帧交互亦可以用作AP与目标TDLS STA设备的相对信号强度的测量。发起的STA能够判断与目标STA间的直接连接是否有利于提供有效信息。通过对比分別由目标STA设备与AP设备收到的信号强度，发起的STA设备可以评估建立直接连接是否会比通过AP发送数据包更为有效。<br>•    TDLS Setup过程<br>TDLS Setup过程需要进行一系列的帧交换。发起设备首先发送一个TDLS传输请求，通过AP信道传输至目标设备。封装帧包括发送设备的性能信息。目标设备之后会回复TDLS Setup 建立响应，同样通过AP信道传送其性能信息，另外附加一个状态代码，表示接受或者拒绝该建立请求。如果接受Setup请求，发送设备将会通过AP传送一个TDLS 确认帧（Confirm Frame）。至此，两部设备之间开始进行直接通讯。<br>•    TDLS Teardown过程<br>发送方或接受方设备均可向另外一方直接发送TDLS拆解帧（Teardown Frame），而如果未处于讯号范围內，该帧则可以通过AP信道传输。</p>
<h2 id="POC-的分析过程"><a href="#POC-的分析过程" class="headerlink" title="POC 的分析过程"></a>POC 的分析过程</h2><h3 id="NDK环境搭建"><a href="#NDK环境搭建" class="headerlink" title="NDK环境搭建"></a>NDK环境搭建</h3><p>网上有很多参考，这里就不再赘述。</p>
<h3 id="编译POC"><a href="#编译POC" class="headerlink" title="编译POC"></a>编译POC</h3><p>在这次研究过程中，POC的编译过程花费了大量时间。主要是不了解libnl库的正确使用方法，然后找了很多资料都是安卓开发ndk的，没有怎么使用libnl库的。最后经过大量资料参考，终于找到了一种暂时可行的方法，在那篇博文中作者称目前android自身没有携带libnl库，所以如果用到libnl库就需要把libnl一起移植到安卓上。我们就根据他所描述的方法，从github上down下来了一份已经移植好的安卓平台的libnl库。<br>具体命令如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/dschuermann/libnl-3-android</span></div><div class="line">cd libnl<span class="number">-3</span>-android/lib</div><div class="line">cd ../android_toolchain</div><div class="line">gvim jni/Android.mk(前文有该文件的相关介绍)</div><div class="line">gvim jni/Applcation.mk (前文有该文件的相关介绍)</div></pre></td></tr></table></figure></p>
<p>在Android.mk的最后部分加上这一段：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> $(CLEAR_VARS)  LOCAL_MODULE := pwn  LOCAL_SRC_FILES :=  $(call <span class="keyword">list</span>-all,$(LOCAL_PATH),pwn.c)  LOCAL_SHARED_LIBRARIES := nl<span class="number">-3</span> nl-genl<span class="number">-3</span>  <span class="keyword">include</span> $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure></p>
<p>修改好之后将pwn.c文件拷贝到lib文件就可以编译了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../../android_toolchain</div><div class="line">ndk-build</div></pre></td></tr></table></figure></p>
<p>编译好后将libs文件夹下的libnl-3.so，libnl-genl-3.so，pwn 利用adb命令将libs文件下的lib-3.so、lib-genl-3.so、pwn拷贝到已经root后的支持nl80211协议的测试机中，执行编译好的pwn就可以测试poc是否可用了。</p>
<h3 id="测试POC"><a href="#测试POC" class="headerlink" title="测试POC"></a>测试POC</h3><p>分别在华为、小米、nexus 6p手机上进行了poc的测试。poc具体执行情况在小米手机上执行所有poc都是no such file or directory 。在华为手机上发送数据后的返回值为success。nexus手机测试结果也是success。 因为没有过wifi漏洞分析经验，不知道触发漏洞后正确的返回值应该是什么？所以接下来要透彻了解漏洞是否触发还需要大量的固件分析，漏洞定位，利用漏洞复现工作。</p>
<h2 id="Wifi芯片代码分析"><a href="#Wifi芯片代码分析" class="headerlink" title="Wifi芯片代码分析"></a>Wifi芯片代码分析</h2><p>经过一系列的各种折腾，终于开始慢慢切入正题。分析的芯片是nexus 6p 6.0 版本。</p>
<h3 id="怎么找到Wi-Fi固件？"><a href="#怎么找到Wi-Fi固件？" class="headerlink" title="怎么找到Wi-Fi固件？"></a>怎么找到Wi-Fi固件？</h3><p>要分析漏洞的成因，需要找到Wi-Fi芯片中与应用层通信部分代码。那接下来要怎么做才能将手机中的固件代码导出来呢？<br>第一步：我们需要了解Wi-Fi芯片在安卓系统内存中的加载位置。关于这个问题我们参考了Project Zero 的博客中分析的有关Wi-Fi芯片架构的知识，在Broadcom Wi-Fi芯片组相关的数据手册中，ARM内核具有用于保存固件代码的640KB ROM，以及用于数据处理（例如堆）和存储固件代码补丁的768KB RAM。</p>
<p>RAM的位置可以通过读取主机驱动程序中的初始化代码，找到包含RAM内容的文件是上图所示fw_bcmdhd.bin文件（实际上，通过驱动程序的代码，我们找到了BCMDHD_FW_PATH配置，其用于表示驱动程序将内容上传到RAM的文件的位置。）</p>
<p>ROM转存则可以通过Broadcom提供的一个非常强大的命令行实用程序dhdutil，可用于通过bcmdhd驱动程序与芯片进行交互。命令： ./dhdutil -i wlan0 membytes r 0x0 0xA0000 &gt; /sdcard/rom.bin</p>
<h3 id="什么时候产生漏洞？"><a href="#什么时候产生漏洞？" class="headerlink" title="什么时候产生漏洞？"></a>什么时候产生漏洞？</h3><p>  利用上述方法转存出来bin文件之后，我们首先要了解bug产生的原因，才能下一步更好的定位漏洞位置。根据Project Zero提供的技巧，Wi-Fi管理帧以小的“标记”数据块（称为信息元素（IE））对大多数信息进行编码，传输的大部分信息也是利用IE进行编码的，所以这应该是我们逆向分析的一个好的出发点，有数据交互才可能出现漏洞。分析了漏洞利用可行性之后确定了在进行TDLS连接过程中会触发漏洞。有关TDLS前文中有描述。</p>
<h3 id="定位固件中漏洞位置"><a href="#定位固件中漏洞位置" class="headerlink" title="定位固件中漏洞位置"></a>定位固件中漏洞位置</h3><p>根据Project Zero的提示在brcmsmac驱动程序可以找到Broadcom是使用一个函数从bcm_parse_tlvs帧提取IE。那接下来我们需要做的就是定位这个函数。搜索附近字符串提示我们首先定位到了bcm_parse_tlvs函数位置。<br><img src="/images/wifi1.png" alt="img"><br>然后通过交叉参考分析最终找到漏洞函数，要探索该漏洞的成因，首先要知道TDLS建立确认帧的函数处理流程。这个函数首先会执行一些验证，以确保请求是合法的。其查询内部数据结构，以确保确实正在与请求对等体建立TDLS连接。然后，其验证Link-ID IE（通过检查其编码的BSSID与当前网络的匹配），并且还验证32字节的发起者随机数（“Snonce”）值（通过将其与存储的初始随机数进行比较）。 建立对请求可能确实是合法的一定程度的置信度后，该函数开始调用一个内部帮助函数，任务是计算MIC并确保其与编码在帧中的一致。固件还包括该函数的名称(“wlc_tdls_cal_mic_chk”)。我们先看MIC通过编码在握手帧中的计算。<br><img src="/images/wifi2.png" alt="img"></p>
<p>我们对固件逆向后也定位到了这个函数，如下图所示，反编译后伪代码中提示信息可以看到在标记的第二段代码进行了IE长度的校验，后续的IE就没有校验了。因此，将RSN-IE的长度设置为较大的值将导致Timeout Interval和Fast Transition IE越界复制，从而溢出缓冲区。<br><img src="/images/wifi3.png" alt="img"></p>
<p>接下来看断开连接时mic计算。<br><img src="/images/wifi4.png" alt="img"></p>
<p>伪代码中的在断开帧时没有对FT-IE进行溢出校验，如果构造好FT-IE数据就能触发溢出。<br><img src="/images/wifi5.png" alt="img"></p>
<h2 id="漏洞触发场景复现"><a href="#漏洞触发场景复现" class="headerlink" title="漏洞触发场景复现"></a>漏洞触发场景复现</h2><p>知道了漏洞是怎么产生的，接下来就是测试漏洞是否按照我们预期的那样能够触发。<br>首先，准备了同时支持TDLS 协议的TL-WN722N无线网卡，跟nexus 6p。<br>第二步，为了测试漏洞，需要修改wpa_supplicant，以使我们能发送包含过大FTIE的TDLS断开帧。查看wpa_supplicant的代码可快速识别负责生成和发送断开帧的函数wpa_tdls_send_teardown。通过对该函数添加一些小的更改（绿色），我们应该能够在收到断开帧时触发溢出，导致超写25个字节的0xAB，修改后make编译一下。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> int wpa_tdls_send_teardown(struct wpa_sm *sm, <span class="keyword">const</span> u8 *addr, u16 reason_code)</div><div class="line">&#123;</div><div class="line">...</div><div class="line">ftie = (struct wpa_tdls_ftie *) pos;</div><div class="line">ftie-&gt;ie_type = WLAN_EID_FAST_BSS_TRANSITION;</div><div class="line">ftie-&gt;ie_len = <span class="number">255</span>;</div><div class="line">os_memset(pos + <span class="number">2</span>, <span class="number">0x00</span>, ftie-&gt;ie_len);</div><div class="line">os_memset(pos + ftie-&gt;ie_len + <span class="number">2</span> - <span class="number">0x19</span>, <span class="number">0xAB</span>, <span class="number">0x19</span>); <span class="comment">//Overflowing with 0xAB</span></div><div class="line"></div><div class="line">os_memcpy(ftie-&gt;Anonce, peer-&gt;rnonce, WPA_NONCE_LEN);</div><div class="line">os_memcpy(ftie-&gt;Snonce, peer-&gt;inonce, WPA_NONCE_LEN);</div><div class="line">pos += ftie-&gt;ie_len + <span class="number">2</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三步，执行TDLS命令去触发。这种情况是可以触发漏洞的，但是呢并没有明显现象的原因是Broadcom堆实现背后的逻辑。深入分析分配算符的逻辑，我们发现其非常简单，其是一个简单的“最适合”分配算符，其执行向前和向后合并，并保持一个空闲块单链表。当分配块时，从最适合空闲块（足够大的最小块）的末端（最高地址）对其进行切取。在断开连接后，空闲列表中的其中一个块的大小突然异常大。回想一下，由于分配算符使用“最适合”，这意味着只要存在其他足够大的空闲块，后续分配将不会被放置在此块中。这也意味着固件不会崩溃，实际上会继续正常运行。如果我们不可视化堆的状态，我们就根本无法确定发生了什么事。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TDLS_DISCOVER – 发送“TDLS发现请求”帧并列出响应</div><div class="line">TDLS_SETUP - 建立与具有给定MAC地址的对等体的TDLS连接</div><div class="line">TDLS_TEARDOWN - 断开与具有给定MAC地址的对等体的TDLS连接</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近两周的分析过程中，确实遇到了很多问题，比如最开始编译poc的过程中对libnl库不会用，花了很长时间，最终的可行方法也不知道是不是最适合的。poc代码中使用了内核通信netlink协议，之前并没有接触过，这次也只是花了两天时间粗略看了poc中用到的函数。有关netlink相关知识后续还要深入学习。接下来编译测试poc之后，poc测试返回success但是并没有明显的触发漏洞现象。<br>基于此，参考了Project Zero的博客复现了CVE-2017-0561漏洞，整个过程从Wi-Fi芯片固件的知识开始了解，到怎么定位漏洞位置，怎么找到漏洞，怎么利用漏洞触发漏洞。这个过程也学到了很多知识。比如，Wi-Fi帧格式、TDLS协议、Broadcom堆实现、支持TDLS协议的wpa_supplicant开源工具等这些的理解。接下来要想利用漏洞就需要深入的去理解Wi-Fi的通信过程，netlink协议，以及动态的分析过程。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、 <a href="http://bobao.360.cn/learning/detail/3742.html" rel="external nofollow noopener noreferrer" target="_blank">http://bobao.360.cn/learning/detail/3742.html</a><br>2、 <a href="https://googleprojectzero.blogspot.jp/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html" rel="external nofollow noopener noreferrer" target="_blank">https://googleprojectzero.blogspot.jp/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android Wi-Fi驱动一直是众多安全研究员关注的重点，Android Wi-Fi驱动中曾经被发现大量root提权漏洞。 但这些漏洞都
    
    </summary>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/categories/BROADCOM-WI-FI/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析二</title>
    <link href="http://www.future-sec.com/broadcom-wifi-2.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-2.html</id>
    <published>2017-08-29T16:00:00.000Z</published>
    <updated>2017-08-30T09:01:17.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章写过之后又修改了一部分内容，加了很多细节。不过还有一点没有详细说明，具体怎么定位到漏洞函数。这里再进行定位流程详细梳理。<br>1、首先是定位到帧提取函数<br>2、这个定位方式根据Project Zero的提示参考到bcm_parse_tlvs源码，然后在这部分源码中找到明显字符串，这里我找到的是“%04”，在rom.bin中字符串参考可以找到字符串位置。然后仔细看上下一些函数就能找到我们需要的bcm_parse_tlvs函数。上篇文章已经给出了具体伪代码示例。这里就不再赘述。<br>3、定位到函数之后我们可以根据Project Zero 提供的高级逻辑在ida中定位到相关位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">uint8_t* buffer = malloc(<span class="number">256</span>);</div><div class="line">uint8_t* pos = buffer;</div><div class="line"><span class="comment">//Copying the initial (static) information</span></div><div class="line">uint8_t* linkid_ie = bcm_parse_tlvs(..., <span class="number">101</span>);</div><div class="line">memcpy(pos, linkid_ie + <span class="number">0x8</span>, <span class="number">0x6</span>);  pos += <span class="number">0x6</span>;   <span class="comment">//Initiator MAC</span></div><div class="line">memcpy(pos, linkid_ie + <span class="number">0xE</span>, <span class="number">0x6</span>);  pos += <span class="number">0x6</span>;    <span class="comment">//Responder MAC</span></div><div class="line">*pos = transaction_seq;             pos++;                   <span class="comment">//TransactionSeq</span></div><div class="line">memcpy(pos, linkid_ie, <span class="number">0x14</span>);       pos += <span class="number">0x14</span>;             <span class="comment">//LinkID-IE</span></div><div class="line"><span class="comment">//Copying the RSN IE</span></div><div class="line">uint8_t* rsn_ie = bcm_parse_tlvs(..., <span class="number">48</span>);</div><div class="line"><span class="keyword">if</span> (rsn_ie[<span class="number">1</span>] + <span class="number">2</span> + (pos - buffer) &gt; <span class="number">0xFF</span>) &#123;</div><div class="line">    ... <span class="comment">//Handle overflow</span></div><div class="line">&#125;</div><div class="line">memcpy(pos, rsn_ie, rsn_ie[<span class="number">1</span>] + <span class="number">2</span>); pos += rsn_ie[<span class="number">1</span>] + <span class="number">2</span>;    <span class="comment">//RSN-IE</span></div><div class="line"><span class="comment">//Copying the remaining IEs</span></div><div class="line">uint8_t* timeout_ie = bcm_parse_tlvs(..., <span class="number">56</span>);</div><div class="line">uint8_t* ft_ie      = bcm_parse_tlvs(..., <span class="number">55</span>);</div><div class="line">memcpy(pos, timeout_ie, <span class="number">0x7</span>);       pos += <span class="number">0x7</span>;              <span class="comment">//Timeout Interval IE</span></div><div class="line">memcpy(pos, ft_ie, <span class="number">0x54</span>);           pos += <span class="number">0x54</span>;             <span class="comment">//Fast-Transition IE</span></div></pre></td></tr></table></figure></p>
<p>到这里就不再继续解释了。如果还有地方不清楚可以提出疑问。</p>
<h2 id="切入主题"><a href="#切入主题" class="headerlink" title="切入主题"></a>切入主题</h2><p>1、本篇文章主要核心是侧重CVE-2017-9417的漏洞分析和利用。<br>2、涉及到的相关知识将以链接形式详细给出</p>
<h2 id="CVE-2017-9417漏洞分析"><a href="#CVE-2017-9417漏洞分析" class="headerlink" title="CVE-2017-9417漏洞分析"></a>CVE-2017-9417漏洞分析</h2><h3 id="分析ROM固件找到漏洞"><a href="#分析ROM固件找到漏洞" class="headerlink" title="分析ROM固件找到漏洞"></a>分析ROM固件找到漏洞</h3><p>1、一种方式是七月分打过补丁的Rom固件跟六月份没打补丁的利用 BinDiff （安装到IDA目录下在IDA中以插件形式执行，Crtl+6使用）对比，看修改了哪个补丁。最后可以找到漏洞函数wlc_bss_parse_wme_ie。这个函数用来处理关联、重新关联和信标包。这些信标包包含信息元素，包含Wi-Fi标准扩展的数据。每个信息元素（IE）的格式是：<br>type (1 byte), length (1 byte), data of (length) bytes<br>2、这个函数功能用来处理服务质量扩展的WME信息元素。下图是WME信息元素的格式：<br><img src="/images/wifi6.png" alt="img"><br>3、定位漏洞函数<br>·    bindiff对比6月份补丁跟7月份补丁的差异<br>·    第一步：将两个补丁版本都dump下来。<br>·    第二步：安装bindiff 到 ida 目录。安装方式，这里提供windows下安装包bindiff<br>·    第三步：先用ida打开7月份补丁，分析固件补丁时要注意它在内存中的存储位置，在上篇文章中我们提到ram在安卓系统内存中加载起始地址在0x180000.所以我们需要在ida加载时手动设置加载起始位置。并将分析好的数据保存数据库idb文件来方便我们跟6月份版本做对比。具体配置如下：<br><img src="/images/wifi7.png" alt="img"><br><img src="/images/wifi8.png" alt="img"><br>·    第四步：同样方式打开6月份补丁文件，Crtl+6启动bindiff插件，选择我们上一步保存的idb文件，可以对比分析两个版本有什么不同。<br>    跟踪到造成漏洞的函数。<br> <img src="/images/wifi9.png" alt="img"><br><img src="/images/wifi10.png" alt="img">   </p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>·该函数在关联/重新关联响应帧部分出现bug，它将接收到的ie复制到24（0x18）字节长的预分配缓冲区，大小适合最大的有效WME信息元素长度，但是使用信息元素头的长度可以高达255（0xff），创建一个堆在外边界写入231个字节，可造成溢出。 分析wlc_bss_parse_wme_ie漏洞函数。<br>assocresp_ies数据<br><img src="/images/wifi11.png" alt="img"><br>分析数据包信息大致理解关联帧IE的0x0c头部信息暂时理解为特定供应商标签。<br><img src="/images/wifi12.png" alt="img"><br>如下图比较可以看到修补bug前，没有对wme大小进行校验直接拷贝到预分配的缓冲区。<br><img src="/images/wifi13.png" alt="img"><br>缓冲区分配ida中参考在<a href="http://note.youdao.com/noteshare?id=7cb193be6f06643ef49f5f780bdb78c9" rel="external nofollow noopener noreferrer" target="_blank">这里</a></p>
<h3 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h3><p>这个bug很容易复现，因为最新版的Hostapd 支持自定义信息元素。<br>hostapd 安装：链接</p>
<ol>
<li>下载hostapd到ubuntu 14.04</li>
<li>解压hostapd</li>
<li>配置hostapd，使它编译为支持nl80211驱动<br>cp defconfig .config<br>vi .config #找到“#CONFIG_DRIVER_NL80211=y”，去掉“#”符号。保存。</li>
<li>make #编译hostapd ，编译过程会报错，是因为缺少libnl库<br><img src="/images/wifi14.png" alt="img"><br>解决方法：下载并编译安装libnl 可以到主页下载：<a href="http://www.infradead.org/~tgr/libnl/，也可以使用Git下载：" rel="external nofollow noopener noreferrer" target="_blank">http://www.infradead.org/~tgr/libnl/，也可以使用Git下载：</a><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> git:<span class="comment">//github.com/tgraf/libnl-1.1-stable.git</span></div><div class="line">cd libnl<span class="number">-1.1</span>-stable</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
</li>
</ol>
<p>5、make编译<br><img src="/images/wifi15.png" alt="img"><br>在启动hostapd时指定配置文件<br>1、新建配置文件 在/etc/目录新建一个文件hostapd.conf<br>2、配置文件内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># WiFi Hotspot</div><div class="line">interface=wlan0</div><div class="line">driver=nl80211</div><div class="line">#Access Point</div><div class="line">ssid=YourNetworkNameHere</div><div class="line">hw_mode=g</div><div class="line"># WiFi Channel:</div><div class="line">channel=1</div><div class="line">macaddr_acl=0</div><div class="line">auth_algs=1</div><div class="line">ignore_broadcast_ssid=0</div><div class="line"></div><div class="line">assocresp_elements=ddff0050f2020101000003a4000027a4000042435e0062322f00414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141</div><div class="line">vendor_elements=ddff0050f2020101000003a4000027a4000042435e0062322f00414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141</div></pre></td></tr></table></figure></p>
<p>1.interface：接入点设备名称，注意不要包含ap后缀，即如果该设备称为wlan0ap，填写wlan0即可；<br>2.driver：设定无线驱动，我这里是nl80211；<br>3.ssid: 设置名字(SSID = service set identifier) ,老版本(iwconfig)叫”essid”.<br>4.hw_mode: 设置操作mode,channels.有效的值取决于硬件,通常:a, b, g. ‘g’大多数都支持, 并向前兼容802.11b<br>5.channel:设置hostapd操作的channel.<br>6.ignore_broadcast_ssid: 开启或禁用广播ssid.<br>7.macaddr_acl: MAC地址过滤. .<br>8.auth_algs: 指定采用哪种认证算法，采用位域（bit fields）方式来制定，其中第一位表示开放系统认证（Open System Authentication, OSA），第二位表示共享密钥认证（Shared Key Authentication, SKA）。我这里设置alth_algs的值为1，表示只采用OSA；如果为3则两种认证方式都支持。 9.assocresp_elements:关联响应帧的附加供应商特定信息（翻译过来中文参考，不确定是否正确） 10.vendor_elements：信标和探测响应帧的附加供应商特定元素（翻译过来中文参考，不确定是否正确）<br>3、启动 hostpad<br>1.启动<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./hostapd -B /etc/hostapd.conf</div></pre></td></tr></table></figure></p>
<p>2.启动过程如果出现“Interface wlan0 wasn’t started”错误，先运行下面2行命令<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo nmcli nm wifi off</div><div class="line">sudo rfkill unblock wlan</div></pre></td></tr></table></figure></p>
<p>然后继续执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./hostapd -B /etc/hostapd.conf</div></pre></td></tr></table></figure></p>
<p>3.目标手机连上指定开启的wifi名称为“YourNetworkNameHere”的wifi，即可看到漏洞被触发，wifi重启。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>前面已经了解了漏洞的成因，和简单复现了漏洞。接下来我们要做的是利用漏洞做些事情。后续继续分析将详细给出exploit的编写方法。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、Ubuntu上编译hostapd：<a href="http://blog.csdn.net/hnllc2012/article/details/49151137" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/hnllc2012/article/details/49151137</a><br>2、博客参考：<a href="http://boosterok.com/blog/broadpwn1/" rel="external nofollow noopener noreferrer" target="_blank">http://boosterok.com/blog/broadpwn1/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇文章写过之后又修改了一部分内容，加了很多细节。不过还有一点没有详细说明，具体怎么定位到漏洞函数。这里再进行定位流程详细梳理。&lt;br&gt;1
    
    </summary>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/categories/BROADCOM-WI-FI/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>中间件漏洞检测框架(F-MiddlewareScan)</title>
    <link href="http://www.future-sec.com/f-middlewarescan.html"/>
    <id>http://www.future-sec.com/f-middlewarescan.html</id>
    <published>2016-03-16T16:00:00.000Z</published>
    <updated>2017-07-10T18:59:50.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>实现针对中间件的自动化检测，端口探测-&gt;中间件识别-&gt;漏洞检测-&gt;获取webshell<br>参数说明<br>-h 必须输入的参数，支持ip(192.168.1.1)，ip段（192.168.1），ip范围指定（192.168.1.1-192.168.1.254），最多限制一次可扫描65535个IP。<br>-p 指定要扫描端口列表，多个端口使用,隔开 例如：7001,8080,9999。未指定即使用内置默认端口进行扫描(80,4848,7001,7002,8000,8001,8080,8081,8888,9999,9043,9080)<br>-m 指定线程数量 默认100线程<br>-t 指定HTTP请求超时时间，默认为10秒，端口扫描超时为值的1/2。<br>例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python F-MiddlewareScan.py -h <span class="number">10.111</span><span class="number">.1</span></div><div class="line">python F-MiddlewareScan.py -h <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="number">-192.168</span><span class="number">.2</span><span class="number">.111</span></div><div class="line">python F-MiddlewareScan.py -h <span class="number">10.111</span><span class="number">.1</span><span class="number">.22</span> -p <span class="number">80</span>,<span class="number">7001</span>,<span class="number">8080</span> -m <span class="number">200</span> -t <span class="number">6</span></div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/images/640.jpg" alt="img"></p>
<p>漏洞检测脚本以插件形式存在，可以自定义添加修改漏洞插件，存放于plugins目录，插件标准非常简单，只需对传入的IP，端口，超时进行操作，成功返回“YES|要打印出来的信息”即可。<br>新增插件需要在 plugin_config.ini配置文件中新增关联（多个漏洞插件以逗号隔开）。<br>中间件识别在discern_config.ini文件中配置（支持文件内容和header识别）</p>
<p>目前内置了19个漏洞插件，希望大家可以一起编写更多的插件，目前还缺少weblogic自动部署和反序列化探测以及中间件的反序列化自动获取webshell的插件等等。</p>
<p>下载地址：<a href="http://down.future-sec.com/F-MiddlewareScan.rar" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/F-MiddlewareScan.rar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;实现针对中间件的自动化检测，端口探测-&amp;gt;中间件识别-&amp;gt;漏洞检测-&amp;gt;获取webshell&lt;br&gt;参数
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://www.future-sec.com/tags/python/"/>
    
      <category term="自动化检测" scheme="http://www.future-sec.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>简单验证码识别及工具编写思路</title>
    <link href="http://www.future-sec.com/verification_code.html"/>
    <id>http://www.future-sec.com/verification_code.html</id>
    <published>2016-03-06T16:00:00.000Z</published>
    <updated>2017-07-10T19:39:19.295Z</updated>
    
    <content type="html"><![CDATA[<p>注：此文章只适合简单验证码，最后也将编写的工具附上以及关键部分代码和使用说明文档。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>虽然验证码发展到如今有许多人类都难以识别的状态了，但人有部分老系统使用的验证码异常的简单。还有一些网站由于程序员本身的素质或者缺乏相关图像相关的知识，所以并没有自己写验证码的生成程序，而是直接在网上随便复制粘贴一个Demo级别的代码来用，以达到网站有验证码的目的，而忽略了验证码的强弱性，导致很多网站的验证码都是爆款弱验证码。<br>如：</p>
<p><img src="/images/69145828_1.png" alt="img"></p>
<p> 还有更糟糕的比如：</p>
<p><img src="/images/69145828_2.png" alt="img"></p>
<p>   直接就能复制的…这种是完全不知道验证码的意义或者为了应付而做的验证码</p>
<h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>好吧忽略上面的图继续说。</p>
<p>对于那些简单验证码他们的共同点是：</p>
<ol>
<li>标准字体</li>
<li>背景单简单甚至纯色没有背景</li>
<li>字体并没有粘贴在一起<br>而本文讨论的就是这类的验证码。对于那种连背景都没有的纯色、标准字体、没有黏贴的那种再简单不过了，直接就是100%的识别率。</li>
</ol>
<p><img src="/images/69145828_3.png" alt="img"></p>
<p>这种就不讨论了，下面来看看wooyun的验证码。<br> Wooyun的验证码有两种状态：</p>
<p><img src="/images/69145828_4.png" alt="img"></p>
<pre><code>一种是白色文字深色背景，一种是黑色文字浅色背景。如果只有一种，无论是那种设定一个阀值都能很好的二值化，但现在的情况却是有两种，所以我能想到的最简单的方式，那好，我就给出两个阀值，对于黑色文字我就用一个较小一点的阀值，对于白色文字我就用一个较大一点的阀值。但是这样还是会出现一个问题，白色文字二值化后背景黑色文字白色 ，而黑色文字二值化后背景白色文字黑色，就像下面一样：
</code></pre><p><img src="/images/69145828_5.png" alt="img"></p>
<p>　　可以看出上面我左边框选区域一切正常，而右边却出了问题，那是因为在我写程序的时候，我认为二值化后文字都是黑色背景是白色，所以我就把黑色区域当作文字来框选，就看到了如上的效果。所以说这是一个问题，不仅要二值化，二值化后还要到底白色是文字还是黑色是文字。<br>　　于是我又想到一种办法，通常情况下一张图上背景的面积都会大于文字所占用的面积，所以在二值化的同时我还做了一件事情，二值化的同时记录下黑点个数和白点个数，如果黑点的个数大于了白点的个数，那么我就把黑白反色一下，让黑色像素点变成最少，这样再把黑色像素当作文字处理。</p>
<p><img src="/images/69145828_6.png" alt="img"></p>
<p>　　这样做还有一个问题就是，我应该怎么知道什么时候应该使用那一个阀值来二值化，当然办法可以有很多，比如当图像上深色像素多余浅色像素的时候，使用较大阀值，否则相反，不过我并不是这样做的。</p>
<p><img src="/images/69145828_7.png" alt="img"></p>
<p>　 　在工具上我提供了一个框，让用户输入验证码的字符个数，这样的话我对体统的阀值挨个遍历，二值化后去识别区域，如果框出来的区域个数是有问题的，那么就换下一个阀值，如果所有阀值都遍历完了还是有问题 ，那么这验证码确实也是超出这个工具的范围了，因为这个工具的目的是通用，对于那些需要单独写代码来识别的不在他的能力范围内。<br>　　在这之前一些验证码可能还需要一些处理，比如很常见的一些验证码有边框的。</p>
<p><img src="/images/69145828_8.png" alt="img"></p>
<p>　　左边是没有裁剪的边框，一起被二值化成为了黑色，然后拆字就悲剧了，右边是裁剪掉了一个像素的把边框去掉了，然后就一切正常了，这种情况就不说了，都懂的。<br>　　还有一种比较复杂的情况，因为二值化并不是万能的，并不是说什么验证码一进行二值化后，文字和背景就出来了，下面这张图是我以前程序需要做的百度推广的验证码识别。</p>
<p><img src="/images/69145828_9.png" alt="img"></p>
<p>　　上面这张图不怎么能看到效果，因为都是好几年前的事情了，验证码连接访问已经是500了，这张图都是测试的时候的截图。</p>
<p><img src="/images/69145828_10.png" alt="img"></p>
<p>　　我描述一下情况吧，上面的验证码，首先有边框、文字、干扰线，即使能把边框裁剪掉，也找不到一个合适的阀值来把线条和文字分离，很简单因为他的线条的颜色比文字的颜色深，如果我的阀值太小，那么我的文字就没有了，只会剩下一些线条在那里。</p>
<p><img src="/images/69145828_11.png" alt="img"></p>
<p>　　这图为上面那张图片上验证码的NZ两个字符，在ps中放大的效果(尽管上面图像原来并非保存的png格式已经失真，但大概还是能看到点什么的) 我也去翻了翻以前的代码来看，当初我二值化的时候，并非直接二值化的，在二值化之前还单独对RGB进行了判断，代码截图如下：</p>
<p><img src="/images/69145828_12.png" alt="img"></p>
<p>　　百度推广的验证码是我做的第一个验证码识别程序，所以我一直记得很清楚，不是一个二值化就能搞定的，所以说在这个工具中我也加入了同样可以单独处理RGB的功能。<br>　　由于百度的这个验证码已经访问不了了，所以我找了一个同样有线条的验证码，但是这个验证码线条颜色比文字颜色浅，所以我就用默认的127作为阀值，假设二值化无法搞定。</p>
<p><img src="/images/69145828_13.png" alt="img"></p>
<p>　　用127阀值上面线条一起被黑化了，但是图片中文字颜色接近黑色，而线条颜色却要浅一点，所以判断的时候，可以认为RGB的平均值大于20的就视为背景，就可以这样干。</p>
<p><img src="/images/69145828_14.png" alt="img"><br>　　然后效果就成了这样：</p>
<p><img src="/images/69145828_15.png" alt="img"></p>
<p>　 　这样线条就被处理掉了，不过这个验证码直接设置阀值就能搞定，只是为了说明，所以采用127作为阀值。还有一点这个验证码和百度的那个他们线条，都是在文字的下方，如果是在文字上方，那么同样的超出了这个工具的范围 ，对于线条在上方的，我想过一些处理方式，假设线条为红色的时候，我在遍历的时候遇到一个红色像素点，我就把红色像素设置为和他相邻像素的非红色的颜色，但是我想了一想这个“相邻”，就涉及了它周围八个像素点，我应该取那一个像素点的颜色。<br>     如果是在背景上还好，他周围应该都是背景的颜色，那一个都无所谓，可是如果是在线条，背景还有文字的交界处就不好处理了，所以工具里面暂时还没提供这样的功能，还有那种很难分离背景或者字黏贴在一起的，但是每个文字都是一个颜色的那种，也想过一些处理方式，但是实现起来我感觉都会存在一些小问题，所以就还展示没有做，就不扯那么多了，等做好了再来扯，才比较有证据。</p>
<h2 id="拆字和识别"><a href="#拆字和识别" class="headerlink" title="拆字和识别"></a>拆字和识别</h2><pre><code>下面来说说验证码识别中的一个难点 -&gt; 拆字。
基本上在我看来，能正确的拆字，那么就已经成功了80%了，因为剩下的就是比对的问题了，我在工具中只提供了两种方式拆字。
</code></pre><p><img src="/images/69145828_16.png" alt="img"></p>
<pre><code>手动添加就不用说了，我这里的自动识别是最传统的深度遍历，从图像的第一个像素点开始遍历，因为图像已经二值化，按照我的工具的理解 ，就只剩下白色背景和黑色文字，所以遇到一个黑色像素点的时候开始记录，然后开始深度遍历，大概效果如下：
</code></pre><p><img src="/images/69145828_17.png" alt="img"><br>    　　大概代码如下：</p>
<p><img src="/images/69145828_18.png" alt="img"></p>
<pre><code>对于拆字还有很多其他的方式，这里只是最普通的也是最简单的一种，对于其他方式这个工具中并没有提供，因为工具只针对简单通用的验证码，对于那种需要单独写代码的验证码不考虑，而且工具上功能附加太多也就变得复杂了，其实重点就是感觉有点付出和回报不成正比，而且对于那些流传的拆字理论知识，说起来确实简单，但是实际做的时候才会发现，这些理论其实是存在漏洞的，只会在特定条件下才会成立，而验证码却是变幻多端的，这里也就不扯那么多了。
</code></pre><p>   剩下来的就是识别了，我采用的识别方式比较简单，就是两张图来对比，一张是验证码上面截取出来的图像，一张是已知的样本图像。</p>
<p><img src="/images/69145828_19.png" alt="img"></p>
<pre><code>调用函数会返回这两张图的重叠的像素的个数，这样我把截取出来的验证码字符和我所有的样本对比一次，取出nCount最高的一个作为结果，也就是说取出和样本中重叠率最高的一个出来作为结果，在工具中我有两种方式提供样本，一种是使用系统的字体，一种是手动采集。
</code></pre><p><img src="/images/69145828_20.png" alt="img"></p>
<pre><code>如果使用系统字体，在文本框内输入验证码可能出现的字符，然后点击生成，会弹出系统对话框设置字体，从而产生样本，不过对于一些非标准字体，系统字体就很难搞定了，无论是标准字体，还是非标准的字体都建议使用手动采集的方式，因为直接从验证码上截取下来的图怎么说也是原配，重复的图片工具也只会采集一次，不会重复添加降低效率比对，下面就是一个非标准字体。
</code></pre><p><img src="/images/69145828_20.png" alt="img"></p>
<p>   理论上来说，样本采集越多越全，识别率就越高，反正我每次都是使用的手动采集样本，对了这个工具只是一个配置工具而已，并不能用来做什么其他事情，当一切都配置好了之后，就可以点击工具上的 文件 -&gt; 保存，将这些所有的配置保存成一个文件，可以保存为两种后最(.ci和.ci.png) ，后者以图片保存方便电脑上查看。</p>
<p><img src="/images/69145828_21.png" alt="img"></p>
<pre><code>而识别是另一个独立的工具调用，如果是.NET，则直接调用提供的dll来识别，之所以这样设计是因为，我并不知道别人，会用验证码识别来做什么事情，所以除了识别以外，我也不知道别人想要什么功能，所以把所有东西全部独立出来，供别人调用或者使用，对于识别我提供了一个命令行调用工具供给非.NET平台的程序调用。
</code></pre><p><img src="/images/69145828_22.png" alt="img"></p>
<pre><code>以python举例：
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: UTF-8</span></div><div class="line">  import os</div><div class="line">  result = os.popen(<span class="string">'verifytool.exe D:\\woo.ci.png -f D:\\woo-verify.png'</span>).readlines()</div><div class="line">  <span class="keyword">print</span> (result)</div><div class="line"> <span class="comment"># coding: UTF-8</span></div><div class="line">   import os</div><div class="line">   result = os.popen(<span class="string">'verifytool.exe D:\\woo.ci.png -f D:\\woo-verify.png'</span>).readlines()</div><div class="line">   <span class="keyword">print</span> (result)</div></pre></td></tr></table></figure>
<p>在我的D盘有这样一张图：</p>
<p><img src="/images/69145828_23.png" alt="img"></p>
<p>这样别人就可以自己写脚本去做自己爱做的事情，不过我还是建议使用-p的方式来调用。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: UTF-8</span></div><div class="line">  import urllib2</div><div class="line">  from socket import *</div><div class="line">  h = urllib2.urlopen(<span class="string">'http://www.wooyun.org/captcha.php'</span>)</div><div class="line">  str = h.read()                      <span class="comment">#获取验证码</span></div><div class="line">  s = socket(AF_INET,SOCK_DGRAM);</div><div class="line">  s.sendto(str,(<span class="string">'localhost'</span>,<span class="number">14250</span>))   <span class="comment">#将获取到的验证码发送给识别程序</span></div><div class="line">  code = s.recvfrom(<span class="number">65500</span>)            <span class="comment">#接受识别出来的验证码</span></div><div class="line">   <span class="keyword">print</span>(code)</div></pre></td></tr></table></figure></p>
<p><img src="/images/69145828_24.png" alt="img"></p>
<pre><code>如果程序是.NET平台编写，则可直接使用VerifyReader.dll文件，将其添加引用然后：
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CodeInfo ci = CodeInfo.LoadFromFile(<span class="string">'D:\\woo.ci.png'</span>);</div><div class="line">CodeHelper helper = <span class="keyword">new</span> CodeHelper(ci);</div><div class="line">string code =      helper.GetCodeString(Image.FromFile(<span class="string">'D:\\woo-verify.png'</span>));此处输入代码</div></pre></td></tr></table></figure>
<p> 另外这里还单独的做了一个账户爆破的工具出来：<br> <img src="/images/69145828_25.png" alt="img"><br> 以下是用自己测试的结果：<br> <img src="/images/69145828_26.png" alt="img"><br> <img src="/images/69145828_27.png" alt="img"><br> 双击列表即可查看数据<br> <img src="/images/69145828_28.png" alt="img"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>全套工具及核心代码和使用说明下载连接：<a href="http://down.future-sec.com/VerifyReader-1.1.zip" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/VerifyReader-1.1.zip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：此文章只适合简单验证码，最后也将编写的工具附上以及关键部分代码和使用说明文档。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;虽然验证码发展到如今有许多人类都难以识别的
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python" scheme="http://www.future-sec.com/tags/python/"/>
    
      <category term="验证码" scheme="http://www.future-sec.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>一维条形码攻击技术(Badbarcode)</title>
    <link href="http://www.future-sec.com/badbarcode.html"/>
    <id>http://www.future-sec.com/badbarcode.html</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2017-07-10T19:39:08.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常生活中，条形码随处可见，特别在超市，便利店，物流业，但你们扫的条形码真的安全吗？之前TK教主在PacSec介绍的条形码攻<br>击和twitter上的demo视频太炫酷，所以就自己买了个扫码器自己研究了一下 ，在研究时候也找遍了国内外所有资料，但是都没有对可以执行的攻击技术完整的文章，故有此文分享。</p>
<h2 id="条形码介绍"><a href="#条形码介绍" class="headerlink" title="条形码介绍"></a>条形码介绍</h2><p><img src="/images/N7NjIvr.png" alt="img"><br>条形码(barcode)是将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符。常见的条形码是由反射率相差很大的黑条（简称条）和白条（简称空）排成的平行线图案。<br>常见的条形码类型有code39 code128 code93 EAN128 EAN13QR等，前面大部分是一维条形码，而QR则是二维条形码，本文重点针对支持一维条形码的扫码器。其中code128是使用最广泛，支持字符最多的一种类<br>型，一般都利用code128条形码进行攻击。</p>
<h2 id="扫码器介绍"><a href="#扫码器介绍" class="headerlink" title="扫码器介绍"></a>扫码器介绍</h2><p><img src="/images/iUrQFz7.png" alt="img"><br>扫码器，大家几乎每天都能看到，在超市付账，物流，医院，彩票等。作用就是把条形码的信息提取出来，而常规的扫码器的工作原理是利用红外线照射，然后反射得出条形码的信息，再用扫描器内置的芯片处理得出结果。国际上常用的扫描器品牌有Symbol，Honeywell，Datalogic等，其中symbol已被摩托罗拉收购。<br>大家在超市购物付账时候都注意到，商品通过扫描后，商品的编码直接显示在屏幕上，其实很多扫码器都是用keyboard的方式输入的，也就是说一个扫描器就相当于一个键盘，这是一个较大的风险。<br><img src="/images/vqu6Rze.png" alt="img"></p>
<h2 id="Code128条形码"><a href="#Code128条形码" class="headerlink" title="Code128条形码"></a>Code128条形码</h2><p>既然知道扫描器是一个keyboard设备，只要控制条形码的数据就可以随意输入键盘数据了。但例如UPC条形码只支持数字，有些则只支持数字与字母，而Code128 是一种广泛使用的条形码类型，因为它支持ASCII<br>0-127字符，所以叫code128，条形码长度可调，最大支持232个字符。<br>Code128也分为三种：</p>
<ol>
<li>Code128A：标准数字和大写字母，控制符，特殊字符</li>
<li>Code128B：标准数字和大写字母，小写字母，特殊字符</li>
<li>Code128C/EAN128：[00]-[99]的数字对集合，共100个，即只能表示偶数位长度的数字。<br>Code128由四部分组成:起始码，数据码，校验码(可有可无)，结束码</li>
</ol>
<p><img src="/images/mMzyE3v.png" alt="img"></p>
<p>如上条形码，黑白相间，且线条粗细不一；由黑色线条(条，Bar)与空白(空，Space)组成，根据粗细程度，可以将以上条形码起始码解读<br>为:211214；第一条黑色竖线是由两个单位的竖线合并组成，而第二条空白竖线即由一个单位的竖线，如此类推。一般前6条的Bar与Space为一个单元。211214 用1,0转成逻辑码就是11010010000，也即是起始码。<br>起始码对照：<br>128A 11010000100<br>128B 11010010000<br>128C 11010011100<br> 结束码都是统一的1100011101011根据上面的解读出的逻辑码11010010000，就可以推断上面那个条形码是属于code128-B类型了。</p>
<p><img src="/images/FNN3Qb3.jpg" alt="img"></p>
<p><img src="/images/yQnYNj.jpg" alt="img"></p>
<p>最后再根据code128的编码表就可以分析出条形码的数据（编码表太长就不贴完了）<br>0x04 控制字符与条形码生成<br>根据上面分析的code128规则，已经可以自己写出一个读取识别和生成条形码的程序了。而我们是要执行操作，最简单的就是利用控制字符。控制字符即非显示字符，例如回车，换行，制表符等。在ASCII中，0-31和127 就是控制字符。<br><img src="/images/7nyaEr.jpg" alt="img"><br>根据ASCII的控制字符表，可以看出Ctrl+?的组合键几乎都有了，例如Ctrl+O，也就是打开文件，但这个只是局部快捷组合键，在一些程序<br>中才能应用，例如浏览器，word等等，利用这些控制字符在某些终端可以使程序跳出沙盒。如何生成可以使计算机执行Ctrl+O的条形码？因为已经上面已<br>经介绍过code128的规则算法，自己写程序也可以。网络也有很多条形码生成的小程序，但在这里推荐一个强大的条形码编辑工具：BarTender</p>
<p><img src="/images/vQjayqi.jpg" alt="img"></p>
<p>下载安装后点击菜单栏“文件”-“新建”-“完成”，就会出现一个空白模板。</p>
<p><img src="/images/jUziauY.jpg" alt="img"></p>
<p>然后点击条形码按钮就可以创建自己的条形码，选择code128类型。</p>
<p><img src="/images/6zA36nM.jpg" alt="img"></p>
<p>利用BarTender轻松就可以生成出条形码，而且字符可以随时改动，方便调试。扫描上图就验证码后，会输入“FutureSec”，然后输入控制字符Ctrl+O</p>
<p><img src="/images/reIN3ye.png" alt="img"></p>
<p>扫码器扫描后立即弹出对话框<br>市面上基本任何一款扫码器都能执行，因为code128是绝大部分扫码器都支持的。<br>0x05 Advanced Data Formatting（高级数据格式）<br>Advanced Data Formatting（ADF），高级数据格式。是摩托罗拉针对扫描器开发的一种更高级的数据输入，根据自己的设定一步一步的规则可以自定义输入的数据，也可以说是一种支持编程的条形码技术。<br>例如，在一个结账系统中，当你对一个商品扫描后，由于该结账系统不能直接对该条形码直接处理，就需要这种技术。结账系统识别码：A12345，前面要A开头；条形码的数据类型：12345 纯数字，想要在这个结账系统中识别就要在输入前进行处理。<br>再举个例子：<br>条形码的数据：<br>8523647122<br>通过ADF输出的数据：<br>8523641&amp;lt;Enter&amp;gt;<br>如何实现ADF？</p>
<p><img src="/images/QVreYzQ.png" alt="img"></p>
<p>现在网上仍然没有ADF的中文资料，而在外国的网站也寥寥无几，无人问津，但靠tk的ppt中提到的ADF也是一头雾水，因为没有具体技术描述，只是一行字带过。后来找到一份摩托罗拉撰写300多页的ADF指南PDF。<br>ADF是一种编程，根据自己的需求构建规则，而用的就不是用代码进行编程而是条形码。ADF把所有规则都用条形码表示，例如Perfix/Suffix，Replace，字符输入等。<br>利用ADF挟持扫描器数据<br>对扫描器进行ADF设置时要先扫描开始模式，Begin New Rule</p>
<p><img src="/images/6V3yEnR.jpg" alt="img"></p>
<p>此后开始扫描的条形码都会被添加规则，前提是规则的逻辑是合法的。<br>随后依次扫描下列条形码</p>
<p><img src="/images/aERbiai.jpg" alt="img"></p>
<p><img src="/images/uI3QNz.jpg" alt="img"></p>
<p><img src="/images/ZJrYZj7.jpg" alt="img"></p>
<p><img src="/images/AVb6Nfa.jpg" alt="img"></p>
<p>然后Save Rule</p>
<p><img src="/images/JVne6bV.jpg" alt="img"></p>
<p>当Save Rule，扫描器的输出数据都会被挟持成“TEST”，当你设置了ADF时，就会把你的规则按流程一步一步执行。<br>如何恢复？</p>
<p><img src="/images/73iq2i6.jpg" alt="img"></p>
<p>扫描清除所有规则条形码即可。</p>
<h2 id="利用ADF执行命令，种植木马"><a href="#利用ADF执行命令，种植木马" class="headerlink" title="利用ADF执行命令，种植木马"></a>利用ADF执行命令，种植木马</h2><p>由于单凭控制字符无法执行命令，而ADF支持简单的编程和更多的键，利用ADF可以轻松执行系统命令。由于ADF支持很多键，例如最有用的WIN+R。<br> 在ADF中称为GUI R，既然知道了可以WIN+R的键，利用上面的规则就可以弹出cmd执行了。但这样还是不行，因为输入的是由系统自动输入，速度是手打无法可比的，当你执行到GUI R，再执行”c”,”m”,”d”， win+r的对话框还没有出来就已经输入了cmd，所有要延时，而ADF就支持，相当于编程中的 sleep()。 </p>
<p><img src="/images/mMvE3i7.jpg" alt="img"></p>
<p>在录ADF规则时，扫描延时后要输入两个Numeric，例如依次0和1两个码，就代表延时0.1秒，0和5就代表0.5秒，默认是延时1秒。<br>知道这些ADF条形码后就可以构建弹出cmd，然后再利用控制字符执行命令，主要是Enter。但如果要按照以上这么搞的话，仅是弹出一个cmd窗口就要十多个条形码了，也就是说扫描器要扫十多次。可以先看看腾讯玄武实验室的demo视频：<br><a href="https://twitter.com/tombkeeper/status/663730674017300480" rel="external nofollow noopener noreferrer" target="_blank">https://twitter.com/tombkeeper/status/663730674017300480</a><br>视频中用了一叠条形码，依次扫描，扫描了十多次就出来个cmd，可能这与扫描器型号也有关系。</p>
<p><img src="/images/3YNNnaV.png" alt="img"></p>
<p>这样的话不管是规则生成和利用都非常繁琐，其实是可以优化的，ADF的规则可以合并。利用motorola的扫描器。</p>
<p><img src="/images/7VFVrqu.png" alt="img"></p>
<p>123scan是摩托罗拉官方出品非常强大的扫描器 管理软件，在其官网可以下载。功能很多，在这里就介绍利用123scan设置ADF。<br>打开后点击”Create new configuration file”-&gt;”My scanner is NOT<br>connected”-&gt;选择扫描器-&gt;”Mondify data”-&gt;”Program complex data modifications”-&gt;”Create a new rule”。</p>
<p><img src="/images/jM7vaqv.png" alt="img"></p>
<p>点击Add action就是添加规则。</p>
<p><img src="/images/qyeyUv7.png" alt="img"></p>
<p>ADF所有规则都在里面，包括Beep控制（控制扫描器蜂鸣），Replace等。</p>
<p><img src="/images/r67NVj.png" alt="img"></p>
<p>设置延时0.5秒，依次添加规则。</p>
<p><img src="/images/VjEFRzQ.png" alt="img"></p>
<p>最后会自动合并条形码并输出。</p>
<p><img src="/images/Jr2aama.png" alt="img"></p>
<p>以上就是执行任意命令的条形码payload，除去1和2的设置出厂设置和清除所有规则，只需要4个条形码就可以执行任意单条命令。其中Send<br>ALL that remains是代表设置ADF后扫描条形码的原本数据。<br>以上四组条形码的ADF流程是:输入WIN+R键-&gt;延时0.5秒-&gt;输入c键-&gt;输入m键-&gt;输入d键-&gt;输入回车<br>-&gt;延时0.5秒-&gt;执行条形码的内容，而随后的Send ALL that<br>remains就是你要执行的命令，可以多行命令，要是单行命令基本上4条就够不需要加Send ALL that remains。<br>利用ADF种植木马<br>既然已经可以执行cmd命令，最简单的方法就是利用ftp下载执行任意程序。上面提到的Send ALL that remains可以用BarTender生成出FTP命令。</p>
<p><img src="/images/y6bM7fQ.png" alt="img"></p>
<pre><code class="php"><span class="comment">#!bash ftp test?CR?a?CR?a?CR?get w.exe?CR?bye?CR?w.exe?CR?get w.exe?CR?bye?CR?w.exe?CR?</span>
</code></pre>
<p>下面给出我们的demo视频，是已经经过扫描四次ADF设置后。不管扫描什么条形码执行到Send ALL that remains。视频中是利用FTP命令执行。（测试型号Symbol-LS4208-SR20001ZZR）<br><a href="http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2" rel="external nofollow noopener noreferrer" target="_blank">http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2</a><br>密码:wooyun520</p>
<h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2><p>简单总结一下可能存在攻击的场景地点:</p>
<h3 id="商店付款"><a href="#商店付款" class="headerlink" title="商店付款"></a>商店付款</h3><p><img src="/images/2ErAzu.png" alt="img"></p>
<p>直接把条形码替换到商品；很多便利店支持微信，支付宝二维码支付，扫描器也支持多个类型条形码，可以直接把条形码存在手机中，让其扫描；有些大型百货有资助价格查询终端，只要用特殊的条形码到终端一扫就能跳出终端。</p>
<h3 id="医院病历，检验单"><a href="#医院病历，检验单" class="headerlink" title="医院病历，检验单"></a>医院病历，检验单</h3><p><img src="/images/nyUzMva.png" alt="img"></p>
<p>现在医院的挂号，病历都会有个条形码，直接到医院自主终端或直接递给护士扫描；去医院都知道，有资助出检验单的终端，只要一扫就会单子，基本每个医院都有了。</p>
<p><img src="/images/NjYRRb6.png" alt="img"></p>
<h3 id="彩票"><a href="#彩票" class="headerlink" title="彩票"></a>彩票</h3><p><img src="/images/nyeIFre.png" alt="img"></p>
<p>彩票自身都会有条形码，兑换彩票就凭靠条形码到机器识别，所以伪造或对检验机进行攻击还是有可能，彩票终端类型这么多。</p>
<p><img src="/images/uUneYn2.png" alt="img"></p>
<h3 id="快递单子"><a href="#快递单子" class="headerlink" title="快递单子"></a>快递单子</h3><p><img src="/images/FZ7V7zA.png" alt="img"></p>
<p>快递都有条形码，一般是code128或者code39类型。在一些快递自助取件柜，和快递小哥扫描的时候或许会出现风险。</p>
<p><img src="/images/M7fA3em.png" alt="img"><br>。。。。。。<br>场景很多就不一一列举了，以上场景有空我会逐一分析。</p>
<h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><ol>
<li>扫码器默认不要开启ADF功能 </li>
<li>扫描器尽量不要使用键盘模拟 </li>
<li>设置热键黑名单</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一维条形码攻击的概念在国外很多年前就有提出了，但是没人深入研究。利用条形码也可能出现SQL注射，XSS，溢出等攻击。无论什么设备，只要能控制一部分输入，就存在风险！</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.appsbarcode.com/code%20128.php" rel="external nofollow noopener noreferrer" target="_blank">http://www.appsbarcode.com/code%20128.php</a> Code 128 條碼．編碼規則<br> <a href="http://www.slideshare.net/mobile/PacSecJP/hyperchem-ma-ba" rel="external nofollow noopener noreferrer" target="_blank">http://www.slideshare.net/mobile/PacSecJP/hyperchem-ma-ba</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在日常生活中，条形码随处可见，特别在超市，便利店，物流业，但你们扫的条形码真的安全吗？之前TK教主在PacSec介绍的条形码攻&lt;br&gt;击和t
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="条形码" scheme="http://www.future-sec.com/tags/%E6%9D%A1%E5%BD%A2%E7%A0%81/"/>
    
  </entry>
  
</feed>
